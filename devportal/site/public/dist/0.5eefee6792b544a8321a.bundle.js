(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[0],{

/***/ "./node_modules/@hapi/joi/dist/joi-browser.min.js":
/*!********************************************************!*\
  !*** ./node_modules/@hapi/joi/dist/joi-browser.min.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,t){ true?module.exports=t():undefined}(window,(function(){return function(e){var t={};function r(s){if(t[s])return t[s].exports;var n=t[s]={i:s,l:!1,exports:{}};return e[s].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,s){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(r.r(s),Object.defineProperty(s,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var n in e)r.d(s,n,function(t){return e[t]}.bind(null,n));return s},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=12)}([function(e,t,r){\"use strict\";const s=r(13);e.exports=function(e){if(!e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];if(1===r.length&&r[0]instanceof Error)throw r[0];throw new s(r)}}},function(e,t,r){\"use strict\";const s=r(0),n=r(13),o=r(28);let a,i;const l={isoDate:/^(?:[-+]\\d{2})?(?:\\d{4}(?!\\d{2}\\b))(?:(-?)(?:(?:0[1-9]|1[0-2])(?:\\1(?:[12]\\d|0[1-9]|3[01]))?|W(?:[0-4]\\d|5[0-2])(?:-?[1-7])?|(?:00[1-9]|0[1-9]\\d|[12]\\d{2}|3(?:[0-5]\\d|6[1-6])))(?![T]$|[T][\\d]+Z$)(?:[T\\s](?:(?:(?:[01]\\d|2[0-3])(?:(:?)[0-5]\\d)?|24\\:?00)(?:[.,]\\d+(?!:))?)(?:\\2[0-5]\\d(?:[.,]\\d+)?)?(?:[Z]|(?:[+-])(?:[01]\\d|2[0-3])(?::?[0-5]\\d)?)?)?)?$/};t.version=o.version,t.defaults={abortEarly:!0,allowUnknown:!1,cache:!0,context:null,convert:!0,dateFormat:\"iso\",errors:{escapeHtml:!1,label:\"path\",language:null,render:!0,stack:!1,wrapArrays:!0},externals:!0,messages:{},nonEnumerables:!1,noDefaults:!1,presence:\"optional\",skipFunctions:!1,stripUnknown:!1,warnings:!1},t.symbols={any:Symbol.for(\"@hapi/joi/schema\"),arraySingle:Symbol(\"arraySingle\"),deepDefault:Symbol(\"deepDefault\"),literal:Symbol(\"literal\"),override:Symbol(\"override\"),prefs:Symbol(\"prefs\"),ref:Symbol(\"ref\"),values:Symbol(\"values\"),template:Symbol(\"template\")},t.assertOptions=function(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:\"Options\";s(e&&\"object\"==typeof e&&!Array.isArray(e),\"Options must be of type object\");const n=Object.keys(e).filter(e=>!t.includes(e));s(0===n.length,\"\".concat(r,\" contain unknown keys: \").concat(n))},t.checkPreferences=function(e){const t=(i=i||r(16)).preferences.validate(e);if(t.error)throw new n([t.error.details[0].message])},t.compare=function(e,t,r){switch(r){case\"=\":return e===t;case\">\":return e>t;case\"<\":return e<t;case\">=\":return e>=t;case\"<=\":return e<=t}},t.default=function(e,t){return void 0===e?t:e},t.isIsoDate=function(e){return l.isoDate.test(e)},t.isNumber=function(e){return\"number\"==typeof e&&!isNaN(e)},t.isResolvable=function(e){return!!e&&(e[t.symbols.ref]||e[t.symbols.template])},t.isSchema=function(e){let r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const n=e&&e[t.symbols.any];return!!n&&(s(r.legacy||n.version===t.version,\"Cannot mix different versions of joi schemas\"),!0)},t.isValues=function(e){return e[t.symbols.values]},t.limit=function(e){return Number.isSafeInteger(e)&&e>=0},t.preferences=function(e,s){a=a||r(9),e=e||{},s=s||{};const n=Object.assign({},e,s);return s.errors&&e.errors&&(n.errors=Object.assign({},e.errors,s.errors)),s.messages&&(n.messages=a.compile(s.messages,e.messages)),delete n[t.symbols.prefs],n},t.tryWithPath=function(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};try{return e()}catch(e){throw void 0!==e.path?e.path=t+\".\"+e.path:e.path=t,r.append&&(e.message=\"\".concat(e.message,\" (\").concat(e.path,\")\")),e}},t.validateArg=function(e,r,s){let{assert:n,message:o}=s;if(t.isSchema(n)){const t=n.validate(e);if(!t.error)return;return t.error.message}if(!n(e))return r?\"\".concat(r,\" \").concat(o):o},t.verifyFlat=function(e,t){for(const r of e)s(!Array.isArray(r),\"Method no longer accepts array arguments:\",t)}},function(e,t,r){\"use strict\";const s=r(14),n=r(10),o={needsProtoHack:new Set([s.set,s.map,s.weakSet,s.weakMap])};e.exports=o.clone=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;if(\"object\"!=typeof e||null===e)return e;let a=o.clone,i=r;if(t.shallow){if(!0!==t.shallow)return o.cloneWithShallow(e,t);a=e=>e}else{const t=(i=i||new Map).get(e);if(t)return t}const l=s.getInternalProto(e);if(l===s.buffer)return!1;if(l===s.date)return new Date(e.getTime());if(l===s.regex)return new RegExp(e);const c=o.base(e,l,t);if(c===e)return e;if(i&&i.set(e,c),l===s.set)for(const r of e)c.add(a(r,t,i));else if(l===s.map)for(const[r,s]of e)c.set(r,a(s,t,i));const u=n.keys(e,t);for(const r of u){if(l===s.array&&\"length\"===r){c.length=e.length;continue}const n=Object.getOwnPropertyDescriptor(e,r);n?n.get||n.set?Object.defineProperty(c,r,n):n.enumerable?c[r]=a(e[r],t,i):Object.defineProperty(c,r,{enumerable:!1,writable:!0,configurable:!0,value:a(e[r],t,i)}):Object.defineProperty(c,r,{enumerable:!0,writable:!0,configurable:!0,value:a(e[r],t,i)})}return c},o.cloneWithShallow=function(e,t){const r=t.shallow;(t=Object.assign({},t)).shallow=!1;const s=n.store(e,r),a=o.clone(e,t);return n.restore(a,e,s),a},o.base=function(e,t,r){if(t===s.array)return[];if(!1===r.prototype)return o.needsProtoHack.has(t)?new t.constructor:{};const n=Object.getPrototypeOf(e);if(n&&n.isImmutable)return e;if(o.needsProtoHack.has(t)){const e=new n.constructor;return n!==t&&Object.setPrototypeOf(e,n),e}return Object.create(n)}},function(e,t,r){\"use strict\";const s=r(0),n=r(32),o=r(1),a=r(9);e.exports=n.extend({type:\"any\",flags:{only:{default:!1}},terms:{alterations:{init:null},examples:{init:null},externals:{init:null},metas:{init:[]},notes:{init:[]},shared:{init:null},tags:{init:[]},whens:{init:null}},rules:{custom:{method(e,t){return s(\"function\"==typeof e,\"Method must be a function\"),s(void 0===t||t&&\"string\"==typeof t,\"Description must be a non-empty string\"),this.$_addRule({name:\"custom\",args:{method:e,description:t}})},validate(e,t,r){let{method:s}=r;try{return s(e,t)}catch(e){return t.error(\"any.custom\",{error:e})}},args:[\"method\",\"description\"],multi:!0},messages:{method(e){return this.prefs({messages:e})}},shared:{method(e){s(o.isSchema(e)&&e._flags.id,\"Schema must be a schema with an id\");const t=this.clone();return t.$_terms.shared=t.$_terms.shared||[],t.$_terms.shared.push(e),t.$_mutateRegister(e),t}},warning:{method(e,t){return s(e&&\"string\"==typeof e,\"Invalid warning code\"),this.$_addRule({name:\"warning\",args:{code:e,local:t},warn:!0})},validate(e,t,r){let{code:s,local:n}=r;return t.error(s,n)},args:[\"code\",\"local\"],multi:!0}},modifiers:{keep(e){let t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];e.keep=t},message(e,t){e.message=a.compile(t)},warn(e){let t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];e.warn=t}},manifest:{build(e,t){for(const r in t){const s=t[r];if([\"examples\",\"externals\",\"metas\",\"notes\",\"tags\"].includes(r))for(const t of s)e=e[r.slice(0,-1)](t);else if(\"alterations\"!==r)if(\"whens\"!==r){if(\"shared\"===r)for(const t of s)e=e.shared(t)}else for(const t of s){const{ref:r,is:s,not:n,then:o,otherwise:a,concat:i}=t;e=i?e.concat(i):r?e.when(r,{is:s,not:n,then:o,otherwise:a,switch:t.switch,break:t.break}):e.when(s,{then:o,otherwise:a,break:t.break})}else{const t={};for(const e of s){const{target:r,adjuster:s}=e;t[r]=s}e=e.alter(t)}}return e}},messages:{\"any.custom\":'\"{{#label}}\" failed custom validation because {{#error.message}}',\"any.default\":'\"{{#label}}\" threw an error when running default method',\"any.failover\":'\"{{#label}}\" threw an error when running failover method',\"any.invalid\":'\"{{#label}}\" contains an invalid value',\"any.only\":'\"{{#label}}\" must be {if(#valids.length == 1, \"\", \"one of \")}{{#valids}}',\"any.ref\":'\"{{#label}}\" {{#arg}} references \"{{#ref}}\" which {{#reason}}',\"any.required\":'\"{{#label}}\" is required',\"any.unknown\":'\"{{#label}}\" is not allowed'}})},function(e,t,r){\"use strict\";const s=r(2),n=r(1),o=r(6),a={annotations:Symbol(\"annotations\")};t.Report=class{constructor(e,r,s,n,o,a,i){if(this.code=e,this.flags=n,this.messages=o,this.path=a.path,this.prefs=i,this.state=a,this.value=r,this.message=null,this.template=null,this.local=s||{},this.local.label=t.label(this.flags,this.state,this.prefs,this.messages),void 0===this.value||this.local.hasOwnProperty(\"value\")||(this.local.value=this.value),this.path.length){const e=this.path[this.path.length-1];\"object\"!=typeof e&&(this.local.key=e)}}_setTemplate(e){if(this.template=e,!this.flags.label&&0===this.path.length){const e=this._template(this.template,\"root\");e&&(this.local.label=e)}}toString(){if(this.message)return this.message;const e=this.code;if(!this.prefs.errors.render)return this.code;const t=this._template(this.template)||this._template(this.prefs.messages)||this._template(this.messages);return void 0===t?'Error code \"'.concat(e,'\" is not defined, your custom type is missing the correct messages definition'):(this.message=t.render(this.value,this.state,this.prefs,this.local,{errors:this.prefs.errors,messages:[this.prefs.messages,this.messages]}),this.prefs.errors.label||(this.message=this.message.replace(/^\"\" /,\"\").trim()),this.message)}_template(e,r){return t.template(this.value,e,r||this.code,this.state,this.prefs)}},t.path=function(e){let t=\"\";for(const r of e)\"object\"!=typeof r&&(\"string\"==typeof r?(t&&(t+=\".\"),t+=r):t+=\"[\".concat(r,\"]\"));return t},t.template=function(e,t,r,s,a){if(!t)return;if(o.isTemplate(t))return\"root\"!==r?t:null;let i=a.errors.language;return n.isResolvable(i)&&(i=i.resolve(e,s,a)),i&&t[i]&&void 0!==t[i][r]?t[i][r]:t[r]},t.label=function(e,r,s,n){if(e.label)return e.label;if(!s.errors.label)return\"\";let o=r.path;return\"key\"===s.errors.label&&r.path.length>1&&(o=r.path.slice(-1)),t.path(o)||t.template(null,s.messages,\"root\",r,s)||n&&t.template(null,n,\"root\",r,s)||\"value\"},t.process=function(e,r,s){if(!e)return null;const{override:n,message:o,details:a}=t.details(e);if(n)return n;if(s.errors.stack)return new t.ValidationError(o,a,r);const i=Error.stackTraceLimit;Error.stackTraceLimit=0;const l=new t.ValidationError(o,a,r);return Error.stackTraceLimit=i,l},t.details=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=[];const s=[];for(const n of e){if(n instanceof Error){if(!1!==t.override)return{override:n};const e=n.toString();r.push(e),s.push({message:e,type:\"override\",context:{error:n}});continue}const e=n.toString();r.push(e),s.push({message:e,path:n.path.filter(e=>\"object\"!=typeof e),type:n.code,context:n.local})}return r.length>1&&(r=[...new Set(r)]),{message:r.join(\". \"),details:s}},t.ValidationError=class extends Error{constructor(e,t,r){super(e),this._original=r,this.details=t}annotate(e){if(!this._original||\"object\"!=typeof this._original)return this.details[0].message;const t=e?\"\":\"\u001b[31m\",r=e?\"\":\"\u001b[41m\",o=e?\"\":\"\u001b[0m\",i=s(this._original);for(let e=this.details.length-1;e>=0;--e){const t=e+1,r=this.details[e],s=r.path;let o=i;for(let e=0;;++e){const i=s[e];if(n.isSchema(o)&&(o=o.clone()),!(e+1<s.length&&\"string\"!=typeof o[i])){const e=o[a.annotations]||{errors:{},missing:{}};o[a.annotations]=e;const s=i||r.context.key;void 0!==o[i]?(e.errors[s]=e.errors[s]||[],e.errors[s].push(t)):e.missing[s]=t;break}o=o[i]}}const l=/_\\$key\\$_([, \\d]+)_\\$end\\$_\"/g,c=/\"_\\$miss\\$_([^|]+)\\|(\\d+)_\\$end\\$_\": \"__missing__\"/g,u=/\\s*\"_\\$idx\\$_([, \\d]+)_\\$end\\$_\",?\\n(.*)/g,f=/\"\\[(NaN|Symbol.*|-?Infinity|function.*|\\(.*)]\"/g;let h=a.safeStringify(i,2).replace(l,(e,r)=>'\" '.concat(t,\"[\").concat(r,\"]\").concat(o)).replace(c,(e,s,n)=>\"\".concat(r,'\"').concat(s,'\"').concat(o).concat(t,\" [\").concat(n,\"]: -- missing --\").concat(o)).replace(u,(e,r,s)=>\"\\n\".concat(s,\" \").concat(t,\"[\").concat(r,\"]\").concat(o)).replace(f,(e,t)=>t);h=\"\".concat(h,\"\\n\").concat(t);for(let e=0;e<this.details.length;++e){const t=e+1;h=\"\".concat(h,\"\\n[\").concat(t,\"] \").concat(this.details[e].message)}return h+=o}},t.ValidationError.prototype.isJoi=!0,t.ValidationError.prototype.name=\"ValidationError\",a.safeStringify=function(e,t){return JSON.stringify(e,a.serializer(),t)},a.serializer=function(){const e=[],t=[],r=(r,s)=>t[0]===s?\"[Circular ~]\":\"[Circular ~.\"+e.slice(0,t.indexOf(s)).join(\".\")+\"]\";return function(s,n){if(t.length>0){const o=t.indexOf(this);~o?(t.length=o+1,e.length=o+1,e[o]=s):(t.push(this),e.push(s)),~t.indexOf(n)&&(n=r.call(this,s,n))}else t.push(n);if(n){const e=n[a.annotations];if(e){if(Array.isArray(n)){const t=[];for(let r=0;r<n.length;++r)e.errors[r]&&t.push(\"_$idx$_\".concat(e.errors[r].sort().join(\", \"),\"_$end$_\")),t.push(n[r]);n=t}else{for(const t in e.errors)n[\"\".concat(t,\"_$key$_\").concat(e.errors[t].sort().join(\", \"),\"_$end$_\")]=n[t],n[t]=void 0;for(const t in e.missing)n[\"_$miss$_\".concat(t,\"|\").concat(e.missing[t],\"_$end$_\")]=\"__missing__\"}return n}}return n===1/0||n===-1/0||Number.isNaN(n)||\"function\"==typeof n||\"symbol\"==typeof n?\"[\"+n.toString()+\"]\":n}}},function(e,t,r){\"use strict\";const s=r(0),n=r(2),o=r(8),a=r(1);let i;const l={symbol:Symbol(\"ref\"),defaults:{adjust:null,in:!1,iterables:null,map:null,separator:\".\",type:\"value\"}};t.create=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};s(\"string\"==typeof e,\"Invalid reference key:\",e),a.assertOptions(t,[\"adjust\",\"ancestor\",\"in\",\"iterables\",\"map\",\"prefix\",\"separator\"]),s(!t.prefix||\"object\"==typeof t.prefix,\"options.prefix must be of type object\");const r=Object.assign({},l.defaults,t);delete r.prefix;const n=r.separator,o=l.context(e,n,t.prefix);if(r.type=o.type,e=o.key,\"value\"===r.type)if(o.root&&(s(!n||e[0]!==n,\"Cannot specify relative path with root prefix\"),r.ancestor=\"root\",e||(e=null)),n&&n===e)e=null,r.ancestor=0;else if(void 0!==r.ancestor)s(!n||!e||e[0]!==n,\"Cannot combine prefix with ancestor option\");else{const[t,s]=l.ancestor(e,n);s&&\"\"===(e=e.slice(s))&&(e=null),r.ancestor=t}return r.path=n?null===e?[]:e.split(n):[e],new l.Ref(r)},t.in=function(e){let r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return t.create(e,Object.assign({},r,{in:!0}))},t.isRef=function(e){return!!e&&!!e[a.symbols.ref]},l.Ref=class{constructor(e){s(\"object\"==typeof e,\"Invalid reference construction\"),a.assertOptions(e,[\"adjust\",\"ancestor\",\"in\",\"iterables\",\"map\",\"path\",\"separator\",\"type\",\"depth\",\"key\",\"root\",\"display\"]),s([!1,void 0].includes(e.separator)||\"string\"==typeof e.separator&&1===e.separator.length,\"Invalid separator\"),s(!e.adjust||\"function\"==typeof e.adjust,\"options.adjust must be a function\"),s(!e.map||Array.isArray(e.map),\"options.map must be an array\"),s(!e.map||!e.adjust,\"Cannot set both map and adjust options\"),Object.assign(this,l.defaults,e),s(\"value\"===this.type||void 0===this.ancestor,\"Non-value references cannot reference ancestors\"),Array.isArray(this.map)&&(this.map=new Map(this.map)),this.depth=this.path.length,this.key=this.path.length?this.path.join(this.separator):null,this.root=this.path[0],this.updateDisplay()}resolve(e,t,r,n){let o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{};return s(!this.in||o.in,\"Invalid in() reference usage\"),\"global\"===this.type?this._resolve(r.context,t,o):\"local\"===this.type?this._resolve(n,t,o):this.ancestor?\"root\"===this.ancestor?this._resolve(t.ancestors[t.ancestors.length-1],t,o):(s(this.ancestor<=t.ancestors.length,\"Invalid reference exceeds the schema root:\",this.display),this._resolve(t.ancestors[this.ancestor-1],t,o)):this._resolve(e,t,o)}_resolve(e,t,r){let s;if(\"value\"===this.type&&t.mainstay.shadow&&!1!==r.shadow&&(s=t.mainstay.shadow.get(this.absolute(t))),void 0===s&&(s=o(e,this.path,{iterables:this.iterables,functions:!0})),this.adjust&&(s=this.adjust(s)),this.map){const e=this.map.get(s);void 0!==e&&(s=e)}return t.mainstay&&t.mainstay.tracer.resolve(t,this,s),s}toString(){return this.display}absolute(e){return[...e.path.slice(0,-this.ancestor),...this.path]}clone(){return new l.Ref(this)}describe(){const e={path:this.path};\"value\"!==this.type&&(e.type=this.type),\".\"!==this.separator&&(e.separator=this.separator),\"value\"===this.type&&1!==this.ancestor&&(e.ancestor=this.ancestor),this.map&&(e.map=[...this.map]);for(const t of[\"adjust\",\"iterables\"])null!==this[t]&&(e[t]=this[t]);return!1!==this.in&&(e.in=!0),{ref:e}}updateDisplay(){const e=null!==this.key?this.key:\"\";if(\"value\"!==this.type)return void(this.display=\"ref:\".concat(this.type,\":\").concat(e));if(!this.separator)return void(this.display=\"ref:\".concat(e));if(!this.ancestor)return void(this.display=\"ref:\".concat(this.separator).concat(e));if(\"root\"===this.ancestor)return void(this.display=\"ref:root:\".concat(e));if(1===this.ancestor)return void(this.display=\"ref:\".concat(e||\"..\"));const t=new Array(this.ancestor+1).fill(this.separator).join(\"\");this.display=\"ref:\".concat(t).concat(e||\"\")}},l.Ref.prototype[a.symbols.ref]=!0,t.build=function(e){return\"value\"===(e=Object.assign({},l.defaults,e)).type&&void 0===e.ancestor&&(e.ancestor=1),new l.Ref(e)},l.context=function(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(e=e.trim(),r){const s=void 0===r.global?\"$\":r.global;if(s!==t&&e.startsWith(s))return{key:e.slice(s.length),type:\"global\"};const n=void 0===r.local?\"#\":r.local;if(n!==t&&e.startsWith(n))return{key:e.slice(n.length),type:\"local\"};const o=void 0===r.root?\"/\":r.root;if(o!==t&&e.startsWith(o))return{key:e.slice(o.length),type:\"value\",root:!0}}return{key:e,type:\"value\"}},l.ancestor=function(e,t){if(!t)return[1,0];if(e[0]!==t)return[1,0];if(e[1]!==t)return[0,1];let r=2;for(;e[r]===t;)++r;return[r-1,r]},t.toSibling=0,t.toParent=1,t.Manager=class{constructor(){this.refs=[]}register(e,s){if(e)if(s=void 0===s?t.toParent:s,Array.isArray(e))for(const t of e)this.register(t,s);else if(a.isSchema(e))for(const t of e._refs.refs)t.ancestor-s>=0&&this.refs.push({ancestor:t.ancestor-s,root:t.root});else t.isRef(e)&&\"value\"===e.type&&e.ancestor-s>=0&&this.refs.push({ancestor:e.ancestor-s,root:e.root}),(i=i||r(6)).isTemplate(e)&&this.register(e.refs(),s)}get length(){return this.refs.length}clone(){const e=new t.Manager;return e.refs=n(this.refs),e}reset(){this.refs=[]}roots(){return this.refs.filter(e=>!e.ancestor).map(e=>e.root)}}},function(e,t,r){\"use strict\";const s=r(0),n=r(2),o=r(29),a=r(30),i=r(1),l=r(4),c=r(5),u={symbol:Symbol(\"template\"),opens:new Array(1e3).join(\"\\0\"),closes:new Array(1e3).join(\"\u0001\"),dateFormat:{date:Date.prototype.toDateString,iso:Date.prototype.toISOString,string:Date.prototype.toString,time:Date.prototype.toTimeString,utc:Date.prototype.toUTCString}};e.exports=u.Template=class{constructor(e,t){s(\"string\"==typeof e,\"Template source must be a string\"),s(!e.includes(\"\\0\")&&!e.includes(\"\u0001\"),\"Template source cannot contain reserved control characters\"),this.source=e,this.rendered=e,this._template=null,this._settings=n(t),this._parse()}_parse(){if(!this.source.includes(\"{\"))return;const e=u.encode(this.source),t=u.split(e);let r=!1;const s=[],n=t.shift();n&&s.push(n);for(const e of t){const t=\"{\"!==e[0],n=t?\"}\":\"}}\",o=e.indexOf(n);if(-1===o||\"{\"===e[1]){s.push(\"{\".concat(u.decode(e)));continue}const a=e.slice(t?0:1,o),i=this._ref(u.decode(a),t);s.push(i),\"string\"!=typeof i&&(r=!0);const l=e.slice(o+n.length);l&&s.push(u.decode(l))}r?this._template=s:this.rendered=s.join(\"\")}static date(e,t){return u.dateFormat[t.dateFormat].call(e)}describe(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(!this._settings&&e.compact)return this.source;const t={template:this.source};return this._settings&&(t.options=this._settings),t}static build(e){return new u.Template(e.template,e.options)}isDynamic(){return!!this._template}static isTemplate(e){return!!e&&!!e[i.symbols.template]}refs(){if(!this._template)return;const e=[];for(const t of this._template)\"string\"!=typeof t&&e.push(...t.refs);return e}resolve(e,t,r,s){return this._template&&1===this._template.length?this._part(this._template[0],e,t,r,s,{}):this.render(e,t,r,s)}_part(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),s=1;s<t;s++)r[s-1]=arguments[s];return e.ref?e.ref.resolve(...r):e.formula.evaluate(r)}render(e,t,r,s){let n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{};if(!this.isDynamic())return this.rendered;const a=[];for(const i of this._template)if(\"string\"==typeof i)a.push(i);else{const l=this._part(i,e,t,r,s,n),c=u.stringify(l,r,n.errors);if(void 0!==c){const e=i.raw||!1===(n.errors&&n.errors.escapeHtml)?c:o(c);a.push(e)}}return a.join(\"\")}_ref(e,t){const r=[],s=e=>{const t=c.create(e,this._settings);return r.push(t),e=>t.resolve(...e)};try{var n=new a(e,{reference:s,functions:u.functions,constants:u.constants})}catch(t){throw t.message='Invalid template variable \"'.concat(e,'\" fails due to: ').concat(t.message),t}return n.single?\"reference\"===n.single.type?{ref:r[0],raw:t,refs:r}:u.stringify(n.single.value):{formula:n,raw:t,refs:r}}toString(){return this.source}},u.Template.prototype[i.symbols.template]=!0,u.Template.prototype.isImmutable=!0,u.encode=function(e){return e.replace(/\\\\(\\{+)/g,(e,t)=>u.opens.slice(0,t.length)).replace(/\\\\(\\}+)/g,(e,t)=>u.closes.slice(0,t.length))},u.decode=function(e){return e.replace(/\\u0000/g,\"{\").replace(/\\u0001/g,\"}\")},u.split=function(e){const t=[];let r=\"\";for(let s=0;s<e.length;++s){const n=e[s];if(\"{\"===n){let n=\"\";for(;s+1<e.length&&\"{\"===e[s+1];)n+=\"{\",++s;t.push(r),r=n}else r+=n}return t.push(r),t},u.stringify=function(e,t,r){const s=typeof e;if(null===e)return\"null\";if(\"string\"===s)return e;if(\"number\"===s||\"function\"===s||\"symbol\"===s)return e.toString();if(\"object\"!==s)return JSON.stringify(e);if(e instanceof Date)return u.Template.date(e,t);if(e instanceof Map){const t=[];for(const[r,s]of e.entries())t.push(\"\".concat(r.toString(),\" -> \").concat(s.toString()));e=t}if(!Array.isArray(e))return e.toString();let n=\"\";for(const s of e)n=n+(n.length?\", \":\"\")+u.stringify(s,t,r);return r.wrapArrays?\"[\"+n+\"]\":n},u.constants={true:!0,false:!1,null:null,second:1e3,minute:6e4,hour:36e5,day:864e5},u.functions={if:(e,t,r)=>e?t:r,msg(e){const[t,r,s,n,o]=this,a=o.messages;if(!a)return\"\";const i=l.template(t,a[0],e,r,s)||l.template(t,a[1],e,r,s);return i?i.render(t,r,s,n,o):\"\"},number:e=>\"number\"==typeof e?e:\"string\"==typeof e?parseFloat(e):\"boolean\"==typeof e?e?1:0:e instanceof Date?e.getTime():null}},function(e,t,r){\"use strict\";const s=r(0),n=r(1),o=r(5),a={};t.schema=function(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};n.assertOptions(r,[\"appendPath\",\"override\"]);try{return a.schema(e,t,r)}catch(e){throw r.appendPath&&void 0!==e.path&&(e.message=\"\".concat(e.message,\" (\").concat(e.path,\")\")),e}},a.schema=function(e,t,r){s(void 0!==t,\"Invalid undefined schema\"),Array.isArray(t)&&(s(t.length,\"Invalid empty array schema\"),1===t.length&&(t=t[0]));const o=function(t){for(var s=arguments.length,n=new Array(s>1?s-1:0),o=1;o<s;o++)n[o-1]=arguments[o];return!1!==r.override?t.valid(e.override,...n):t.valid(...n)};if(a.simple(t))return o(e,t);if(\"function\"==typeof t)return e.custom(t);if(s(\"object\"==typeof t,\"Invalid schema content:\",typeof t),n.isResolvable(t))return o(e,t);if(n.isSchema(t))return t;if(Array.isArray(t)){for(const r of t)if(!a.simple(r))return e.alternatives().try(...t);return o(e,...t)}return t instanceof RegExp?e.string().regex(t):t instanceof Date?o(e.date(),t):(s(Object.getPrototypeOf(t)===Object.getPrototypeOf({}),\"Schema can only contain plain objects\"),e.object().keys(t))},t.ref=function(e,t){return o.isRef(e)?e:o.create(e,t)},t.compile=function(e,r){let o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};n.assertOptions(o,[\"legacy\"]);const i=r&&r[n.symbols.any];if(i)return s(o.legacy||i.version===n.version,\"Cannot mix different versions of joi schemas:\",i.version,n.version),r;if(\"object\"!=typeof r||!o.legacy)return t.schema(e,r,{appendPath:!0});const l=a.walk(r);return l?l.compile(l.root,r):t.schema(e,r,{appendPath:!0})},a.walk=function(e){if(\"object\"!=typeof e)return null;if(Array.isArray(e)){for(const t of e){const e=a.walk(t);if(e)return e}return null}const t=e[n.symbols.any];if(t)return{root:e[t.root],compile:t.compile};s(Object.getPrototypeOf(e)===Object.getPrototypeOf({}),\"Schema can only contain plain objects\");for(const t in e){const r=a.walk(e[t]);if(r)return r}return null},a.simple=function(e){return null===e||[\"boolean\",\"string\",\"number\"].includes(typeof e)},t.when=function(e,r,i){if(void 0===i&&(s(r&&\"object\"==typeof r,\"Missing options\"),i=r,r=o.create(\".\")),Array.isArray(i)&&(i={switch:i}),n.assertOptions(i,[\"is\",\"not\",\"then\",\"otherwise\",\"switch\",\"break\"]),n.isSchema(r))return s(void 0===i.is,'\"is\" can not be used with a schema condition'),s(void 0===i.not,'\"not\" can not be used with a schema condition'),s(void 0===i.switch,'\"switch\" can not be used with a schema condition'),a.condition(e,{is:r,then:i.then,otherwise:i.otherwise,break:i.break});if(s(o.isRef(r)||\"string\"==typeof r,\"Invalid condition:\",r),s(void 0===i.not||void 0===i.is,'Cannot combine \"is\" with \"not\"'),void 0===i.switch){let l=i;void 0!==i.not&&(l={is:i.not,then:i.otherwise,otherwise:i.then,break:i.break});let c=void 0!==l.is?e.$_compile(l.is):e.$_root.invalid(null,!1,0,\"\").required();return s(void 0!==l.then||void 0!==l.otherwise,'options must have at least one of \"then\", \"otherwise\", or \"switch\"'),s(void 0===l.break||void 0===l.then||void 0===l.otherwise,\"Cannot specify then, otherwise, and break all together\"),void 0===i.is||o.isRef(i.is)||n.isSchema(i.is)||(c=c.required()),a.condition(e,{ref:t.ref(r),is:c,then:l.then,otherwise:l.otherwise,break:l.break})}s(Array.isArray(i.switch),'\"switch\" must be an array'),s(void 0===i.is,'Cannot combine \"switch\" with \"is\"'),s(void 0===i.not,'Cannot combine \"switch\" with \"not\"'),s(void 0===i.then,'Cannot combine \"switch\" with \"then\"');const l={ref:t.ref(r),switch:[],break:i.break};for(let t=0;t<i.switch.length;++t){const r=i.switch[t],a=t===i.switch.length-1;n.assertOptions(r,a?[\"is\",\"then\",\"otherwise\"]:[\"is\",\"then\"]),s(void 0!==r.is,'Switch statement missing \"is\"'),s(void 0!==r.then,'Switch statement missing \"then\"');const c={is:e.$_compile(r.is),then:e.$_compile(r.then)};if(o.isRef(r.is)||n.isSchema(r.is)||(c.is=c.is.required()),a){s(void 0===i.otherwise||void 0===r.otherwise,'Cannot specify \"otherwise\" inside and outside a \"switch\"');const t=void 0!==i.otherwise?i.otherwise:r.otherwise;void 0!==t&&(s(void 0===l.break,\"Cannot specify both otherwise and break\"),c.otherwise=e.$_compile(t))}l.switch.push(c)}return l},a.condition=function(e,t){for(const r of[\"then\",\"otherwise\"])void 0===t[r]?delete t[r]:t[r]=e.$_compile(t[r]);return t}},function(e,t,r){\"use strict\";const s=r(0),n={};e.exports=function(e,t,r){if(!1===t||null==t)return e;\"string\"==typeof(r=r||{})&&(r={separator:r});const o=Array.isArray(t);s(!o||!r.separator,\"Separator option no valid for array-based chain\");const a=o?t:t.split(r.separator||\".\");let i=e;for(let e=0;e<a.length;++e){let o=a[e];const l=r.iterables&&n.iterables(i);if(Array.isArray(i)||\"set\"===l){const e=Number(o);Number.isInteger(e)&&(o=e<0?i.length+e:e)}if(!i||\"function\"==typeof i&&!1===r.functions||!l&&void 0===i[o]){s(!r.strict||e+1===a.length,\"Missing segment\",o,\"in reach path \",t),s(\"object\"==typeof i||!0===r.functions||\"function\"!=typeof i,\"Invalid segment\",o,\"in reach path \",t),i=r.default;break}i=l?\"set\"===l?[...i][o]:i.get(o):i[o]}return i},n.iterables=function(e){return e instanceof Set?\"set\":e instanceof Map?\"map\":void 0}},function(e,t,r){\"use strict\";const s=r(0),n=r(2),o=r(6);t.compile=function(e,t){if(\"string\"==typeof e)return s(!t,\"Cannot set single message string\"),new o(e);if(o.isTemplate(e))return s(!t,\"Cannot set single message template\"),e;s(\"object\"==typeof e&&!Array.isArray(e),\"Invalid message options\"),t=t?n(t):{};for(let r in e){const n=e[r];if(\"root\"===r||o.isTemplate(n)){t[r]=n;continue}if(\"string\"==typeof n){t[r]=new o(n);continue}s(\"object\"==typeof n&&!Array.isArray(n),\"Invalid message for\",r);const a=r;for(r in t[a]=t[a]||{},n){const e=n[r];\"root\"===r||o.isTemplate(e)?t[a][r]=e:(s(\"string\"==typeof e,\"Invalid message for\",r,\"in\",a),t[a][r]=new o(e))}}return t},t.decompile=function(e){const t={};for(let r in e){const s=e[r];if(\"root\"===r){t[r]=s;continue}if(o.isTemplate(s)){t[r]=s.describe({compact:!0});continue}const n=r;for(r in t[n]={},s){const e=s[r];\"root\"!==r?t[n][r]=e.describe({compact:!0}):t[n][r]=e}}return t},t.merge=function(e,r){if(!e)return t.compile(r);if(!r)return e;if(\"string\"==typeof r)return new o(r);if(o.isTemplate(r))return r;const a=n(e);for(let e in r){const t=r[e];if(\"root\"===e||o.isTemplate(t)){a[e]=t;continue}if(\"string\"==typeof t){a[e]=new o(t);continue}s(\"object\"==typeof t&&!Array.isArray(t),\"Invalid message for\",e);const n=e;for(e in a[n]=a[n]||{},t){const r=t[e];\"root\"===e||o.isTemplate(r)?a[n][e]=r:(s(\"string\"==typeof r,\"Invalid message for\",e,\"in\",n),a[n][e]=new o(r))}}return a}},function(e,t,r){\"use strict\";const s=r(8),n={};t.keys=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return!1!==t.symbols?Reflect.ownKeys(e):Object.getOwnPropertyNames(e)},t.store=function(e,t){const r=new Map;for(let o=0;o<t.length;++o){const a=t[o],i=s(e,a);\"object\"!=typeof i&&\"function\"!=typeof i||(r.set(a,i),n.reachSet(e,a,void 0))}return r},t.restore=function(e,t,r){for(const[s,o]of r)n.reachSet(e,s,o),n.reachSet(t,s,o)},n.reachSet=function(e,t,r){const s=Array.isArray(t)?t:t.split(\".\");let n=e;for(let e=0;e<s.length;++e){const t=s[e];e+1===s.length&&(n[t]=r),n=n[t]}}},function(e,t,r){\"use strict\";const s=r(14),n={mismatched:null};e.exports=function(e,t,r){return r=Object.assign({prototype:!0},r),!!n.isDeepEqual(e,t,r,[])},n.isDeepEqual=function(e,t,r,o){if(e===t)return 0!==e||1/e==1/t;const a=typeof e;if(a!==typeof t)return!1;if(null===e||null===t)return!1;if(\"function\"===a){if(!r.deepFunction||e.toString()!==t.toString())return!1}else if(\"object\"!==a)return e!=e&&t!=t;const i=n.getSharedType(e,t,!!r.prototype);switch(i){case s.buffer:return!1;case s.promise:return e===t;case s.regex:return e.toString()===t.toString();case n.mismatched:return!1}for(let r=o.length-1;r>=0;--r)if(o[r].isSame(e,t))return!0;o.push(new n.SeenEntry(e,t));try{return!!n.isDeepEqualObj(i,e,t,r,o)}finally{o.pop()}},n.getSharedType=function(e,t,r){if(r)return Object.getPrototypeOf(e)!==Object.getPrototypeOf(t)?n.mismatched:s.getInternalProto(e);const o=s.getInternalProto(e);return o!==s.getInternalProto(t)?n.mismatched:o},n.valueOf=function(e){const t=e.valueOf;if(void 0===t)return e;try{return t.call(e)}catch(e){return e}},n.hasOwnEnumerableProperty=function(e,t){return Object.prototype.propertyIsEnumerable.call(e,t)},n.isSetSimpleEqual=function(e,t){for(const r of e)if(!t.has(r))return!1;return!0},n.isDeepEqualObj=function(e,t,r,o,a){const{isDeepEqual:i,valueOf:l,hasOwnEnumerableProperty:c}=n,{keys:u,getOwnPropertySymbols:f}=Object;if(e===s.array){if(!o.part){if(t.length!==r.length)return!1;for(let e=0;e<t.length;++e)if(!i(t[e],r[e],o,a))return!1;return!0}for(const e of t)for(const t of r)if(i(e,t,o,a))return!0}else if(e===s.set){if(t.size!==r.size)return!1;if(!n.isSetSimpleEqual(t,r)){const e=new Set(r);for(const r of t){if(e.delete(r))continue;let t=!1;for(const s of e)if(i(r,s,o,a)){e.delete(s),t=!0;break}if(!t)return!1}}}else if(e===s.map){if(t.size!==r.size)return!1;for(const[e,s]of t){if(void 0===s&&!r.has(e))return!1;if(!i(s,r.get(e),o,a))return!1}}else if(e===s.error&&(t.name!==r.name||t.message!==r.message))return!1;const h=l(t),m=l(r);if((t!==h||r!==m)&&!i(h,m,o,a))return!1;const d=u(t);if(!o.part&&d.length!==u(r).length&&!o.skip)return!1;let p=0;for(const e of d)if(o.skip&&o.skip.includes(e))void 0===r[e]&&++p;else{if(!c(r,e))return!1;if(!i(t[e],r[e],o,a))return!1}if(!o.part&&d.length-p!==u(r).length)return!1;if(!1!==o.symbols){const e=f(t),s=new Set(f(r));for(const n of e){if(!o.skip||!o.skip.includes(n))if(c(t,n)){if(!c(r,n))return!1;if(!i(t[n],r[n],o,a))return!1}else if(c(r,n))return!1;s.delete(n)}for(const e of s)if(c(r,e))return!1}return!0},n.SeenEntry=class{constructor(e,t){this.obj=e,this.ref=t}isSame(e,t){return this.obj===e&&this.ref===t}}},function(e,t,r){\"use strict\";const s=r(0),n=r(2),o=r(15),a=r(1),i=r(7),l=r(4),c=r(17),u=r(18),f=r(5),h=r(6),m=r(19);let d;const p={types:{alternatives:r(31),any:r(3),array:r(37),boolean:r(38),date:r(39),function:r(40),link:r(43),number:r(44),object:r(45),string:r(46),symbol:r(50)},aliases:{alt:\"alternatives\",bool:\"boolean\",func:\"function\"}};p.root=function(){const e={_types:new Set(Object.keys(p.types))};for(const t of e._types)e[t]=function(){for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return s(!r.length||[\"alternatives\",\"link\",\"object\"].includes(t),\"The\",t,\"type does not allow arguments\"),p.generate(this,p.types[t],r)};for(const t of[\"allow\",\"custom\",\"disallow\",\"equal\",\"exist\",\"forbidden\",\"invalid\",\"not\",\"only\",\"optional\",\"options\",\"prefs\",\"preferences\",\"required\",\"strip\",\"valid\",\"when\"])e[t]=function(){return this.any()[t](...arguments)};Object.assign(e,p.methods);for(const t in p.aliases){const r=p.aliases[t];e[t]=e[r]}return e.x=e.expression,m.setup&&m.setup(e),e},p.methods={ValidationError:l.ValidationError,version:a.version,cache:o.provider,assert(e,t){for(var r=arguments.length,s=new Array(r>2?r-2:0),n=2;n<r;n++)s[n-2]=arguments[n];p.assert(e,t,!0,s)},attempt(e,t){for(var r=arguments.length,s=new Array(r>2?r-2:0),n=2;n<r;n++)s[n-2]=arguments[n];return p.assert(e,t,!1,s)},build(e){return s(\"function\"==typeof u.build,\"Manifest functionality disabled\"),u.build(this,e)},checkPreferences(e){a.checkPreferences(e)},compile(e,t){return i.compile(this,e,t)},defaults(e){s(\"function\"==typeof e,\"modifier must be a function\");const t=Object.assign({},this);for(const r of t._types){const n=e(t[r]());s(a.isSchema(n),\"modifier must return a valid schema object\"),t[r]=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return p.generate(this,n,t)}}return t},expression(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return new h(...t)},extend(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];a.verifyFlat(t,\"extend\"),d=d||r(16),s(t.length,\"You need to provide at least one extension\"),this.assert(t,d.extensions);const o=Object.assign({},this);o._types=new Set(o._types);for(let e of t){\"function\"==typeof e&&(e=e(o)),this.assert(e,d.extension),s(void 0===o[e.type]||o._types.has(e.type),\"Cannot override name\",e.type);const t=e.base||this.any(),r=c.type(t,e);o._types.add(e.type),o[e.type]=function(){for(var e=arguments.length,t=new Array(e),s=0;s<e;s++)t[s]=arguments[s];return p.generate(this,r,t)}}return o},isExpression:h.isTemplate,isRef:f.isRef,isSchema:a.isSchema,in(){return f.in(...arguments)},override:a.symbols.override,ref(){return f.create(...arguments)},types(){const e={};for(const t of this._types)e[t]=this[t]();for(const t in p.aliases)e[t]=this[t]();return e}},p.assert=function(e,t,r,s){const o=s[0]instanceof Error||\"string\"==typeof s[0]?s[0]:null,i=o?s[1]:s[0],c=t.validate(e,a.preferences({errors:{stack:!0}},i||{}));let u=c.error;if(!u)return c.value;if(o instanceof Error)throw o;const f=(r=r&&\"function\"==typeof u.annotate)?u.annotate():u.message;throw u instanceof l.ValidationError==!1&&(u=n(u)),u.message=o?\"\".concat(o,\" \").concat(f):f,u},p.generate=function(e,t,r){return s(e,\"Must be invoked on a Joi instance.\"),t.$_root=e,t._definition.args&&r.length?t._definition.args(t,...r):t},e.exports=p.root()},function(e,t,r){\"use strict\";const s=r(27);e.exports=class extends Error{constructor(e){super(e.filter(e=>\"\"!==e).map(e=>\"string\"==typeof e?e:e instanceof Error?e.message:s(e)).join(\" \")||\"Unknown error\"),\"function\"==typeof Error.captureStackTrace&&Error.captureStackTrace(this,t.assert)}}},function(e,t,r){\"use strict\";const s={};t=e.exports={array:Array.prototype,buffer:!1,date:Date.prototype,error:Error.prototype,generic:Object.prototype,map:Map.prototype,promise:Promise.prototype,regex:RegExp.prototype,set:Set.prototype,weakMap:WeakMap.prototype,weakSet:WeakSet.prototype},s.typeMap=new Map([[\"[object Error]\",t.error],[\"[object Map]\",t.map],[\"[object Promise]\",t.promise],[\"[object Set]\",t.set],[\"[object WeakMap]\",t.weakMap],[\"[object WeakSet]\",t.weakSet]]),t.getInternalProto=function(e){if(Array.isArray(e))return t.array;if(e instanceof Date)return t.date;if(e instanceof RegExp)return t.regex;if(e instanceof Error)return t.error;const r=Object.prototype.toString.call(e);return s.typeMap.get(r)||t.generic}},function(e,t,r){\"use strict\";const s=r(0),n=r(2),o=r(1),a={max:1e3,supported:new Set([\"undefined\",\"boolean\",\"number\",\"string\"])};t.provider={provision:e=>new a.Cache(e)},a.Cache=class{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};o.assertOptions(e,[\"max\"]),s(void 0===e.max||e.max&&e.max>0&&isFinite(e.max),\"Invalid max cache size\"),this._max=e.max||a.max,this._map=new Map,this._list=new a.List}get length(){return this._map.size}set(e,t){if(null!==e&&!a.supported.has(typeof e))return;let r=this._map.get(e);if(r)return r.value=t,void this._list.first(r);r=this._list.unshift({key:e,value:t}),this._map.set(e,r),this._compact()}get(e){const t=this._map.get(e);if(t)return this._list.first(t),n(t.value)}_compact(){if(this._map.size>this._max){const e=this._list.pop();this._map.delete(e.key)}}},a.List=class{constructor(){this.tail=null,this.head=null}unshift(e){return e.next=null,e.prev=this.head,this.head&&(this.head.next=e),this.head=e,this.tail||(this.tail=e),e}first(e){e!==this.head&&(this._remove(e),this.unshift(e))}pop(){return this._remove(this.tail)}_remove(e){const{next:t,prev:r}=e;return t.prev=r,r&&(r.next=t),e===this.tail&&(this.tail=t),e.prev=null,e.next=null,e}}},function(e,t,r){\"use strict\";const s=r(12),n={};t.preferences=s.object({allowUnknown:s.boolean(),abortEarly:s.boolean(),cache:s.boolean(),context:s.object(),convert:s.boolean(),dateFormat:s.valid(\"date\",\"iso\",\"string\",\"time\",\"utc\"),debug:s.boolean(),errors:{escapeHtml:s.boolean(),label:s.valid(\"path\",\"key\",!1),language:[s.string(),s.object().ref()],render:s.boolean(),stack:s.boolean(),wrapArrays:s.boolean()},externals:s.boolean(),messages:s.object(),noDefaults:s.boolean(),nonEnumerables:s.boolean(),presence:s.valid(\"required\",\"optional\",\"forbidden\"),skipFunctions:s.boolean(),stripUnknown:s.object({arrays:s.boolean(),objects:s.boolean()}).or(\"arrays\",\"objects\").allow(!0,!1),warnings:s.boolean()}).strict(),n.nameRx=/^[a-zA-Z0-9]+$/,n.rule=s.object({alias:s.array().items(s.string().pattern(n.nameRx)).single(),args:s.array().items(s.string(),s.object({name:s.string().pattern(n.nameRx).required(),ref:s.boolean(),assert:s.alternatives([s.function(),s.object().schema()]).conditional(\"ref\",{is:!0,then:s.required()}),normalize:s.function(),message:s.string().when(\"assert\",{is:s.function(),then:s.required()})})),convert:s.boolean(),manifest:s.boolean(),method:s.function().allow(!1),multi:s.boolean(),validate:s.function()}),t.extension=s.object({type:s.string().required(),args:s.function(),base:s.object().schema(),coerce:[s.function().maxArity(3),s.object({method:s.function().maxArity(3).required(),from:s.array().items(s.string()).single()})],flags:s.object().pattern(n.nameRx,s.object({setter:s.string(),default:s.any()})),manifest:{build:s.function().arity(2)},messages:[s.object(),s.string()],modifiers:s.object().pattern(n.nameRx,s.function().minArity(1).maxArity(2)),overrides:s.object().pattern(n.nameRx,s.function()),prepare:s.function().maxArity(3),rebuild:s.function().arity(1),rules:s.object().pattern(n.nameRx,n.rule),terms:s.object().pattern(n.nameRx,s.object({init:s.array().allow(null).required(),manifest:s.object().pattern(/.+/,[s.valid(\"schema\",\"single\"),s.object({mapped:s.object({from:s.string().required(),to:s.string().required()}).required()})])})),validate:s.function().maxArity(3)}).strict(),t.extensions=s.array().items(s.object(),s.function().arity(1)).strict(),n.desc={buffer:s.object({buffer:s.string()}),func:s.object({function:s.function().required(),options:{literal:!0}}),override:s.object({override:!0}),ref:s.object({ref:s.object({type:s.valid(\"value\",\"global\",\"local\"),path:s.array().required(),separator:s.string().length(1).allow(!1),ancestor:s.number().min(0).integer().allow(\"root\"),map:s.array().items(s.array().length(2)).min(1),adjust:s.function(),iterables:s.boolean(),in:s.boolean()}).required()}),regex:s.object({regex:s.string().min(3)}),special:s.object({special:s.valid(\"deep\").required()}),template:s.object({template:s.string().required(),options:s.object()}),value:s.object({value:s.alternatives([s.object(),s.array()]).required()})},n.desc.entity=s.alternatives([s.array().items(s.link(\"...\")),s.boolean(),s.function(),s.number(),s.string(),n.desc.buffer,n.desc.func,n.desc.ref,n.desc.regex,n.desc.special,n.desc.template,n.desc.value,s.link(\"/\")]),n.desc.values=s.array().items(null,s.boolean(),s.function(),s.number().allow(1/0,-1/0),s.string().allow(\"\"),s.symbol(),n.desc.buffer,n.desc.func,n.desc.override,n.desc.ref,n.desc.regex,n.desc.template,n.desc.value),n.desc.messages=s.object().pattern(/.+/,[s.string(),n.desc.template,s.object().pattern(/.+/,[s.string(),n.desc.template])]),t.description=s.object({type:s.string().required(),flags:s.object({cast:s.string(),default:s.any(),description:s.string(),empty:s.link(\"/\"),failover:n.desc.entity,id:s.string(),label:s.string(),only:!0,presence:[\"optional\",\"required\",\"forbidden\"],result:[\"raw\",\"strip\"],strip:s.boolean(),unit:s.string()}).unknown(),preferences:{allowUnknown:s.boolean(),abortEarly:s.boolean(),cache:s.boolean(),convert:s.boolean(),dateFormat:[\"date\",\"iso\",\"string\",\"time\",\"utc\"],errors:{escapeHtml:s.boolean(),label:[\"path\",\"key\"],language:[s.string(),n.desc.ref],wrapArrays:s.boolean()},externals:s.boolean(),messages:n.desc.messages,noDefaults:s.boolean(),nonEnumerables:s.boolean(),presence:[\"required\",\"optional\",\"forbidden\"],skipFunctions:s.boolean(),stripUnknown:s.object({arrays:s.boolean(),objects:s.boolean()}).or(\"arrays\",\"objects\").allow(!0,!1),warnings:s.boolean()},allow:n.desc.values,invalid:n.desc.values,rules:s.array().min(1).items({name:s.string().required(),args:s.object().min(1),keep:s.boolean(),message:[s.string(),n.desc.messages],warn:s.boolean()}),keys:s.object().pattern(/.*/,s.link(\"/\")),link:n.desc.ref}).pattern(/^[a-z]\\w*$/,s.any())},function(e,t,r){\"use strict\";const s=r(0),n=r(2),o=r(1),a=r(9),i={};t.type=function(e,t){const r=Object.getPrototypeOf(e),l=n(r),c=e._assign(Object.create(l)),u=Object.assign({},t);delete u.base,l._definition=u;const f=r._definition||{};u.messages=a.merge(f.messages,u.messages),u.properties=Object.assign({},f.properties,u.properties),c.type=u.type,u.flags=Object.assign({},f.flags,u.flags);const h=Object.assign({},f.terms);if(u.terms)for(const e in u.terms){const t=u.terms[e];s(void 0===c.$_terms[e],\"Invalid term override for\",u.type,e),c.$_terms[e]=t.init,h[e]=t}u.terms=h,u.args||(u.args=f.args),u.prepare=i.prepare(u.prepare,f.prepare),u.coerce&&(\"function\"==typeof u.coerce&&(u.coerce={method:u.coerce}),u.coerce.from&&!Array.isArray(u.coerce.from)&&(u.coerce={method:u.coerce.method,from:[].concat(u.coerce.from)})),u.coerce=i.coerce(u.coerce,f.coerce),u.validate=i.validate(u.validate,f.validate);const m=Object.assign({},f.rules);if(u.rules)for(const e in u.rules){const t=u.rules[e];s(\"object\"==typeof t,\"Invalid rule definition for\",u.type,e);let r=t.method;if(void 0===r&&(r=function(){return this.$_addRule(e)}),r&&(s(!l[e],\"Rule conflict in\",u.type,e),l[e]=r),s(!m[e],\"Rule conflict in\",u.type,e),m[e]=t,t.alias){const e=[].concat(t.alias);for(const r of e)l[r]=t.method}t.args&&(t.argsByName=new Map,t.args=t.args.map(e=>(\"string\"==typeof e&&(e={name:e}),s(!t.argsByName.has(e.name),\"Duplicated argument name\",e.name),o.isSchema(e.assert)&&(e.assert=e.assert.strict().label(e.name)),t.argsByName.set(e.name,e),e)))}u.rules=m;const d=Object.assign({},f.modifiers);if(u.modifiers)for(const e in u.modifiers){s(!l[e],\"Rule conflict in\",u.type,e);const t=u.modifiers[e];s(\"function\"==typeof t,\"Invalid modifier definition for\",u.type,e);const r=function(t){return this.rule({[e]:t})};l[e]=r,d[e]=t}if(u.modifiers=d,u.overrides){l._super=r,c.$_super={};for(const e in u.overrides)s(r[e],\"Cannot override missing\",e),c.$_super[e]=r[e].bind(c);Object.assign(l,u.overrides)}u.cast=Object.assign({},f.cast,u.cast);const p=Object.assign({},f.manifest,u.manifest);return p.build=i.build(u.manifest&&u.manifest.build,f.manifest&&f.manifest.build),u.manifest=p,u.rebuild=i.rebuild(u.rebuild,f.rebuild),c},i.build=function(e,t){return e&&t?function(r,s){return t(e(r,s),s)}:e||t},i.coerce=function(e,t){return e&&t?{from:e.from&&t.from?[...new Set([...e.from,...t.from])]:null,method(r,s){let n;if((!t.from||t.from.includes(typeof r))&&(n=t.method(r,s))){if(n.errors||void 0===n.value)return n;r=n.value}if(!e.from||e.from.includes(typeof r)){const t=e.method(r,s);if(t)return t}return n}}:e||t},i.prepare=function(e,t){return e&&t?function(r,s){const n=e(r,s);if(n){if(n.errors||void 0===n.value)return n;r=n.value}return t(r,s)||n}:e||t},i.rebuild=function(e,t){return e&&t?function(r){t(r),e(r)}:e||t},i.validate=function(e,t){return e&&t?function(r,s){const n=t(r,s);if(n){if(n.errors&&(!Array.isArray(n.errors)||n.errors.length))return n;r=n.value}return e(r,s)||n}:e||t}},function(e,t){},function(e,t){},function(e,t,r){\"use strict\";const s=r(0),n=r(2),o=r(10),a={};e.exports=a.merge=function(e,t,r){if(s(e&&\"object\"==typeof e,\"Invalid target value: must be an object\"),s(null==t||\"object\"==typeof t,\"Invalid source value: must be null, undefined, or an object\"),!t)return e;if(r=Object.assign({nullOverride:!0,mergeArrays:!0},r),Array.isArray(t)){s(Array.isArray(e),\"Cannot merge array onto an object\"),r.mergeArrays||(e.length=0);for(let s=0;s<t.length;++s)e.push(n(t[s],{symbols:r.symbols}));return e}const i=o.keys(t,r);for(let s=0;s<i.length;++s){const o=i[s];if(\"__proto__\"===o||!Object.prototype.propertyIsEnumerable.call(t,o))continue;const l=t[o];l&&\"object\"==typeof l?!e[o]||\"object\"!=typeof e[o]||Array.isArray(e[o])!==Array.isArray(l)||l instanceof Date||l instanceof RegExp?e[o]=n(l,{symbols:r.symbols}):a.merge(e[o],l,r):null!=l?e[o]=l:r.nullOverride&&(e[o]=l)}return e}},function(e,t,r){\"use strict\";const s=r(0),n=r(11),o=r(1),a={};e.exports=a.Values=class{constructor(e,t){this._values=new Set(e),this._refs=new Set(t),this._lowercase=a.lowercases(e),this._override=!1}get length(){return this._values.size+this._refs.size}add(e,t){o.isResolvable(e)?this._refs.has(e)||(this._refs.add(e),t&&t.register(e)):this.has(e,null,null,!1)||(this._values.add(e),\"string\"==typeof e&&this._lowercase.set(e.toLowerCase(),e))}static merge(e,t,r){if(e=e||new a.Values,t){if(t._override)return t.clone();for(const r of[...t._values,...t._refs])e.add(r)}if(r)for(const t of[...r._values,...r._refs])e.remove(t);return e.length?e:null}remove(e){o.isResolvable(e)?this._refs.delete(e):(this._values.delete(e),\"string\"==typeof e&&this._lowercase.delete(e.toLowerCase()))}has(e,t,r,s){return!!this.get(e,t,r,s)}get(e,t,r,s){if(!this.length)return!1;if(this._values.has(e))return{value:e};if(\"string\"==typeof e&&e&&s){const t=this._lowercase.get(e.toLowerCase());if(t)return{value:t}}if(!this._refs.size&&\"object\"!=typeof e)return!1;if(\"object\"==typeof e)for(const t of this._values)if(n(t,e))return{value:t};if(t)for(const o of this._refs){const a=o.resolve(e,t,r,null,{in:!0});if(void 0===a)continue;const i=o.in&&\"object\"==typeof a?Array.isArray(a)?a:Object.keys(a):[a];for(const t of i)if(typeof t==typeof e)if(s&&e&&\"string\"==typeof e){if(t.toLowerCase()===e.toLowerCase())return{value:t,ref:o}}else if(n(t,e))return{value:t,ref:o}}return!1}override(){this._override=!0}values(e){if(e&&e.display){const e=[];for(const t of[...this._values,...this._refs])void 0!==t&&e.push(t);return e}return Array.from([...this._values,...this._refs])}clone(){const e=new a.Values(this._values,this._refs);return e._override=this._override,e}concat(e){s(!e._override,\"Cannot concat override set of values\");const t=new a.Values([...this._values,...e._values],[...this._refs,...e._refs]);return t._override=this._override,t}describe(){const e=[];this._override&&e.push({override:!0});for(const t of this._values.values())e.push(t&&\"object\"==typeof t?{value:t}:t);for(const t of this._refs.values())e.push(t.describe());return e}},a.Values.prototype[o.symbols.values]=!0,a.Values.prototype.slice=a.Values.prototype.clone,a.lowercases=function(e){const t=new Map;if(e)for(const r of e)\"string\"==typeof r&&t.set(r.toLowerCase(),r);return t}},function(e,t,r){\"use strict\";const s=r(41),n=r(0),o=r(2),a=r(42),i=r(3),l=r(1),c=r(7),u=r(4),f=r(5),h=r(6),m={renameDefaults:{alias:!1,multiple:!1,override:!1}};e.exports=i.extend({type:\"_keys\",properties:{typeof:\"object\"},flags:{unknown:{default:!1}},terms:{dependencies:{init:null},keys:{init:null,manifest:{mapped:{from:\"schema\",to:\"key\"}}},patterns:{init:null},renames:{init:null}},args:(e,t)=>e.keys(t),validate(e,t){let{schema:r,error:s,state:n,prefs:o}=t;if(!e||typeof e!==r.$_property(\"typeof\")||Array.isArray(e))return{value:e,errors:s(\"object.base\",{type:r.$_property(\"typeof\")})};if(!(r.$_terms.renames||r.$_terms.dependencies||r.$_terms.keys||r.$_terms.patterns||r.$_terms.externals))return;e=m.clone(e,o);const a=[];if(r.$_terms.renames&&!m.rename(r,e,n,o,a))return{value:e,errors:a};if(!r.$_terms.keys&&!r.$_terms.patterns&&!r.$_terms.dependencies)return{value:e,errors:a};const i=new Set(Object.keys(e));if(r.$_terms.keys){const t=[e,...n.ancestors];for(const s of r.$_terms.keys){const r=s.key,l=e[r];i.delete(r);const c=n.localize([...n.path,r],t,s),u=s.schema.$_validate(l,c,o);if(u.errors){if(o.abortEarly)return{value:e,errors:u.errors};a.push(...u.errors)}else\"strip\"===s.schema._flags.result||void 0===u.value&&void 0!==l?delete e[r]:void 0!==u.value&&(e[r]=u.value)}}if(i.size||r._flags._hasPatternMatch){const t=m.unknown(r,e,i,a,n,o);if(t)return t}if(r.$_terms.dependencies)for(const t of r.$_terms.dependencies){if(t.key&&void 0===t.key.resolve(e,n,o,null,{shadow:!1}))continue;const s=m.dependencies[t.rel](r,t,e,n,o);if(s){const t=r.$_createError(s.code,e,s.context,n,o);if(o.abortEarly)return{value:e,errors:t};a.push(t)}}return{value:e,errors:a}},rules:{and:{method(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return l.verifyFlat(t,\"and\"),m.dependency(this,\"and\",null,t)}},append:{method(e){return null==e||0===Object.keys(e).length?this:this.keys(e)}},assert:{method(e,t,r){h.isTemplate(e)||(e=c.ref(e)),n(void 0===r||\"string\"==typeof r,\"Message must be a string\"),t=this.$_compile(t,{appendPath:!0});const s=this.$_addRule({name:\"assert\",args:{subject:e,schema:t,message:r}});return s.$_mutateRegister(e),s.$_mutateRegister(t),s},validate(e,t,r){let{error:s,prefs:n,state:o}=t,{subject:a,schema:i,message:l}=r;const c=a.resolve(e,o,n),u=f.isRef(a)?a.absolute(o):[];return i.$_match(c,o.localize(u,[e,...o.ancestors],i),n)?e:s(\"object.assert\",{subject:a,message:l})},args:[\"subject\",\"schema\",\"message\"],multi:!0},instance:{method(e,t){return n(\"function\"==typeof e,\"constructor must be a function\"),t=t||e.name,this.$_addRule({name:\"instance\",args:{constructor:e,name:t}})},validate(e,t,r){let{constructor:s,name:n}=r;return e instanceof s?e:t.error(\"object.instance\",{type:n,value:e})},args:[\"constructor\",\"name\"]},keys:{method(e){n(void 0===e||\"object\"==typeof e,\"Object schema must be a valid object\"),n(!l.isSchema(e),\"Object schema cannot be a joi schema\");const t=this.clone();if(e)if(Object.keys(e).length){t.$_terms.keys=t.$_terms.keys?t.$_terms.keys.filter(t=>!e.hasOwnProperty(t.key)):[];for(const r in e)l.tryWithPath(()=>t.$_terms.keys.push({key:r,schema:this.$_compile(e[r])}),r)}else t.$_terms.keys=[];else t.$_terms.keys=null;return t.$_mutateRebuild()}},length:{method(e){return this.$_addRule({name:\"length\",args:{limit:e},operator:\"=\"})},validate(e,t,r,s){let{limit:n}=r,{name:o,operator:a,args:i}=s;return l.compare(Object.keys(e).length,n,a)?e:t.error(\"object.\"+o,{limit:i.limit,value:e})},args:[{name:\"limit\",ref:!0,assert:l.limit,message:\"must be a positive integer\"}]},max:{method(e){return this.$_addRule({name:\"max\",method:\"length\",args:{limit:e},operator:\"<=\"})}},min:{method(e){return this.$_addRule({name:\"min\",method:\"length\",args:{limit:e},operator:\">=\"})}},nand:{method(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return l.verifyFlat(t,\"nand\"),m.dependency(this,\"nand\",null,t)}},or:{method(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return l.verifyFlat(t,\"or\"),m.dependency(this,\"or\",null,t)}},oxor:{method(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return m.dependency(this,\"oxor\",null,t)}},pattern:{method(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const s=e instanceof RegExp;s||(e=this.$_compile(e,{appendPath:!0})),n(void 0!==t,\"Invalid rule\"),l.assertOptions(r,[\"fallthrough\",\"matches\"]),s&&n(!e.flags.includes(\"g\")&&!e.flags.includes(\"y\"),\"pattern should not use global or sticky mode\"),t=this.$_compile(t,{appendPath:!0});const o=this.clone();o.$_terms.patterns=o.$_terms.patterns||[];const a={[s?\"regex\":\"schema\"]:e,rule:t};return r.matches&&(a.matches=this.$_compile(r.matches),\"array\"!==a.matches.type&&(a.matches=a.matches.$_root.array().items(a.matches)),o.$_mutateRegister(a.matches),o.$_setFlag(\"_hasPatternMatch\",!0,{clone:!1})),r.fallthrough&&(a.fallthrough=!0),o.$_terms.patterns.push(a),o.$_mutateRegister(t),o}},ref:{method(){return this.$_addRule(\"ref\")},validate:(e,t)=>f.isRef(e)?e:t.error(\"object.refType\",{value:e})},rename:{method(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};n(\"string\"==typeof e||e instanceof RegExp,\"Rename missing the from argument\"),n(\"string\"==typeof t||t instanceof h,\"Invalid rename to argument\"),n(t!==e,\"Cannot rename key to same name:\",e),l.assertOptions(r,[\"alias\",\"ignoreUndefined\",\"override\",\"multiple\"]);const o=this.clone();o.$_terms.renames=o.$_terms.renames||[];for(const t of o.$_terms.renames)n(t.from!==e,\"Cannot rename the same key multiple times\");return t instanceof h&&o.$_mutateRegister(t),o.$_terms.renames.push({from:e,to:t,options:s(m.renameDefaults,r)}),o}},schema:{method(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\"any\";return this.$_addRule({name:\"schema\",args:{type:e}})},validate(e,t,r){let{type:s}=r;return!l.isSchema(e)||\"any\"!==s&&e.type!==s?t.error(\"object.schema\",{type:s}):e}},unknown:{method(e){return this.$_setFlag(\"unknown\",!1!==e)}},with:{method(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return m.dependency(this,\"with\",e,t,r)}},without:{method(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return m.dependency(this,\"without\",e,t,r)}},xor:{method(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return l.verifyFlat(t,\"xor\"),m.dependency(this,\"xor\",null,t)}}},overrides:{default(e,t){return void 0===e&&(e=l.symbols.deepDefault),this.$_super.default(e,t)}},rebuild(e){if(e.$_terms.keys){const t=new a;for(const r of e.$_terms.keys)l.tryWithPath(()=>t.add(r,{after:r.schema.$_rootReferences(),group:r.key}),r.key);e.$_terms.keys=new m.Keys(...t.nodes)}},manifest:{build(e,t){if(t.keys&&(e=e.keys(t.keys)),t.dependencies)for(const r of t.dependencies){const{rel:t,key:s=null,peers:n,options:o}=r;e=m.dependency(e,t,s,n,o)}if(t.patterns)for(const r of t.patterns){const{regex:t,schema:s,rule:n,fallthrough:o,matches:a}=r;e=e.pattern(t||s,n,{fallthrough:o,matches:a})}if(t.renames)for(const r of t.renames){const{from:t,to:s,options:n}=r;e=e.rename(t,s,n)}return e}},messages:{\"object.and\":'\"{{#label}}\" contains {{#presentWithLabels}} without its required peers {{#missingWithLabels}}',\"object.assert\":'\"{{#label}}\" is invalid because {if(#subject.key, `\"` + #subject.key + `\" failed to ` + (#message || \"pass the assertion test\"), #message || \"the assertion failed\")}',\"object.base\":'\"{{#label}}\" must be of type {{#type}}',\"object.instance\":'\"{{#label}}\" must be an instance of \"{{#type}}\"',\"object.length\":'\"{{#label}}\" must have {{#limit}} key{if(#limit == 1, \"\", \"s\")}',\"object.max\":'\"{{#label}}\" must have less than or equal to {{#limit}} key{if(#limit == 1, \"\", \"s\")}',\"object.min\":'\"{{#label}}\" must have at least {{#limit}} key{if(#limit == 1, \"\", \"s\")}',\"object.missing\":'\"{{#label}}\" must contain at least one of {{#peersWithLabels}}',\"object.nand\":'\"{{#mainWithLabel}}\" must not exist simultaneously with {{#peersWithLabels}}',\"object.oxor\":'\"{{#label}}\" contains a conflict between optional exclusive peers {{#peersWithLabels}}',\"object.pattern.match\":'\"{{#label}}\" keys failed to match pattern requirements',\"object.refType\":'\"{{#label}}\" must be a Joi reference',\"object.rename.multiple\":'\"{{#label}}\" cannot rename \"{{#from}}\" because multiple renames are disabled and another key was already renamed to \"{{#to}}\"',\"object.rename.override\":'\"{{#label}}\" cannot rename \"{{#from}}\" because override is disabled and target \"{{#to}}\" exists',\"object.schema\":'\"{{#label}}\" must be a Joi schema of {{#type}} type',\"object.unknown\":'\"{{#label}}\" is not allowed',\"object.with\":'\"{{#mainWithLabel}}\" missing required peer \"{{#peerWithLabel}}\"',\"object.without\":'\"{{#mainWithLabel}}\" conflict with forbidden peer \"{{#peerWithLabel}}\"',\"object.xor\":'\"{{#label}}\" contains a conflict between exclusive peers {{#peersWithLabels}}'}}),m.clone=function(e,t){if(\"object\"==typeof e){if(t.nonEnumerables)return o(e,{shallow:!0});const r=Object.create(Object.getPrototypeOf(e));return Object.assign(r,e),r}const r=function(){for(var t=arguments.length,r=new Array(t),s=0;s<t;s++)r[s]=arguments[s];return e.apply(this,r)};return r.prototype=o(e.prototype),Object.defineProperty(r,\"name\",{value:e.name,writable:!1}),Object.defineProperty(r,\"length\",{value:e.length,writable:!1}),Object.assign(r,e),r},m.dependency=function(e,t,r,s,o){n(null===r||\"string\"==typeof r,t,\"key must be a strings\"),o||(o=s.length>1&&\"object\"==typeof s[s.length-1]?s.pop():{}),l.assertOptions(o,[\"separator\"]),s=[].concat(s);const a=l.default(o.separator,\".\"),i=[];for(const e of s)n(\"string\"==typeof e,t,\"peers must be a string or a reference\"),i.push(c.ref(e,{separator:a,ancestor:0,prefix:!1}));null!==r&&(r=c.ref(r,{separator:a,ancestor:0,prefix:!1}));const u=e.clone();return u.$_terms.dependencies=u.$_terms.dependencies||[],u.$_terms.dependencies.push(new m.Dependency(t,r,i,s)),u},m.dependencies={and(e,t,r,s,n){const o=[],a=[],i=t.peers.length;for(const e of t.peers)void 0===e.resolve(r,s,n,null,{shadow:!1})?o.push(e.key):a.push(e.key);if(o.length!==i&&a.length!==i)return{code:\"object.and\",context:{present:a,presentWithLabels:m.keysToLabels(e,a),missing:o,missingWithLabels:m.keysToLabels(e,o)}}},nand(e,t,r,s,n){const o=[];for(const e of t.peers)void 0!==e.resolve(r,s,n,null,{shadow:!1})&&o.push(e.key);if(o.length!==t.peers.length)return;const a=t.paths[0],i=t.paths.slice(1);return{code:\"object.nand\",context:{main:a,mainWithLabel:m.keysToLabels(e,a),peers:i,peersWithLabels:m.keysToLabels(e,i)}}},or(e,t,r,s,n){for(const e of t.peers)if(void 0!==e.resolve(r,s,n,null,{shadow:!1}))return;return{code:\"object.missing\",context:{peers:t.paths,peersWithLabels:m.keysToLabels(e,t.paths)}}},oxor(e,t,r,s,n){const o=[];for(const e of t.peers)void 0!==e.resolve(r,s,n,null,{shadow:!1})&&o.push(e.key);if(!o.length||1===o.length)return;const a={peers:t.paths,peersWithLabels:m.keysToLabels(e,t.paths)};return a.present=o,a.presentWithLabels=m.keysToLabels(e,o),{code:\"object.oxor\",context:a}},with(e,t,r,s,n){for(const o of t.peers)if(void 0===o.resolve(r,s,n,null,{shadow:!1}))return{code:\"object.with\",context:{main:t.key.key,mainWithLabel:m.keysToLabels(e,t.key.key),peer:o.key,peerWithLabel:m.keysToLabels(e,o.key)}}},without(e,t,r,s,n){for(const o of t.peers)if(void 0!==o.resolve(r,s,n,null,{shadow:!1}))return{code:\"object.without\",context:{main:t.key.key,mainWithLabel:m.keysToLabels(e,t.key.key),peer:o.key,peerWithLabel:m.keysToLabels(e,o.key)}}},xor(e,t,r,s,n){const o=[];for(const e of t.peers)void 0!==e.resolve(r,s,n,null,{shadow:!1})&&o.push(e.key);if(1===o.length)return;const a={peers:t.paths,peersWithLabels:m.keysToLabels(e,t.paths)};return 0===o.length?{code:\"object.missing\",context:a}:(a.present=o,a.presentWithLabels=m.keysToLabels(e,o),{code:\"object.xor\",context:a})}},m.keysToLabels=function(e,t){return Array.isArray(t)?t.map(t=>e.$_mapLabels(t)):e.$_mapLabels(t)},m.rename=function(e,t,r,s,n){const o={};for(const a of e.$_terms.renames){const i=[],l=\"string\"!=typeof a.from;if(l)for(const e in t){if(void 0===t[e]&&a.options.ignoreUndefined)continue;if(e===a.to)continue;const r=a.from.exec(e);r&&i.push({from:e,to:a.to,match:r})}else!Object.prototype.hasOwnProperty.call(t,a.from)||void 0===t[a.from]&&a.options.ignoreUndefined||i.push(a);for(const c of i){const i=c.from;let u=c.to;if(u instanceof h&&(u=u.render(t,r,s,c.match)),i!==u){if(!a.options.multiple&&o[u]&&(n.push(e.$_createError(\"object.rename.multiple\",t,{from:i,to:u,pattern:l},r,s)),s.abortEarly))return!1;if(Object.prototype.hasOwnProperty.call(t,u)&&!a.options.override&&!o[u]&&(n.push(e.$_createError(\"object.rename.override\",t,{from:i,to:u,pattern:l},r,s)),s.abortEarly))return!1;void 0===t[i]?delete t[u]:t[u]=t[i],o[u]=!0,a.options.alias||delete t[i]}}}return!0},m.unknown=function(e,t,r,s,n,o){if(e.$_terms.patterns){let a=!1;const i=e.$_terms.patterns.map(e=>{if(e.matches)return a=!0,[]}),l=[t,...n.ancestors];for(const a of r){const c=t[a],u=[...n.path,a];for(let f=0;f<e.$_terms.patterns.length;++f){const h=e.$_terms.patterns[f];if(h.regex){const e=h.regex.test(a);if(n.mainstay.tracer.debug(n,\"rule\",\"pattern.\".concat(f),e?\"pass\":\"error\"),!e)continue}else if(!h.schema.$_match(a,n.nest(h.schema,\"pattern.\".concat(f)),o))continue;r.delete(a);const m=n.localize(u,l,{schema:h.rule,key:a}),d=h.rule.$_validate(c,m,o);if(d.errors){if(o.abortEarly)return{value:t,errors:d.errors};s.push(...d.errors)}if(h.matches&&i[f].push(a),t[a]=d.value,!h.fallthrough)break}}if(a)for(let r=0;r<i.length;++r){const a=i[r];if(!a)continue;const c=e.$_terms.patterns[r].matches,f=n.localize(n.path,l,c),h=c.$_validate(a,f,o);if(h.errors){const r=u.details(h.errors,{override:!1});r.matches=a;const i=e.$_createError(\"object.pattern.match\",t,r,n,o);if(o.abortEarly)return{value:t,errors:i};s.push(i)}}}if(!r.size||!e.$_terms.keys&&!e.$_terms.patterns)return;if(o.stripUnknown&&!e._flags.unknown||o.skipFunctions){const e=!!o.stripUnknown&&(!0===o.stripUnknown||!!o.stripUnknown.objects);for(const s of r)e?(delete t[s],r.delete(s)):\"function\"==typeof t[s]&&r.delete(s)}if(!l.default(e._flags.unknown,o.allowUnknown))for(const a of r){const r=n.localize([...n.path,a],[]),i=e.$_createError(\"object.unknown\",t[a],{child:a},r,o,{flags:!1});if(o.abortEarly)return{value:t,errors:i};s.push(i)}},m.Dependency=class{constructor(e,t,r,s){this.rel=e,this.key=t,this.peers=r,this.paths=s}describe(){const e={rel:this.rel,peers:this.paths};return null!==this.key&&(e.key=this.key.key),\".\"!==this.peers[0].separator&&(e.options={separator:this.peers[0].separator}),e}},m.Keys=class extends Array{concat(e){const t=this.slice(),r=new Map;for(let e=0;e<t.length;++e)r.set(t[e].key,e);for(const s of e){const e=s.key,n=r.get(e);void 0!==n?t[n]={key:e,schema:t[n].schema.concat(s.schema)}:t.push(s)}return t}}},function(e,t,r){\"use strict\";const s={minDomainSegments:2,nonAsciiRx:/[^\\x00-\\x7f]/,domainControlRx:/[\\x00-\\x20@\\:\\/]/,tldSegmentRx:/^[a-zA-Z](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?$/,domainSegmentRx:/^[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?$/,URL:r(24).URL||URL};t.analyze=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(\"string\"!=typeof e)throw new Error(\"Invalid input: domain must be a string\");if(!e)return{error:\"Domain must be a non-empty string\"};if(e.length>256)return{error:\"Domain too long\"};const r=!s.nonAsciiRx.test(e);if(!r){if(!1===t.allowUnicode)return{error:\"Domain contains forbidden Unicode characters\"};e=e.normalize(\"NFC\")}if(s.domainControlRx.test(e))return{error:\"Domain contains invalid character\"};e=s.punycode(e);const n=t.minDomainSegments||s.minDomainSegments,o=e.split(\".\");if(o.length<n)return{error:\"Domain lacks the minimum required number of segments\"};const a=t.tlds;if(a){const e=o[o.length-1].toLowerCase();if(a.deny&&a.deny.has(e)||a.allow&&!a.allow.has(e))return{error:\"Domain uses forbidden TLD\"}}for(let e=0;e<o.length;++e){const t=o[e];if(!t.length)return{error:\"Domain contains empty dot-separated segment\"};if(t.length>63)return{error:\"Domain contains dot-separated segment that is too long\"};if(e<o.length-1){if(!s.domainSegmentRx.test(t))return{error:\"Domain contains invalid character\"}}else if(!s.tldSegmentRx.test(t))return{error:\"Domain contains invalid tld character\"}}},t.isValid=function(e,r){return!t.analyze(e,r)},s.punycode=function(e){try{return new s.URL(\"http://\".concat(e)).host}catch(t){return e}}},function(e,t){},function(e,t,r){\"use strict\";e.exports=function(e){return e.replace(/[\\^\\$\\.\\*\\+\\-\\?\\=\\!\\:\\|\\\\\\/\\(\\)\\[\\]\\{\\}\\,]/g,\"\\\\$&\")}},function(e,t,r){\"use strict\";const s=r(0),n=r(25),o={generate:function(){const e={},t=\"!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=\",r=\"\\\\w-\\\\.~%\\\\dA-Fa-f\"+t+\":@\",s=\"[\"+r+\"]\",n=\"(?:0{0,2}\\\\d|0?[1-9]\\\\d|1\\\\d\\\\d|2[0-4]\\\\d|25[0-5])\";e.ipv4address=\"(?:\"+n+\"\\\\.){3}\"+n;const o=\"[\\\\dA-Fa-f]{1,4}\",a=\"(?:\"+o+\":\"+o+\"|\"+e.ipv4address+\")\",i=\"(?:\"+o+\":){6}\"+a,l=\"::(?:\"+o+\":){5}\"+a,c=\"(?:\"+o+\")?::(?:\"+o+\":){4}\"+a,u=\"(?:(?:\"+o+\":){0,1}\"+o+\")?::(?:\"+o+\":){3}\"+a,f=\"(?:(?:\"+o+\":){0,2}\"+o+\")?::(?:\"+o+\":){2}\"+a,h=\"(?:(?:\"+o+\":){0,3}\"+o+\")?::\"+o+\":\"+a,m=\"(?:(?:\"+o+\":){0,4}\"+o+\")?::\"+a;e.ipv4Cidr=\"\\\\d|[1-2]\\\\d|3[0-2]\",e.ipv6Cidr=\"(?:0{0,2}\\\\d|0?[1-9]\\\\d|1[01]\\\\d|12[0-8])\",e.ipv6address=\"(?:\"+i+\"|\"+l+\"|\"+c+\"|\"+u+\"|\"+f+\"|\"+h+\"|\"+m+\"|(?:(?:[\\\\dA-Fa-f]{1,4}:){0,5}[\\\\dA-Fa-f]{1,4})?::[\\\\dA-Fa-f]{1,4}|(?:(?:[\\\\dA-Fa-f]{1,4}:){0,6}[\\\\dA-Fa-f]{1,4})?::)\",e.ipvFuture=\"v[\\\\dA-Fa-f]+\\\\.[\\\\w-\\\\.~\"+t+\":]+\",e.scheme=\"[a-zA-Z][a-zA-Z\\\\d+-\\\\.]*\",e.schemeRegex=new RegExp(e.scheme);const d=\"[\\\\w-\\\\.~%\\\\dA-Fa-f\"+t+\":]*\",p=\"(?:\"+(\"\\\\[(?:\"+e.ipv6address+\"|\"+e.ipvFuture+\")\\\\]\")+\"|\"+e.ipv4address+\"|[\\\\w-\\\\.~%\\\\dA-Fa-f!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=]{1,255})\",g=\"(?:\"+d+\"@)?\"+p+\"(?::\\\\d*)?\",y=\"(?:\"+d+\"@)?(\"+p+\")(?::\\\\d*)?\",b=s+\"*\",v=s+\"+\",_=\"(?:\\\\/\"+b+\")*\",w=\"\\\\/(?:\"+v+_+\")?\",$=v+_;return e.hierPart=\"(?:(?:\\\\/\\\\/\"+g+_+\")|\"+w+\"|\"+$+\"|(?:\\\\/\\\\/\\\\/[\\\\w-\\\\.~%\\\\dA-Fa-f!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=:@]*(?:\\\\/[\\\\w-\\\\.~%\\\\dA-Fa-f!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=:@]*)*))\",e.hierPartCapture=\"(?:(?:\\\\/\\\\/\"+y+_+\")|\"+w+\"|\"+$+\")\",e.relativeRef=\"(?:(?:\\\\/\\\\/\"+g+_+\")|\"+w+\"|[\\\\w-\\\\.~%\\\\dA-Fa-f!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=@]+(?:\\\\/[\\\\w-\\\\.~%\\\\dA-Fa-f!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=:@]*)*|)\",e.query=\"[\"+r+\"\\\\/\\\\?]*(?=#|$)\",e.queryWithSquareBrackets=\"[\"+r+\"\\\\[\\\\]\\\\/\\\\?]*(?=#|$)\",e.fragment=\"[\"+r+\"\\\\/\\\\?]*\",e}};e.exports=t=o.rfc3986=o.generate(),o.createRegex=function(e){const t=o.rfc3986,r=\"(?:\\\\?\"+(e.allowQuerySquareBrackets?t.queryWithSquareBrackets:t.query)+\")?(?:#\"+t.fragment+\")?$\";if(e.relativeOnly)return new RegExp(\"^\"+t.relativeRef+r);let a=\"\";if(e.scheme){s(e.scheme instanceof RegExp||\"string\"==typeof e.scheme||Array.isArray(e.scheme),\"scheme must be a RegExp, String, or Array\");const r=[].concat(e.scheme);s(r.length>=1,\"scheme must have at least 1 scheme specified\");const o=[];for(let e=0;e<r.length;++e){const a=r[e];s(a instanceof RegExp||\"string\"==typeof a,\"scheme at position \"+e+\" must be a RegExp or String\"),a instanceof RegExp?o.push(a.source.toString()):(s(t.schemeRegex.test(a),\"scheme at position \"+e+\" must be a valid scheme\"),o.push(n(a)))}a=o.join(\"|\")}const i=\"(?:\"+(a?\"(?:\"+a+\")\":t.scheme)+\":\"+(e.domain?t.hierPartCapture:t.hierPart)+\")\",l=e.allowRelative?\"(?:\"+i+\"|\"+t.relativeRef+\")\":i,c=new RegExp(\"^\"+l+r);return c.scheme=a,c},o.uriRegex=o.createRegex({}),t.createRegex=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return e.scheme||e.allowRelative||e.relativeOnly||e.allowQuerySquareBrackets||e.domain?o.createRegex(e):o.uriRegex}},function(e,t,r){\"use strict\";e.exports=function(){try{for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return JSON.stringify.apply(null,t)}catch(e){return\"[Cannot display object: \"+e.message+\"]\"}}},function(e){e.exports=JSON.parse('{\"version\":\"16.1.8\"}')},function(e,t,r){\"use strict\";const s={};e.exports=function(e){if(!e)return\"\";let t=\"\";for(let r=0;r<e.length;++r){const n=e.charCodeAt(r);s.isSafe(n)?t+=e[r]:t+=s.escapeHtmlChar(n)}return t},s.escapeHtmlChar=function(e){const t=s.namedHtml[e];if(void 0!==t)return t;if(e>=256)return\"&#\"+e+\";\";const r=e.toString(16).padStart(2,\"0\");return\"&#x\".concat(r,\";\")},s.isSafe=function(e){return void 0!==s.safeCharCodes[e]},s.namedHtml={38:\"&amp;\",60:\"&lt;\",62:\"&gt;\",34:\"&quot;\",160:\"&nbsp;\",162:\"&cent;\",163:\"&pound;\",164:\"&curren;\",169:\"&copy;\",174:\"&reg;\"},s.safeCharCodes=function(){const e={};for(let t=32;t<123;++t)(t>=97||t>=65&&t<=90||t>=48&&t<=57||32===t||46===t||44===t||45===t||58===t||95===t)&&(e[t]=null);return e}()},function(e,t,r){\"use strict\";const s={operators:[\"!\",\"^\",\"*\",\"/\",\"%\",\"+\",\"-\",\"<\",\"<=\",\">\",\">=\",\"==\",\"!=\",\"&&\",\"||\",\"??\"],operatorCharacters:[\"!\",\"^\",\"*\",\"/\",\"%\",\"+\",\"-\",\"<\",\"=\",\">\",\"&\",\"|\",\"?\"],operatorsOrder:[[\"^\"],[\"*\",\"/\",\"%\"],[\"+\",\"-\"],[\"<\",\"<=\",\">\",\">=\"],[\"==\",\"!=\"],[\"&&\"],[\"||\",\"??\"]],operatorsPrefix:[\"!\",\"n\"],literals:{'\"':'\"',\"`\":\"`\",\"'\":\"'\",\"[\":\"]\"},numberRx:/^(?:[0-9]*\\.?[0-9]*){1}$/,tokenRx:/^[\\w\\$\\#\\.\\@\\:\\{\\}]+$/,symbol:Symbol(\"formula\"),settings:Symbol(\"settings\")};e.exports=s.Formula=class{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!t[s.settings]&&t.constants)for(const e in t.constants){const r=t.constants[e];if(null!==r&&![\"boolean\",\"number\",\"string\"].includes(typeof r))throw new Error(\"Formula constant \".concat(e,\" contains invalid \").concat(typeof r,\" value type\"))}this.settings=t[s.settings]?t:Object.assign({[s.settings]:!0,constants:{},functions:{}},t),this.single=null,this._parts=null,this._parse(e)}_parse(e){let t=[],r=\"\",n=0,o=!1;const a=e=>{if(n)throw new Error(\"Formula missing closing parenthesis\");const a=t.length?t[t.length-1]:null;if(o||r||e){if(a&&\"reference\"===a.type&&\")\"===e)return a.type=\"function\",a.value=this._subFormula(r,a.value),void(r=\"\");if(\")\"===e){const e=new s.Formula(r,this.settings);t.push({type:\"segment\",value:e})}else if(o){if(\"]\"===o)return t.push({type:\"reference\",value:r}),void(r=\"\");t.push({type:\"literal\",value:r})}else if(s.operatorCharacters.includes(r))a&&\"operator\"===a.type&&s.operators.includes(a.value+r)?a.value+=r:t.push({type:\"operator\",value:r});else if(r.match(s.numberRx))t.push({type:\"constant\",value:parseFloat(r)});else if(void 0!==this.settings.constants[r])t.push({type:\"constant\",value:this.settings.constants[r]});else{if(!r.match(s.tokenRx))throw new Error(\"Formula contains invalid token: \".concat(r));t.push({type:\"reference\",value:r})}r=\"\"}};for(const t of e)o?t===o?(a(),o=!1):r+=t:n?\"(\"===t?(r+=t,++n):\")\"===t?--n?r+=t:a(t):r+=t:t in s.literals?o=s.literals[t]:\"(\"===t?(a(),++n):s.operatorCharacters.includes(t)?(a(),r=t,a()):\" \"!==t?r+=t:a();a(),t=t.map((e,r)=>\"operator\"!==e.type||\"-\"!==e.value||r&&\"operator\"!==t[r-1].type?e:{type:\"operator\",value:\"n\"});let i=!1;for(const e of t){if(\"operator\"===e.type){if(s.operatorsPrefix.includes(e.value))continue;if(!i)throw new Error(\"Formula contains an operator in invalid position\");if(!s.operators.includes(e.value))throw new Error(\"Formula contains an unknown operator \".concat(e.value))}else if(i)throw new Error(\"Formula missing expected operator\");i=!i}if(!i)throw new Error(\"Formula contains invalid trailing operator\");1===t.length&&[\"reference\",\"literal\",\"constant\"].includes(t[0].type)&&(this.single={type:\"reference\"===t[0].type?\"reference\":\"value\",value:t[0].value}),this._parts=t.map(e=>{if(\"operator\"===e.type)return s.operatorsPrefix.includes(e.value)?e:e.value;if(\"reference\"!==e.type)return e.value;if(this.settings.tokenRx&&!this.settings.tokenRx.test(e.value))throw new Error(\"Formula contains invalid reference \".concat(e.value));return this.settings.reference?this.settings.reference(e.value):s.reference(e.value)})}_subFormula(e,t){const r=this.settings.functions[t];if(\"function\"!=typeof r)throw new Error(\"Formula contains unknown function \".concat(t));let n=[];if(e){let r=\"\",o=0,a=!1;const i=()=>{if(!r)throw new Error(\"Formula contains function \".concat(t,\" with invalid arguments \").concat(e));n.push(r),r=\"\"};for(let t=0;t<e.length;++t){const n=e[t];a?(r+=n,n===a&&(a=!1)):n in s.literals&&!o?(r+=n,a=s.literals[n]):\",\"!==n||o?(r+=n,\"(\"===n?++o:\")\"===n&&--o):i()}i()}return n=n.map(e=>new s.Formula(e,this.settings)),function(e){const t=[];for(const r of n)t.push(r.evaluate(e));return r.call(e,...t)}}evaluate(e){const t=this._parts.slice();for(let r=t.length-2;r>=0;--r){const n=t[r];if(n&&\"operator\"===n.type){const o=t[r+1];t.splice(r+1,1);const a=s.evaluate(o,e);t[r]=s.single(n.value,a)}}return s.operatorsOrder.forEach(r=>{for(let n=1;n<t.length-1;)if(r.includes(t[n])){const r=t[n],o=s.evaluate(t[n-1],e),a=s.evaluate(t[n+1],e);t.splice(n,2);const i=s.calculate(r,o,a);t[n-1]=0===i?0:i}else n+=2}),s.evaluate(t[0],e)}},s.Formula.prototype[s.symbol]=!0,s.reference=function(e){return function(t){return t&&void 0!==t[e]?t[e]:null}},s.evaluate=function(e,t){return null===e?null:\"function\"==typeof e?e(t):e[s.symbol]?e.evaluate(t):e},s.single=function(e,t){if(\"!\"===e)return!t;const r=-t;return 0===r?0:r},s.calculate=function(e,t,r){if(\"??\"===e)return s.exists(t)?t:r;if(\"string\"==typeof t||\"string\"==typeof r){if(\"+\"===e)return(t=s.exists(t)?t:\"\")+(r=s.exists(r)?r:\"\")}else switch(e){case\"^\":return Math.pow(t,r);case\"*\":return t*r;case\"/\":return t/r;case\"%\":return t%r;case\"+\":return t+r;case\"-\":return t-r}switch(e){case\"<\":return t<r;case\"<=\":return t<=r;case\">\":return t>r;case\">=\":return t>=r;case\"==\":return t===r;case\"!=\":return t!==r;case\"&&\":return t&&r;case\"||\":return t||r}return null},s.exists=function(e){return null!=e}},function(e,t,r){\"use strict\";const s=r(0),n=r(3),o=r(1),a=r(7),i=r(4),l=r(5),c={};e.exports=n.extend({type:\"alternatives\",flags:{match:{default:\"any\"}},terms:{matches:{init:[],register:l.toSibling}},args(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),s=1;s<t;s++)r[s-1]=arguments[s];return 1===r.length&&Array.isArray(r[0])?e.try(...r[0]):e.try(...r)},validate(e,t){const{schema:r,error:s,state:n,prefs:o}=t;if(r._flags.match){let t,a=0;for(let s=0;s<r.$_terms.matches.length;++s){const i=r.$_terms.matches[s],l=n.nest(i.schema,\"match.\".concat(s));l.snapshot();const c=i.schema.$_validate(e,l,o);c.errors?l.restore():(++a,t=c.value)}return a?\"one\"===r._flags.match?1===a?{value:t}:{errors:s(\"alternatives.one\")}:a===r.$_terms.matches.length?{value:e}:{errors:s(\"alternatives.all\")}:{errors:s(\"alternatives.any\")}}const a=[];for(let t=0;t<r.$_terms.matches.length;++t){const s=r.$_terms.matches[t];if(s.schema){const r=n.nest(s.schema,\"match.\".concat(t));r.snapshot();const i=s.schema.$_validate(e,r,o);if(!i.errors)return i;r.restore(),a.push({schema:s.schema,reports:i.errors});continue}const i=s.ref?s.ref.resolve(e,n,o):e,l=s.is?[s]:s.switch;for(let r=0;r<l.length;++r){const a=l[r],{is:c,then:u,otherwise:f}=a,h=\"match.\".concat(t).concat(s.switch?\".\"+r:\"\");if(c.$_match(i,n.nest(c,\"\".concat(h,\".is\")),o)){if(u)return u.$_validate(e,n.nest(u,\"\".concat(h,\".then\")),o)}else if(f)return f.$_validate(e,n.nest(f,\"\".concat(h,\".otherwise\")),o)}}return c.errors(a,t)},rules:{conditional:{method(e,t){s(!this._flags._endedSwitch,\"Unreachable condition\"),s(!this._flags.match,\"Cannot combine match mode\",this._flags.match,\"with conditional rule\"),s(void 0===t.break,\"Cannot use break option with alternatives conditional\");const r=this.clone(),n=a.when(r,e,t),o=n.is?[n]:n.switch;for(const e of o)if(e.then&&e.otherwise){r.$_setFlag(\"_endedSwitch\",!0,{clone:!1});break}return r.$_terms.matches.push(n),r.$_mutateRebuild()}},match:{method(e){if(s([\"any\",\"one\",\"all\"].includes(e),\"Invalid alternatives match mode\",e),\"any\"!==e)for(const t of this.$_terms.matches)s(t.schema,\"Cannot combine match mode\",e,\"with conditional rules\");return this.$_setFlag(\"match\",e)}},try:{method(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];s(t.length,\"Missing alternative schemas\"),o.verifyFlat(t,\"try\"),s(!this._flags._endedSwitch,\"Unreachable condition\");const n=this.clone();for(const e of t)n.$_terms.matches.push({schema:n.$_compile(e)});return n.$_mutateRebuild()}}},overrides:{label(e){return this.$_super.label(e).$_modify({each:(t,r)=>\"is\"!==r.path[0]?t.label(e):void 0,ref:!1})}},rebuild(e){e.$_modify({each:t=>{o.isSchema(t)&&\"array\"===t.type&&e.$_setFlag(\"_arrayItems\",!0,{clone:!1})}})},manifest:{build(e,t){if(t.matches)for(const r of t.matches){const{schema:t,ref:s,is:n,not:o,then:a,otherwise:i}=r;e=t?e.try(t):s?e.conditional(s,{is:n,then:a,not:o,otherwise:i,switch:r.switch}):e.conditional(n,{then:a,otherwise:i})}return e}},messages:{\"alternatives.all\":'\"{{#label}}\" does not match all of the required types',\"alternatives.any\":'\"{{#label}}\" does not match any of the allowed types',\"alternatives.match\":'\"{{#label}}\" does not match any of the allowed types',\"alternatives.one\":'\"{{#label}}\" matches more than one allowed type',\"alternatives.types\":'\"{{#label}}\" must be one of {{#types}}'}}),c.errors=function(e,t){let{error:r,state:s}=t;if(!e.length)return{errors:r(\"alternatives.any\")};if(1===e.length)return{errors:e[0].reports};const n=new Set,o=[];for(const t of e){const{reports:a,schema:l}=t;if(a.length>1)return c.unmatched(e,r);const u=a[0];if(u instanceof i.Report==!1)return c.unmatched(e,r);if(u.state.path.length!==s.path.length){o.push({type:l.type,report:u});continue}if(\"any.only\"===u.code){for(const e of u.local.valids)n.add(e);continue}const[f,h]=u.code.split(\".\");\"base\"===h?n.add(f):o.push({type:l.type,report:u})}return o.length?1===o.length?{errors:o[0].report}:c.unmatched(e,r):{errors:r(\"alternatives.types\",{types:[...n]})}},c.unmatched=function(e,t){const r=[];for(const t of e)r.push(...t.reports);return{errors:t(\"alternatives.match\",i.details(r,{override:!1}))}}},function(e,t,r){\"use strict\";const s=r(0),n=r(2),o=r(11),a=r(20),i=r(15),l=r(1),c=r(7),u=r(4),f=r(17),h=r(18),m=r(9),d=r(33),p=r(5),g=r(19),y=r(34),b=r(21),v={Base:class{constructor(e){this.type=e,this.$_root=null,this._definition={},this._ids=new d.Ids,this._preferences=null,this._refs=new p.Manager,this._cache=null,this._valids=null,this._invalids=null,this._flags={},this._rules=[],this._singleRules=new Map,this.$_terms={},this.$_temp={ruleset:null,whens:{}}}describe(){return s(\"function\"==typeof h.describe,\"Manifest functionality disabled\"),h.describe(this)}allow(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return l.verifyFlat(t,\"allow\"),this._values(t,\"_valids\")}alter(e){s(e&&\"object\"==typeof e&&!Array.isArray(e),\"Invalid targets argument\"),s(!this._inRuleset(),\"Cannot set alterations inside a ruleset\");const t=this.clone();t.$_terms.alterations=t.$_terms.alterations||[];for(const r in e){const n=e[r];s(\"function\"==typeof n,\"Alteration adjuster for\",r,\"must be a function\"),t.$_terms.alterations.push({target:r,adjuster:n})}return t.$_temp.ruleset=!1,t}cast(e){return s(!1===e||\"string\"==typeof e,\"Invalid to value\"),s(!1===e||this._definition.cast[e],\"Type\",this.type,\"does not support casting to\",e),this.$_setFlag(\"cast\",!1===e?void 0:e)}default(e,t){return this._default(\"default\",e,t)}description(e){return s(e&&\"string\"==typeof e,\"Description must be a non-empty string\"),this.$_setFlag(\"description\",e)}empty(e){const t=this.clone();return void 0!==e&&(e=t.$_compile(e,{override:!1})),t.$_setFlag(\"empty\",e,{clone:!1})}error(e){return s(e,\"Missing error\"),s(e instanceof Error||\"function\"==typeof e,\"Must provide a valid Error object or a function\"),this.$_setFlag(\"error\",e)}example(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return s(void 0!==e,\"Missing example\"),l.assertOptions(t,[\"override\"]),this._inner(\"examples\",e,{single:!0,override:t.override})}external(e,t){return\"object\"==typeof e&&(s(!t,\"Cannot combine options with description\"),t=e.description,e=e.method),s(\"function\"==typeof e,\"Method must be a function\"),s(void 0===t||t&&\"string\"==typeof t,\"Description must be a non-empty string\"),this._inner(\"externals\",{method:e,description:t},{single:!0})}failover(e,t){return this._default(\"failover\",e,t)}forbidden(){return this.presence(\"forbidden\")}id(e){return e?(s(\"string\"==typeof e,\"id must be a non-empty string\"),s(/^[^\\.]+$/.test(e),\"id cannot contain period character\"),this.$_setFlag(\"id\",e)):this.$_setFlag(\"id\",void 0)}invalid(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return this._values(t,\"_invalids\")}label(e){return s(e&&\"string\"==typeof e,\"Label name must be a non-empty string\"),this.$_setFlag(\"label\",e)}meta(e){return s(void 0!==e,\"Meta cannot be undefined\"),this._inner(\"metas\",e,{single:!0})}note(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];s(t.length,\"Missing notes\");for(const e of t)s(e&&\"string\"==typeof e,\"Notes must be non-empty strings\");return this._inner(\"notes\",t)}only(){let e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return s(\"boolean\"==typeof e,\"Invalid mode:\",e),this.$_setFlag(\"only\",e)}optional(){return this.presence(\"optional\")}prefs(e){s(e,\"Missing preferences\"),s(void 0===e.context,\"Cannot override context\"),s(void 0===e.externals,\"Cannot override externals\"),s(void 0===e.warnings,\"Cannot override warnings\"),s(void 0===e.debug,\"Cannot override debug\"),l.checkPreferences(e);const t=this.clone();return t._preferences=l.preferences(t._preferences,e),t}presence(e){return s([\"optional\",\"required\",\"forbidden\"].includes(e),\"Unknown presence mode\",e),this.$_setFlag(\"presence\",e)}raw(){let e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return this.$_setFlag(\"result\",e?\"raw\":void 0)}result(e){return s([\"raw\",\"strip\"].includes(e),\"Unknown result mode\",e),this.$_setFlag(\"result\",e)}required(){return this.presence(\"required\")}strict(e){const t=this.clone(),r=void 0!==e&&!e;return t._preferences=l.preferences(t._preferences,{convert:r}),t}strip(){let e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return this.$_setFlag(\"result\",e?\"strip\":void 0)}tag(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];s(t.length,\"Missing tags\");for(const e of t)s(e&&\"string\"==typeof e,\"Tags must be non-empty strings\");return this._inner(\"tags\",t)}unit(e){return s(e&&\"string\"==typeof e,\"Unit name must be a non-empty string\"),this.$_setFlag(\"unit\",e)}valid(){const e=this.allow(...arguments);return e.$_setFlag(\"only\",!!e._valids,{clone:!1}),e}when(e,t){const r=this.clone();r.$_terms.whens||(r.$_terms.whens=[]);const n=c.when(r,e,t);if(![\"any\",\"link\"].includes(r.type)){const e=n.is?[n]:n.switch;for(const t of e)s(!t.then||\"any\"===t.then.type||t.then.type===r.type,\"Cannot combine\",r.type,\"with\",t.then&&t.then.type),s(!t.otherwise||\"any\"===t.otherwise.type||t.otherwise.type===r.type,\"Cannot combine\",r.type,\"with\",t.otherwise&&t.otherwise.type)}return r.$_terms.whens.push(n),r.$_mutateRebuild()}cache(e){s(!this._inRuleset(),\"Cannot set caching inside a ruleset\"),s(!this._cache,\"Cannot override schema cache\");const t=this.clone();return t._cache=e||i.provider.provision(),t.$_temp.ruleset=!1,t}clone(){const e=Object.create(Object.getPrototypeOf(this));return this._assign(e)}concat(e){s(l.isSchema(e),\"Invalid schema object\"),s(\"any\"===this.type||\"any\"===e.type||e.type===this.type,\"Cannot merge type\",this.type,\"with another type:\",e.type),s(!this._inRuleset(),\"Cannot concatenate onto a schema with open ruleset\"),s(!e._inRuleset(),\"Cannot concatenate a schema with open ruleset\");let t=this.clone();if(\"any\"===this.type&&\"any\"!==e.type){const r=e.clone();for(const e of Object.keys(t))\"type\"!==e&&(r[e]=t[e]);t=r}t._ids.concat(e._ids),t._refs.register(e,p.toSibling),t._preferences=t._preferences?l.preferences(t._preferences,e._preferences):e._preferences,t._valids=b.merge(t._valids,e._valids,e._invalids),t._invalids=b.merge(t._invalids,e._invalids,e._valids);for(const r of e._singleRules.keys())t._singleRules.has(r)&&(t._rules=t._rules.filter(e=>e.keep||e.name!==r),t._singleRules.delete(r));for(const r of e._rules)e._definition.rules[r.method].multi||t._singleRules.set(r.name,r),t._rules.push(r);if(t._flags.empty&&e._flags.empty){t._flags.empty=t._flags.empty.concat(e._flags.empty);const r=Object.assign({},e._flags);delete r.empty,a(t._flags,r)}else if(e._flags.empty){t._flags.empty=e._flags.empty;const r=Object.assign({},e._flags);delete r.empty,a(t._flags,r)}else a(t._flags,e._flags);for(const r in e.$_terms){const s=e.$_terms[r];s?t.$_terms[r]?t.$_terms[r]=t.$_terms[r].concat(s):t.$_terms[r]=s.slice():t.$_terms[r]||(t.$_terms[r]=s)}return this.$_root._tracer&&this.$_root._tracer._combine(t,[this,e]),t.$_mutateRebuild()}extend(e){return s(!e.base,\"Cannot extend type with another base\"),f.type(this,e)}extract(e){return e=Array.isArray(e)?e:e.split(\".\"),this._ids.reach(e)}fork(e,t){s(!this._inRuleset(),\"Cannot fork inside a ruleset\");let r=this;for(let s of[].concat(e))s=Array.isArray(s)?s:s.split(\".\"),r=r._ids.fork(s,t,r);return r.$_temp.ruleset=!1,r}rule(e){const t=this._definition;l.assertOptions(e,Object.keys(t.modifiers)),s(!1!==this.$_temp.ruleset,\"Cannot apply rules to empty ruleset or the last rule added does not support rule properties\");const r=null===this.$_temp.ruleset?this._rules.length-1:this.$_temp.ruleset;s(r>=0&&r<this._rules.length,\"Cannot apply rules to empty ruleset\");const o=this.clone();for(let a=r;a<o._rules.length;++a){const r=o._rules[a],i=n(r);for(const n in e)t.modifiers[n](i,e[n]),s(i.name===r.name,\"Cannot change rule name\");o._rules[a]=i,o._singleRules.get(i.name)===r&&o._singleRules.set(i.name,i)}return o.$_temp.ruleset=!1,o.$_mutateRebuild()}get ruleset(){s(!this._inRuleset(),\"Cannot start a new ruleset without closing the previous one\");const e=this.clone();return e.$_temp.ruleset=e._rules.length,e}get $(){return this.ruleset}tailor(e){e=[].concat(e),s(!this._inRuleset(),\"Cannot tailor inside a ruleset\");let t=this;if(this.$_terms.alterations)for(const r of this.$_terms.alterations){const{target:n,adjuster:o}=r;e.includes(n)&&(t=o(t),s(l.isSchema(t),\"Alteration adjuster for\",n,\"failed to return a schema object\"))}return(t=t.$_modify({each:t=>t.tailor(e),ref:!1})).$_temp.ruleset=!1,t.$_mutateRebuild()}tracer(){return g.location?g.location(this):this}validate(e,t){return y.entry(e,this,t)}validateAsync(e,t){return y.entryAsync(e,this,t)}$_addRule(e){\"string\"==typeof e&&(e={name:e}),s(e&&\"object\"==typeof e,\"Invalid options\"),s(e.name&&\"string\"==typeof e.name,\"Invalid rule name\");for(const t in e)s(\"_\"!==t[0],\"Cannot set private rule properties\");const t=Object.assign({},e);t._resolve=[],t.method=t.method||t.name;const r=this._definition.rules[t.method],n=t.args;s(r,\"Unknown rule\",t.method);const o=this.clone();if(n){s(1===Object.keys(n).length||Object.keys(n).length===this._definition.rules[t.name].args.length,\"Invalid rule definition for\",this.type,t.name);for(const e in n){let a=n[e];if(void 0!==a){if(r.argsByName){const i=r.argsByName.get(e);if(i.ref&&l.isResolvable(a))t._resolve.push(e),o.$_mutateRegister(a);else if(i.normalize&&(a=i.normalize(a),n[e]=a),i.assert){const t=l.validateArg(a,e,i);s(!t,t,\"or reference\")}}n[e]=a}else delete n[e]}}return r.multi||(o._ruleRemove(t.name,{clone:!1}),o._singleRules.set(t.name,t)),!1===o.$_temp.ruleset&&(o.$_temp.ruleset=null),r.priority?o._rules.unshift(t):o._rules.push(t),o}$_compile(e,t){return c.schema(this.$_root,e,t)}$_createError(e,t,r,s,n){let o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{};const a=!1!==o.flags?this._flags:{},i=o.messages?m.merge(this._definition.messages,o.messages):this._definition.messages;return new u.Report(e,t,r,a,i,s,n)}$_getFlag(e){return this._flags[e]}$_getRule(e){return this._singleRules.get(e)}$_mapLabels(e){return e=Array.isArray(e)?e:e.split(\".\"),this._ids.labels(e)}$_match(e,t,r,s){(r=Object.assign({},r)).abortEarly=!0,r._externals=!1,t.snapshot();const n=!y.validate(e,this,t,r,s).errors;return t.restore(),n}$_modify(e){return l.assertOptions(e,[\"each\",\"once\",\"ref\",\"schema\"]),d.schema(this,e)||this}$_mutateRebuild(){s(!this._inRuleset(),\"Cannot add this rule inside a ruleset\"),this._refs.reset(),this._ids.reset();return this.$_modify({each:(e,t)=>{let{source:r,name:s,path:n,key:o}=t;const a=this._definition[r][s]&&this._definition[r][s].register;!1!==a&&this.$_mutateRegister(e,{family:a,key:o})}}),this._definition.rebuild&&this._definition.rebuild(this),this.$_temp.ruleset=!1,this}$_mutateRegister(e){let{family:t,key:r}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this._refs.register(e,t),this._ids.register(e,{key:r})}$_property(e){return this._definition.properties[e]}$_reach(e){return this._ids.reach(e)}$_rootReferences(){return this._refs.roots()}$_setFlag(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};s(\"_\"===e[0]||!this._inRuleset(),\"Cannot set flag inside a ruleset\");const n=this._definition.flags[e]||{};if(o(t,n.default)&&(t=void 0),o(t,this._flags[e]))return this;const a=!1!==r.clone?this.clone():this;return void 0!==t?(a._flags[e]=t,a.$_mutateRegister(t)):delete a._flags[e],\"_\"!==e[0]&&(a.$_temp.ruleset=!1),a}$_validate(e,t,r){return y.validate(e,this,t,r)}_assign(e){e.type=this.type,e.$_root=this.$_root,e.$_temp=Object.assign({},this.$_temp),e.$_temp.whens={},e._ids=this._ids.clone(),e._preferences=this._preferences,e._valids=this._valids&&this._valids.clone(),e._invalids=this._invalids&&this._invalids.clone(),e._rules=this._rules.slice(),e._singleRules=n(this._singleRules,{shallow:!0}),e._refs=this._refs.clone(),e._flags=Object.assign({},this._flags),e._cache=null,e.$_terms={};for(const t in this.$_terms)e.$_terms[t]=this.$_terms[t]?this.$_terms[t].slice():null;e.$_super={};for(const t in this.$_super)e.$_super[t]=this._super[t].bind(e);return e}_default(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return l.assertOptions(r,\"literal\"),s(void 0!==t,\"Missing\",e,\"value\"),s(\"function\"==typeof t||!r.literal,\"Only function value supports literal option\"),\"function\"==typeof t&&r.literal&&(t={[l.symbols.literal]:!0,literal:t}),this.$_setFlag(e,t)}_generate(e,t,r){if(!this.$_terms.whens)return{schema:this};const s=[],n=[];for(let o=0;o<this.$_terms.whens.length;++o){const a=this.$_terms.whens[o];if(a.concat){s.push(a.concat),n.push(\"\".concat(o,\".concat\"));continue}const i=a.ref?a.ref.resolve(e,t,r):e,l=a.is?[a]:a.switch,c=n.length;for(let c=0;c<l.length;++c){const{is:u,then:f,otherwise:h}=l[c],m=\"\".concat(o).concat(a.switch?\".\"+c:\"\");if(u.$_match(i,t.nest(u,\"\".concat(m,\".is\")),r)){if(f){const o=t.localize([...t.path,\"\".concat(m,\".then\")],t.ancestors,t.schemas),{schema:a,id:i}=f._generate(e,o,r);s.push(a),n.push(\"\".concat(m,\".then\").concat(i?\"(\".concat(i,\")\"):\"\"));break}}else if(h){const o=t.localize([...t.path,\"\".concat(m,\".otherwise\")],t.ancestors,t.schemas),{schema:a,id:i}=h._generate(e,o,r);s.push(a),n.push(\"\".concat(m,\".otherwise\").concat(i?\"(\".concat(i,\")\"):\"\"));break}}if(a.break&&n.length>c)break}const o=n.join(\", \");if(t.mainstay.tracer.debug(t,\"rule\",\"when\",o),!o)return{schema:this};if(!t.mainstay.tracer.active&&this.$_temp.whens[o])return{schema:this.$_temp.whens[o],id:o};let a=this;this._definition.generate&&(a=this._definition.generate(this,e,t,r));for(const e of s)a=a.concat(e);return this.$_root._tracer&&this.$_root._tracer._combine(a,[this,...s]),this.$_temp.whens[o]=a,{schema:a,id:o}}_inner(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};s(!this._inRuleset(),\"Cannot set \".concat(e,\" inside a ruleset\"));const n=this.clone();return n.$_terms[e]&&!r.override||(n.$_terms[e]=[]),r.single?n.$_terms[e].push(t):n.$_terms[e].push(...t),n.$_temp.ruleset=!1,n}_inRuleset(){return null!==this.$_temp.ruleset&&!1!==this.$_temp.ruleset}_ruleRemove(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!this._singleRules.has(e))return this;const r=!1!==t.clone?this.clone():this;r._singleRules.delete(e);const s=[];for(let t=0;t<r._rules.length;++t){const n=r._rules[t];n.name!==e||n.keep?s.push(n):r._inRuleset()&&t<r.$_temp.ruleset&&--r.$_temp.ruleset}return r._rules=s,r}_values(e,t){l.verifyFlat(e,t.slice(1,-1));const r=this.clone(),n=e[0]===l.symbols.override;if(n&&(e=e.slice(1)),!r[t]&&e.length?r[t]=new b:n&&(r[t]=e.length?new b:null,r.$_mutateRebuild()),!r[t])return r;n&&r[t].override();for(const n of e){s(void 0!==n,\"Cannot call allow/valid/invalid with undefined\"),s(n!==l.symbols.override,\"Override must be the first value\");const e=\"_invalids\"===t?\"_valids\":\"_invalids\";r[e]&&(r[e].remove(n),r[e].length||(s(\"_valids\"===t||!r._flags.only,\"Setting invalid value\",n,\"leaves schema rejecting all values due to previous valid rule\"),r[e]=null)),r[t].add(n,r._refs)}return r}}};v.Base.prototype.isImmutable=!0,v.Base.prototype[l.symbols.any]={version:l.version,compile:c.compile,root:\"$_root\"},v.Base.prototype.deny=v.Base.prototype.invalid,v.Base.prototype.disallow=v.Base.prototype.invalid,v.Base.prototype.equal=v.Base.prototype.valid,v.Base.prototype.exist=v.Base.prototype.required,v.Base.prototype.not=v.Base.prototype.invalid,v.Base.prototype.options=v.Base.prototype.prefs,v.Base.prototype.preferences=v.Base.prototype.prefs,e.exports=new v.Base},function(e,t,r){\"use strict\";function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,s)}return r}function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}const o=r(0),a=r(1),i=r(5),l={};t.Ids=l.Ids=class{constructor(){this._byId=new Map,this._byKey=new Map,this._schemaChain=!1}clone(){const e=new l.Ids;return e._byId=new Map(this._byId),e._byKey=new Map(this._byKey),e._schemaChain=this._schemaChain,e}concat(e){e._schemaChain&&(this._schemaChain=!0);for(const[t,r]of e._byId.entries())o(!this._byKey.has(t),\"Schema id conflicts with existing key:\",t),this._byId.set(t,r);for(const[t,r]of e._byKey.entries())o(!this._byId.has(t),\"Schema key conflicts with existing id:\",t),this._byKey.set(t,r)}fork(e,t,r){const s=this._collect(e);s.push({schema:r});const n=s.shift();let i={id:n.id,schema:t(n.schema)};o(a.isSchema(i.schema),\"adjuster function failed to return a joi schema type\");for(const e of s)i={id:e.id,schema:l.fork(e.schema,i.id,i.schema)};return i.schema}labels(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];const r=e[0],s=this._get(r);if(!s)return[...t,...e].join(\".\");const n=e.slice(1);return t=[...t,s.schema._flags.label||r],n.length?s.schema._ids.labels(n,t):t.join(\".\")}reach(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];const r=e[0],s=this._get(r);o(s,\"Schema does not contain path\",[...t,...e].join(\".\"));const n=e.slice(1);return n.length?s.schema._ids.reach(n,[...t,r]):s.schema}register(e){let{key:t}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!e||!a.isSchema(e))return;(e.$_property(\"schemaChain\")||e._ids._schemaChain)&&(this._schemaChain=!0);const r=e._flags.id;if(r){const t=this._byId.get(r);o(!t||t.schema===e,\"Cannot add different schemas with the same id:\",r),o(!this._byKey.has(r),\"Schema id conflicts with existing key:\",r),this._byId.set(r,{schema:e,id:r})}t&&(o(!this._byKey.has(t),\"Schema already contains key:\",t),o(!this._byId.has(t),\"Schema key conflicts with existing id:\",t),this._byKey.set(t,{schema:e,id:t}))}reset(){this._byId=new Map,this._byKey=new Map,this._schemaChain=!1}_collect(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];const s=e[0],n=this._get(s);o(n,\"Schema does not contain path\",[...t,...e].join(\".\")),r=[n,...r];const a=e.slice(1);return a.length?n.schema._ids._collect(a,[...t,s],r):r}_get(e){return this._byId.get(e)||this._byKey.get(e)}},l.fork=function(e,r,s){return t.schema(e,{each:(e,t)=>{let{key:n}=t;if(r===(e._flags.id||n))return s},ref:!1}).$_mutateRebuild()},t.schema=function(e,t){let r;for(const s in e._flags){if(\"_\"===s[0])continue;const n=l.scan(e._flags[s],{source:\"flags\",name:s},t);void 0!==n&&((r=r||e.clone())._flags[s]=n)}for(let s=0;s<e._rules.length;++s){const n=e._rules[s],o=l.scan(n.args,{source:\"rules\",name:n.name},t);if(void 0!==o){r=r||e.clone();const t=Object.assign({},n);t.args=o,r._rules[s]=t,r._singleRules.get(n.name)===n&&r._singleRules.set(n.name,t)}}for(const s in e.$_terms){if(\"_\"===s[0])continue;const n=l.scan(e.$_terms[s],{source:\"terms\",name:s},t);void 0!==n&&((r=r||e.clone()).$_terms[s]=n)}return r},l.scan=function(e,t,r,o,c){const u=o||[];if(null===e||\"object\"!=typeof e)return;let f;if(Array.isArray(e)){for(let s=0;s<e.length;++s){const n=\"terms\"===t.source&&\"keys\"===t.name&&e[s].key,o=l.scan(e[s],t,r,[s,...u],n);void 0!==o&&((f=f||e.slice())[s]=o)}return f}if(!1!==r.schema&&a.isSchema(e)||!1!==r.ref&&i.isRef(e)){const o=r.each(e,function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(r,!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(r).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}({},t,{path:u,key:c}));if(o===e)return;return o}for(const s in e){if(\"_\"===s[0])continue;const n=l.scan(e[s],t,r,[s,...u],c);void 0!==n&&((f=f||Object.assign({},e))[s]=n)}return f}},function(e,t,r){\"use strict\";const s=r(0),n=r(2),o=r(35),a=r(8),i=r(1),l=r(4),c=r(36),u={result:Symbol(\"result\")};t.entry=function(e,t,r){let n=i.defaults;r&&(s(void 0===r.warnings,\"Cannot override warnings preference in synchronous validation\"),n=i.preferences(i.defaults,r));const o=u.entry(e,t,n);s(!o.mainstay.externals.length,\"Schema with external rules must use validateAsync()\");const a={value:o.value};return o.error&&(a.error=o.error),o.mainstay.warnings.length&&(a.warning=l.details(o.mainstay.warnings)),o.mainstay.debug&&(a.debug=o.mainstay.debug),a},t.entryAsync=async function(e,t,r){let s=i.defaults;r&&(s=i.preferences(i.defaults,r));const n=u.entry(e,t,s),o=n.mainstay;if(n.error)throw o.debug&&(n.error.debug=o.debug),n.error;if(o.externals.length){let e=n.value;for(const t of o.externals){const{method:r,path:s,label:n}=t;let o,i,l=e;s.length&&(o=s[s.length-1],l=(i=a(e,s.slice(0,-1)))[o]);try{const t=await r(l);if(void 0===t||t===l)continue;i?i[o]=t:e=t}catch(e){throw e.message+=\" (\".concat(n,\")\"),e}}n.value=e}if(!s.warnings&&!s.debug)return n.value;const c={value:n.value};return o.warnings.length&&(c.warning=l.details(o.warnings)),o.debug&&(c.debug=o.debug),c},u.entry=function(e,r,s){const{tracer:n,cleanup:o}=u.tracer(r,s),a={externals:[],warnings:[],tracer:n,debug:s.debug?[]:null,links:r._ids._schemaChain?new Map:null},i=r._ids._schemaChain?[{schema:r}]:null,f=new c([],[],{mainstay:a,schemas:i}),h=t.validate(e,r,f,s);o&&r.$_root.untrace();const m=l.process(h.errors,e,s);return{value:h.value,error:m,mainstay:a}},u.tracer=function(e,t){return e.$_root._tracer?{tracer:e.$_root._tracer._register(e)}:t.debug?(s(e.$_root.trace,\"Debug mode not supported\"),{tracer:e.$_root.trace()._register(e),cleanup:!0}):{tracer:u.ignore}},t.validate=function(e,t,r,s){let n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{};if(t.$_terms.whens&&(t=t._generate(e,r,s).schema),t._preferences&&(s=u.prefs(t,s)),t._cache&&s.cache){const s=t._cache.get(e);if(r.mainstay.tracer.debug(r,\"validate\",\"cached\",!!s),s)return s}const o=(n,o,a)=>t.$_createError(n,e,o,a||r,s),a={original:e,prefs:s,schema:t,state:r,error:o,warn:(e,t,s)=>r.mainstay.warnings.push(o(e,t,s)),message:(n,o)=>t.$_createError(\"custom\",e,o,r,s,{messages:n})};r.mainstay.tracer.entry(t,r);const l=t._definition;if(l.prepare&&void 0!==e&&s.convert){const t=l.prepare(e,a);if(t){if(r.mainstay.tracer.value(r,\"prepare\",e,t.value),t.errors)return u.finalize(t.value,[].concat(t.errors),a);e=t.value}}if(l.coerce&&void 0!==e&&s.convert&&(!l.coerce.from||l.coerce.from.includes(typeof e))){const t=l.coerce.method(e,a);if(t){if(r.mainstay.tracer.value(r,\"coerced\",e,t.value),t.errors)return u.finalize(t.value,[].concat(t.errors),a);e=t.value}}const c=t._flags.empty;c&&c.$_match(u.trim(e,t),r.nest(c),i.defaults)&&(r.mainstay.tracer.value(r,\"empty\",e,void 0),e=void 0);const f=n.presence||t._flags.presence||(t._flags._endedSwitch?\"ignore\":s.presence);if(void 0===e){if(\"forbidden\"===f)return u.finalize(e,null,a);if(\"required\"===f)return u.finalize(e,[t.$_createError(\"any.required\",e,null,r,s)],a);if(\"optional\"===f){if(t._flags.default!==i.symbols.deepDefault)return u.finalize(e,null,a);r.mainstay.tracer.value(r,\"default\",e,{}),e={}}}else if(\"forbidden\"===f)return u.finalize(e,[t.$_createError(\"any.unknown\",e,null,r,s)],a);const h=[];if(t._valids){const n=t._valids.get(e,r,s,t._flags.insensitive);if(n)return s.convert&&(r.mainstay.tracer.value(r,\"valids\",e,n.value),e=n.value),r.mainstay.tracer.filter(t,r,\"valid\",n),u.finalize(e,null,a);if(t._flags.only){const n=t.$_createError(\"any.only\",e,{valids:t._valids.values({display:!0})},r,s);if(s.abortEarly)return u.finalize(e,[n],a);h.push(n)}}if(t._invalids){const n=t._invalids.get(e,r,s,t._flags.insensitive);if(n){r.mainstay.tracer.filter(t,r,\"invalid\",n);const o=t.$_createError(\"any.invalid\",e,{invalids:t._invalids.values({display:!0})},r,s);if(s.abortEarly)return u.finalize(e,[o],a);h.push(o)}}if(l.validate){const t=l.validate(e,a);if(t&&(r.mainstay.tracer.value(r,\"base\",e,t.value),e=t.value,t.errors)){if(!Array.isArray(t.errors))return h.push(t.errors),u.finalize(e,h,a);if(t.errors.length)return h.push(...t.errors),u.finalize(e,h,a)}}return t._rules.length?u.rules(e,h,a):u.finalize(e,h,a)},u.rules=function(e,t,r){const{schema:s,state:n,prefs:o}=r;for(const a of s._rules){const l=s._definition.rules[a.method];if(l.convert&&o.convert){n.mainstay.tracer.log(s,n,\"rule\",a.name,\"full\");continue}let c,f=a.args;if(a._resolve.length){f=Object.assign({},f);for(const t of a._resolve){const r=l.argsByName.get(t),a=f[t].resolve(e,n,o),u=r.normalize?r.normalize(a):a,h=i.validateArg(u,null,r);if(h){c=s.$_createError(\"any.ref\",a,{arg:t,ref:f[t],reason:h},n,o);break}f[t]=u}}c=c||l.validate(e,r,f,a);const h=u.rule(c,a);if(h.errors){if(n.mainstay.tracer.log(s,n,\"rule\",a.name,\"error\"),a.warn){n.mainstay.warnings.push(...h.errors);continue}if(o.abortEarly)return u.finalize(e,h.errors,r);t.push(...h.errors)}else n.mainstay.tracer.log(s,n,\"rule\",a.name,\"pass\"),n.mainstay.tracer.value(n,\"rule\",e,h.value,a.name),e=h.value}return u.finalize(e,t,r)},u.rule=function(e,t){return e instanceof l.Report?(u.error(e,t),{errors:[e],value:null}):Array.isArray(e)&&(e[0]instanceof l.Report||e[0]instanceof Error)?(e.forEach(e=>u.error(e,t)),{errors:e,value:null}):{errors:null,value:e}},u.error=function(e,t){return t.message&&e._setTemplate(t.message),e},u.finalize=function(e,t,r){t=t||[];const{schema:n,state:o,prefs:a}=r;if(t.length){const s=u.default(\"failover\",void 0,t,r);void 0!==s&&(o.mainstay.tracer.value(o,\"failover\",e,s),e=s,t=[])}if(t.length&&n._flags.error)if(\"function\"==typeof n._flags.error){t=n._flags.error(t),Array.isArray(t)||(t=[t]);for(const e of t)s(e instanceof Error||e instanceof l.Report,\"error() must return an Error object\")}else t=[n._flags.error];if(void 0===e){const s=u.default(\"default\",e,t,r);o.mainstay.tracer.value(o,\"default\",e,s),e=s}if(n._flags.cast&&void 0!==e){const t=n._definition.cast[n._flags.cast];if(t.from(e)){const s=t.to(e,r);o.mainstay.tracer.value(o,\"cast\",e,s,n._flags.cast),e=s}}if(n.$_terms.externals&&a.externals&&!1!==a._externals)for(const e of n.$_terms.externals){const{method:t}=e;o.mainstay.externals.push({method:t,path:o.path,label:l.label(n._flags,o,a)})}const i={value:e,errors:t.length?t:null};return n._flags.result&&(i.value=\"strip\"===n._flags.result?void 0:r.original,o.mainstay.tracer.value(o,n._flags.result,e,i.value),o.shadow(e,n._flags.result)),n._cache&&!1!==a.cache&&!n._refs.length&&n._cache.set(r.original,i),i},u.prefs=function(e,t){const r=t===i.defaults;return r&&e._preferences[i.symbols.prefs]?e._preferences[i.symbols.prefs]:(t=i.preferences(t,e._preferences),r&&(e._preferences[i.symbols.prefs]=t),t)},u.default=function(e,t,r,s){let{schema:o,state:a,prefs:l}=s;const c=o._flags[e];if(l.noDefaults||void 0===c)return t;if(a.mainstay.tracer.log(o,a,\"rule\",e,\"full\"),!c)return c;if(\"function\"==typeof c){const t=c.length>0?[n(a.ancestors[0]),l]:[];try{return c(...t)}catch(t){return void r.push(o.$_createError(\"any.\".concat(e),null,{error:t},a,l))}}return\"object\"!=typeof c?c:c[i.symbols.literal]?c.literal:i.isResolvable(c)?c.resolve(t,a,l):n(c)},u.trim=function(e,t){if(\"string\"!=typeof e)return e;const r=t.$_getRule(\"trim\");return r&&r.args.enabled?e.trim():e},u.ignore={active:!1,debug:o,entry:o,filter:o,log:o,resolve:o,value:o}},function(e,t,r){\"use strict\";e.exports=function(){}},function(e,t,r){\"use strict\";const s=r(2),n=r(8),o=r(1),a={value:Symbol(\"value\")};e.exports=a.State=class{constructor(e,t,r){this.path=e,this.ancestors=t,this.mainstay=r.mainstay,this.schemas=r.schemas,this.debug=null}localize(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;const s=new a.State(e,t,this);return r&&s.schemas&&(s.schemas=[a.schemas(r),...s.schemas]),s}nest(e,t){const r=new a.State(this.path,this.ancestors,this);return r.schemas=r.schemas&&[a.schemas(e),...r.schemas],r.debug=t,r}shadow(e,t){this.mainstay.shadow=this.mainstay.shadow||new a.Shadow,this.mainstay.shadow.set(this.path,e,t)}snapshot(){this.mainstay.shadow&&(this._snapshot=s(this.mainstay.shadow.node(this.path)))}restore(){this.mainstay.shadow&&(this.mainstay.shadow.override(this.path,this._snapshot),this._snapshot=void 0)}},a.schemas=function(e){return o.isSchema(e)?{schema:e}:e},a.Shadow=class{constructor(){this._values=null}set(e,t,r){if(!e.length)return;if(\"strip\"===r&&\"number\"==typeof e[e.length-1])return;this._values=this._values||new Map;let s=this._values;for(let t=0;t<e.length;++t){const r=e[t];let n=s.get(r);n||(n=new Map,s.set(r,n)),s=n}s[a.value]=t}get(e){const t=this.node(e);if(t)return t[a.value]}node(e){if(this._values)return n(this._values,e,{iterables:!0})}override(e,t){if(!this._values)return;const r=e.slice(0,-1),s=e[e.length-1],o=n(this._values,r,{iterables:!0});t?o.set(s,t):o&&o.delete(s)}}},function(e,t,r){\"use strict\";const s=r(0),n=r(11),o=r(8),a=r(3),i=r(1),l=r(7),c={};e.exports=a.extend({type:\"array\",flags:{single:{default:!1},sparse:{default:!1}},terms:{items:{init:[],manifest:\"schema\"},ordered:{init:[],manifest:\"schema\"},_exclusions:{init:[]},_inclusions:{init:[]},_requireds:{init:[]}},coerce:{from:\"object\",method(e,t){let{schema:r,state:s,prefs:n}=t;if(!Array.isArray(e))return;const o=r.$_getRule(\"sort\");return o?c.sort(r,e,o.args.options,s,n):void 0}},validate(e,t){let{schema:r,error:s}=t;if(!Array.isArray(e)){if(r._flags.single){const t=[e];return t[i.symbols.arraySingle]=!0,{value:t}}return{errors:s(\"array.base\")}}if(r.$_getRule(\"items\")||r.$_terms.externals)return{value:e.slice()}},rules:{has:{method(e){e=this.$_compile(e,{appendPath:!0});const t=this.$_addRule({name:\"has\",args:{schema:e}});return t.$_mutateRegister(e),t},validate(e,t,r){let{state:s,prefs:n,error:o}=t,{schema:a}=r;const i=[e,...s.ancestors];for(let t=0;t<e.length;++t){const r=s.localize([...s.path,t],i,a);if(a.$_match(e[t],r,n))return e}const l=a._flags.label;return l?o(\"array.hasKnown\",{patternLabel:l}):o(\"array.hasUnknown\",null)},multi:!0},items:{method(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];i.verifyFlat(t,\"items\");const s=this.$_addRule(\"items\");for(let e=0;e<t.length;++e){const r=i.tryWithPath(()=>this.$_compile(t[e]),e,{append:!0});s.$_terms.items.push(r)}return s.$_mutateRebuild()},validate(e,t){let{schema:r,error:s,state:n,prefs:o}=t;const a=r.$_terms._requireds.slice(),l=r.$_terms.ordered.slice(),u=[...r.$_terms._inclusions,...a],f=!e[i.symbols.arraySingle];delete e[i.symbols.arraySingle];const h=[];let m=e.length;for(let t=0;t<m;++t){const i=e[t];let d=!1,p=!1;const g=f?t:new Number(t),y=[...n.path,g];if(!r._flags.sparse&&void 0===i){if(h.push(s(\"array.sparse\",{key:g,path:y,pos:t,value:void 0},n.localize(y))),o.abortEarly)return h;l.shift();continue}const b=[e,...n.ancestors];for(const e of r.$_terms._exclusions)if(e.$_match(i,n.localize(y,b,e),o,{presence:\"ignore\"})){if(h.push(s(\"array.excludes\",{pos:t,value:i},n.localize(y))),o.abortEarly)return h;d=!0,l.shift();break}if(d)continue;if(r.$_terms.ordered.length){if(l.length){const a=l.shift(),u=a.$_validate(i,n.localize(y,b,a),o);if(u.errors){if(h.push(...u.errors),o.abortEarly)return h}else if(\"strip\"===a._flags.result)c.fastSplice(e,t),--t,--m;else{if(!r._flags.sparse&&void 0===u.value){if(h.push(s(\"array.sparse\",{key:g,path:y,pos:t,value:void 0},n.localize(y))),o.abortEarly)return h;continue}e[t]=u.value}continue}if(!r.$_terms.items.length){if(h.push(s(\"array.orderedLength\",{pos:t,limit:r.$_terms.ordered.length})),o.abortEarly)return h;break}}const v=[];let _=a.length;for(let l=0;l<_;++l){const u=n.localize(y,b,a[l]);u.snapshot();const f=a[l].$_validate(i,u,o);if(v[l]=f,!f.errors){if(e[t]=f.value,p=!0,c.fastSplice(a,l),--l,--_,!r._flags.sparse&&void 0===f.value&&(h.push(s(\"array.sparse\",{key:g,path:y,pos:t,value:void 0},n.localize(y))),o.abortEarly))return h;break}u.restore()}if(p)continue;const w=o.stripUnknown&&!!o.stripUnknown.arrays||!1;_=u.length;for(const l of u){let u;const f=a.indexOf(l);if(-1!==f)u=v[f];else{const a=n.localize(y,b,l);if(a.snapshot(),!(u=l.$_validate(i,a,o)).errors){\"strip\"===l._flags.result?(c.fastSplice(e,t),--t,--m):r._flags.sparse||void 0!==u.value?e[t]=u.value:(h.push(s(\"array.sparse\",{key:g,path:y,pos:t,value:void 0},n.localize(y))),d=!0),p=!0;break}a.restore()}if(1===_){if(w){c.fastSplice(e,t),--t,--m,p=!0;break}if(h.push(...u.errors),o.abortEarly)return h;d=!0;break}}if(!d&&(r.$_terms._inclusions.length&&!p)){if(w){c.fastSplice(e,t),--t,--m;continue}if(h.push(s(\"array.includes\",{pos:t,value:i},n.localize(y))),o.abortEarly)return h}}return a.length&&c.fillMissedErrors(r,h,a,e,n,o),l.length&&c.fillOrderedErrors(r,h,l,e,n,o),h.length?h:e},priority:!0,manifest:!1},length:{method(e){return this.$_addRule({name:\"length\",args:{limit:e},operator:\"=\"})},validate(e,t,r,s){let{limit:n}=r,{name:o,operator:a,args:l}=s;return i.compare(e.length,n,a)?e:t.error(\"array.\"+o,{limit:l.limit,value:e})},args:[{name:\"limit\",ref:!0,assert:i.limit,message:\"must be a positive integer\"}]},max:{method(e){return this.$_addRule({name:\"max\",method:\"length\",args:{limit:e},operator:\"<=\"})}},min:{method(e){return this.$_addRule({name:\"min\",method:\"length\",args:{limit:e},operator:\">=\"})}},ordered:{method(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];i.verifyFlat(t,\"ordered\");const s=this.$_addRule(\"items\");for(let e=0;e<t.length;++e){const r=i.tryWithPath(()=>this.$_compile(t[e]),e,{append:!0});c.validateSingle(r,s),s.$_mutateRegister(r),s.$_terms.ordered.push(r)}return s.$_mutateRebuild()}},single:{method(e){const t=void 0===e||!!e;return s(!t||!this._flags._arrayItems,\"Cannot specify single rule when array has array items\"),this.$_setFlag(\"single\",t)}},sort:{method(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};i.assertOptions(e,[\"by\",\"order\"]);const t={order:e.order||\"ascending\"};return e.by&&(t.by=l.ref(e.by,{ancestor:0}),s(!t.by.ancestor,\"Cannot sort by ancestor\")),this.$_addRule({name:\"sort\",args:{options:t}})},validate(e,t,r){let{error:s,state:n,prefs:o,schema:a}=t,{options:i}=r;const{value:l,errors:u}=c.sort(a,e,i,n,o);if(u)return u;for(let t=0;t<e.length;++t)if(e[t]!==l[t])return s(\"array.sort\",{order:i.order,by:i.by?i.by.key:\"value\"});return e},convert:!0},sparse:{method(e){const t=void 0===e||!!e;return this._flags.sparse===t?this:(t?this.clone():this.$_addRule(\"items\")).$_setFlag(\"sparse\",t,{clone:!1})}},unique:{method(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};s(!e||\"function\"==typeof e||\"string\"==typeof e,\"comparator must be a function or a string\"),i.assertOptions(t,[\"ignoreUndefined\",\"separator\"]);const r={name:\"unique\",args:{options:t,comparator:e}};if(e)if(\"string\"==typeof e){const s=i.default(t.separator,\".\");r.path=s?e.split(s):[e]}else r.comparator=e;return this.$_addRule(r)},validate(e,t,r,a){let{state:i,error:l,schema:c}=t,{comparator:u,options:f}=r,{comparator:h,path:m}=a;const d={string:Object.create(null),number:Object.create(null),undefined:Object.create(null),boolean:Object.create(null),object:new Map,function:new Map,custom:new Map},p=h||n,g=f.ignoreUndefined;for(let t=0;t<e.length;++t){const r=m?o(e[t],m):e[t],n=h?d.custom:d[typeof r];if(s(n,\"Failed to find unique map container for type\",typeof r),n instanceof Map){const s=n.entries();let o;for(;!(o=s.next()).done;)if(p(o.value[0],r)){const r=i.localize([...i.path,t],[e,...i.ancestors]),s={pos:t,value:e[t],dupePos:o.value[1],dupeValue:e[o.value[1]]};return m&&(s.path=u),l(\"array.unique\",s,r)}n.set(r,t)}else{if((!g||void 0!==r)&&void 0!==n[r]){const s={pos:t,value:e[t],dupePos:n[r],dupeValue:e[n[r]]};return m&&(s.path=u),l(\"array.unique\",s,i.localize([...i.path,t],[e,...i.ancestors]))}n[r]=t}}return e},args:[\"comparator\",\"options\"],multi:!0}},cast:{set:{from:Array.isArray,to:(e,t)=>new Set(e)}},rebuild(e){e.$_terms._inclusions=[],e.$_terms._exclusions=[],e.$_terms._requireds=[];for(const t of e.$_terms.items)c.validateSingle(t,e),\"required\"===t._flags.presence?e.$_terms._requireds.push(t):\"forbidden\"===t._flags.presence?e.$_terms._exclusions.push(t):e.$_terms._inclusions.push(t);for(const t of e.$_terms.ordered)c.validateSingle(t,e)},manifest:{build:(e,t)=>(t.items&&(e=e.items(...t.items)),t.ordered&&(e=e.ordered(...t.ordered)),e)},messages:{\"array.base\":'\"{{#label}}\" must be an array',\"array.excludes\":'\"{{#label}}\" contains an excluded value',\"array.hasKnown\":'\"{{#label}}\" does not contain at least one required match for type \"{#patternLabel}\"',\"array.hasUnknown\":'\"{{#label}}\" does not contain at least one required match',\"array.includes\":'\"{{#label}}\" does not match any of the allowed types',\"array.includesRequiredBoth\":'\"{{#label}}\" does not contain {{#knownMisses}} and {{#unknownMisses}} other required value(s)',\"array.includesRequiredKnowns\":'\"{{#label}}\" does not contain {{#knownMisses}}',\"array.includesRequiredUnknowns\":'\"{{#label}}\" does not contain {{#unknownMisses}} required value(s)',\"array.length\":'\"{{#label}}\" must contain {{#limit}} items',\"array.max\":'\"{{#label}}\" must contain less than or equal to {{#limit}} items',\"array.min\":'\"{{#label}}\" must contain at least {{#limit}} items',\"array.orderedLength\":'\"{{#label}}\" must contain at most {{#limit}} items',\"array.sort\":'\"{{#label}}\" must be sorted in {#order} order by {{#by}}',\"array.sort.mismatching\":'\"{{#label}}\" cannot be sorted due to mismatching types',\"array.sort.unsupported\":'\"{{#label}}\" cannot be sorted due to unsupported type {#type}',\"array.sparse\":'\"{{#label}}\" must not be a sparse array item',\"array.unique\":'\"{{#label}}\" contains a duplicate value'}}),c.fillMissedErrors=function(e,t,r,s,n,o){const a=[];let i=0;for(const e of r){const t=e._flags.label;t?a.push(t):++i}a.length?i?t.push(e.$_createError(\"array.includesRequiredBoth\",s,{knownMisses:a,unknownMisses:i},n,o)):t.push(e.$_createError(\"array.includesRequiredKnowns\",s,{knownMisses:a},n,o)):t.push(e.$_createError(\"array.includesRequiredUnknowns\",s,{unknownMisses:i},n,o))},c.fillOrderedErrors=function(e,t,r,s,n,o){const a=[];for(const e of r)\"required\"===e._flags.presence&&a.push(e);a.length&&c.fillMissedErrors(e,t,a,s,n,o)},c.fastSplice=function(e,t){let r=t;for(;r<e.length;)e[r++]=e[r];--e.length},c.validateSingle=function(e,t){(\"array\"===e.type||e._flags._arrayItems)&&(s(!t._flags.single,\"Cannot specify array item with single rule enabled\"),t.$_setFlag(\"_arrayItems\",!0,{clone:!1}))},c.sort=function(e,t,r,s,n){const o=\"ascending\"===r.order?1:-1,a=-1*o,i=o,l=(l,u)=>{let f=c.compare(l,u,a,i);if(null!==f)return f;if(r.by&&(l=r.by.resolve(l,s,n),u=r.by.resolve(u,s,n)),null!==(f=c.compare(l,u,a,i)))return f;const h=typeof l;if(h!==typeof u)throw e.$_createError(\"array.sort.mismatching\",t,null,s,n);if(\"number\"!==h&&\"string\"!==h)throw e.$_createError(\"array.sort.unsupported\",t,{type:h},s,n);return\"number\"===h?(l-u)*o:l<u?a:i};try{return{value:t.slice().sort(l)}}catch(e){return{errors:e}}},c.compare=function(e,t,r,s){return e===t?0:void 0===e?1:void 0===t?-1:null===e?s:null===t?r:null}},function(e,t,r){\"use strict\";const s=r(0),n=r(3),o=r(1),a=r(21),i={isBool:function(e){return\"boolean\"==typeof e}};e.exports=n.extend({type:\"boolean\",flags:{sensitive:{default:!1}},terms:{falsy:{init:null,manifest:\"values\"},truthy:{init:null,manifest:\"values\"}},coerce(e,t){let{schema:r}=t;if(\"boolean\"!=typeof e){if(\"string\"==typeof e){const t=r._flags.sensitive?e:e.toLowerCase();e=\"true\"===t||\"false\"!==t&&e}return\"boolean\"!=typeof e&&(e=r.$_terms.truthy&&r.$_terms.truthy.has(e,null,null,!r._flags.sensitive)||(!r.$_terms.falsy||!r.$_terms.falsy.has(e,null,null,!r._flags.sensitive))&&e),{value:e}}},validate(e,t){let{error:r}=t;if(\"boolean\"!=typeof e)return{value:e,errors:r(\"boolean.base\")}},rules:{truthy:{method(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];o.verifyFlat(t,\"truthy\");const n=this.clone();n.$_terms.truthy=n.$_terms.truthy||new a;for(let e=0;e<t.length;++e){const r=t[e];s(void 0!==r,\"Cannot call truthy with undefined\"),n.$_terms.truthy.add(r)}return n}},falsy:{method(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];o.verifyFlat(t,\"falsy\");const n=this.clone();n.$_terms.falsy=n.$_terms.falsy||new a;for(let e=0;e<t.length;++e){const r=t[e];s(void 0!==r,\"Cannot call falsy with undefined\"),n.$_terms.falsy.add(r)}return n}},sensitive:{method(){let e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return this.$_setFlag(\"sensitive\",e)}}},cast:{number:{from:i.isBool,to:(e,t)=>e?1:0},string:{from:i.isBool,to:(e,t)=>e?\"true\":\"false\"}},manifest:{build:(e,t)=>(t.truthy&&(e=e.truthy(...t.truthy)),t.falsy&&(e=e.falsy(...t.falsy)),e)},messages:{\"boolean.base\":'\"{{#label}}\" must be a boolean'}})},function(e,t,r){\"use strict\";const s=r(0),n=r(3),o=r(1),a=r(6),i={isDate:function(e){return e instanceof Date}};e.exports=n.extend({type:\"date\",coerce:{from:[\"number\",\"string\"],method(e,t){let{schema:r}=t;return{value:i.parse(e,r._flags.format)||e}}},validate(e,t){let{schema:r,error:s,prefs:n}=t;if(e instanceof Date&&!isNaN(e.getTime()))return;const o=r._flags.format;return n.convert&&o&&\"string\"==typeof e?{value:e,errors:s(\"date.format\",{format:o})}:{value:e,errors:s(\"date.base\")}},rules:{compare:{method:!1,validate(e,t,r,s){let{date:n}=r,{name:a,operator:i,args:l}=s;const c=\"now\"===n?Date.now():n.getTime();return o.compare(e.getTime(),c,i)?e:t.error(\"date.\"+a,{limit:l.date,value:e})},args:[{name:\"date\",ref:!0,normalize:e=>\"now\"===e?e:i.parse(e),assert:e=>null!==e,message:\"must have a valid date format\"}]},format:{method(e){return s([\"iso\",\"javascript\",\"unix\"].includes(e),\"Unknown date format\",e),this.$_setFlag(\"format\",e)}},greater:{method(e){return this.$_addRule({name:\"greater\",method:\"compare\",args:{date:e},operator:\">\"})}},iso:{method(){return this.format(\"iso\")}},less:{method(e){return this.$_addRule({name:\"less\",method:\"compare\",args:{date:e},operator:\"<\"})}},max:{method(e){return this.$_addRule({name:\"max\",method:\"compare\",args:{date:e},operator:\"<=\"})}},min:{method(e){return this.$_addRule({name:\"min\",method:\"compare\",args:{date:e},operator:\">=\"})}},timestamp:{method(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\"javascript\";return s([\"javascript\",\"unix\"].includes(e),'\"type\" must be one of \"javascript, unix\"'),this.format(e)}}},cast:{number:{from:i.isDate,to:(e,t)=>e.getTime()},string:{from:i.isDate,to(e,t){let{prefs:r}=t;return a.date(e,r)}}},messages:{\"date.base\":'\"{{#label}}\" must be a valid date',\"date.format\":'\"{{#label}}\" must be in {msg(\"date.format.\" + #format) || #format} format',\"date.greater\":'\"{{#label}}\" must be greater than \"{{#limit}}\"',\"date.less\":'\"{{#label}}\" must be less than \"{{#limit}}\"',\"date.max\":'\"{{#label}}\" must be less than or equal to \"{{#limit}}\"',\"date.min\":'\"{{#label}}\" must be larger than or equal to \"{{#limit}}\"',\"date.format.iso\":\"ISO 8601 date\",\"date.format.javascript\":\"timestamp or number of milliseconds\",\"date.format.unix\":\"timestamp or number of seconds\"}}),i.parse=function(e,t){if(e instanceof Date)return e;if(\"string\"!=typeof e&&(isNaN(e)||!isFinite(e)))return null;if(/^\\s*$/.test(e))return null;if(\"iso\"===t)return o.isIsoDate(e)?i.date(e.toString()):null;const r=e;if(\"string\"==typeof e&&/^[+-]?\\d+(\\.\\d+)?$/.test(e)&&(e=parseFloat(e)),t){if(\"javascript\"===t)return i.date(1*e);if(\"unix\"===t)return i.date(1e3*e);if(\"string\"==typeof r)return null}return i.date(e)},i.date=function(e){const t=new Date(e);return isNaN(t.getTime())?null:t}},function(e,t,r){\"use strict\";const s=r(0),n=r(22);e.exports=n.extend({type:\"function\",properties:{typeof:\"function\"},rules:{arity:{method(e){return s(Number.isSafeInteger(e)&&e>=0,\"n must be a positive integer\"),this.$_addRule({name:\"arity\",args:{n:e}})},validate(e,t,r){let{n:s}=r;return e.length===s?e:t.error(\"function.arity\",{n:s})}},class:{method(){return this.$_addRule(\"class\")},validate:(e,t)=>/^\\s*class\\s/.test(e.toString())?e:t.error(\"function.class\",{value:e})},minArity:{method(e){return s(Number.isSafeInteger(e)&&e>0,\"n must be a strict positive integer\"),this.$_addRule({name:\"minArity\",args:{n:e}})},validate(e,t,r){let{n:s}=r;return e.length>=s?e:t.error(\"function.minArity\",{n:s})}},maxArity:{method(e){return s(Number.isSafeInteger(e)&&e>=0,\"n must be a positive integer\"),this.$_addRule({name:\"maxArity\",args:{n:e}})},validate(e,t,r){let{n:s}=r;return e.length<=s?e:t.error(\"function.maxArity\",{n:s})}}},messages:{\"function.arity\":'\"{{#label}}\" must have an arity of {{#n}}',\"function.class\":'\"{{#label}}\" must be a class',\"function.maxArity\":'\"{{#label}}\" must have an arity lesser or equal to {{#n}}',\"function.minArity\":'\"{{#label}}\" must have an arity greater or equal to {{#n}}'}})},function(e,t,r){\"use strict\";const s=r(0),n=r(2),o=r(20),a=r(10),i={};e.exports=function(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(s(e&&\"object\"==typeof e,\"Invalid defaults value: must be an object\"),s(!t||!0===t||\"object\"==typeof t,\"Invalid source value: must be true, falsy or an object\"),s(\"object\"==typeof r,\"Invalid options: must be an object\"),!t)return null;if(r.shallow)return i.applyToDefaultsWithShallow(e,t,r);const a=n(e);if(!0===t)return a;const l=void 0!==r.nullOverride&&r.nullOverride;return o(a,t,{nullOverride:l,mergeArrays:!1})},i.applyToDefaultsWithShallow=function(e,t,r){const i=r.shallow;s(Array.isArray(i),\"Invalid keys\"),(r=Object.assign({},r)).shallow=!1;const l=n(e,{shallow:i});if(!0===t)return l;const c=a.store(t,i);return o(l,t,{mergeArrays:!1,nullOverride:!1}),a.restore(l,t,c),l}},function(e,t,r){\"use strict\";const s=r(0),n={};e.exports=class{constructor(){this._items=[],this.nodes=[]}add(e,t){const r=[].concat((t=t||{}).before||[]),n=[].concat(t.after||[]),o=t.group||\"?\",a=t.sort||0;s(!r.includes(o),\"Item cannot come before itself: \".concat(o)),s(!r.includes(\"?\"),\"Item cannot come before unassociated items\"),s(!n.includes(o),\"Item cannot come after itself: \".concat(o)),s(!n.includes(\"?\"),\"Item cannot come after unassociated items\"),Array.isArray(e)||(e=[e]);for(const t of e){const e={seq:this._items.length,sort:a,before:r,after:n,group:o,node:t};this._items.push(e)}const i=this._sort();return s(i,\"item\",\"?\"!==o?\"added into group \".concat(o):\"\",\"created a dependencies error\"),this.nodes}merge(e){Array.isArray(e)||(e=[e]);for(const t of e)if(t)for(const e of t._items)this._items.push(Object.assign({},e));this._items.sort(n.mergeSort);for(let e=0;e<this._items.length;++e)this._items[e].seq=e;const t=this._sort();return s(t,\"merge created a dependencies error\"),this.nodes}_sort(){const e={},t=Object.create(null),r=Object.create(null);for(const s of this._items){const n=s.seq,o=s.group;r[o]=r[o]||[],r[o].push(n),e[n]=s.before;for(const e of s.after)t[e]=t[e]||[],t[e].push(n)}for(const t in e){const s=[];for(const n in e[t]){const o=e[t][n];r[o]=r[o]||[],s.push(...r[o])}e[t]=s}for(const s in t)if(r[s])for(const n of r[s])e[n].push(...t[s]);const s={};for(const t in e){const r=e[t];for(const e of r)s[e]=s[e]||[],s[e].push(t)}const n={},o=[];for(let e=0;e<this._items.length;++e){let t=e;if(s[e]){t=null;for(let e=0;e<this._items.length;++e){if(!0===n[e])continue;s[e]||(s[e]=[]);const r=s[e].length;let o=0;for(let t=0;t<r;++t)n[s[e][t]]&&++o;if(o===r){t=e;break}}}null!==t&&(n[t]=!0,o.push(t))}if(o.length!==this._items.length)return!1;const a={};for(const e of this._items)a[e.seq]=e;this._items=[],this.nodes=[];for(const e of o){const t=a[e];this.nodes.push(t.node),this._items.push(t)}return!0}},n.mergeSort=(e,t)=>e.sort===t.sort?0:e.sort<t.sort?-1:1},function(e,t,r){\"use strict\";const s=r(0),n=r(3),o=r(1),a=r(7),i=r(4),l={};e.exports=n.extend({type:\"link\",properties:{schemaChain:!0},terms:{link:{init:null,manifest:\"single\",register:!1}},args:(e,t)=>e.ref(t),validate(e,t){let{schema:r,state:n,prefs:o}=t;s(r.$_terms.link,\"Uninitialized link schema\");const a=l.generate(r,e,n,o),i=r.$_terms.link[0].ref;return a.$_validate(e,n.nest(a,\"link:\".concat(i.display,\":\").concat(a.type)),o)},generate:(e,t,r,s)=>l.generate(e,t,r,s),rules:{ref:{method(e){s(!this.$_terms.link,\"Cannot reinitialize schema\"),e=a.ref(e),s(\"value\"===e.type||\"local\"===e.type,\"Invalid reference type:\",e.type),s(\"local\"===e.type||\"root\"===e.ancestor||e.ancestor>0,\"Link cannot reference itself\");const t=this.clone();return t.$_terms.link=[{ref:e}],t}},relative:{method(){let e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return this.$_setFlag(\"relative\",e)}}},overrides:{concat(e){s(this.$_terms.link,\"Uninitialized link schema\"),s(o.isSchema(e),\"Invalid schema object\"),s(\"link\"!==e.type,\"Cannot merge type link with another link\");const t=this.clone();return t.$_terms.whens||(t.$_terms.whens=[]),t.$_terms.whens.push({concat:e}),t.$_mutateRebuild()}},manifest:{build:(e,t)=>(s(t.link,\"Invalid link description missing link\"),e.ref(t.link))}}),l.generate=function(e,t,r,s){let n=r.mainstay.links.get(e);if(n)return n._generate(t,r,s).schema;const o=e.$_terms.link[0].ref,{perspective:a,path:i}=l.perspective(o,r);l.assert(a,\"which is outside of schema boundaries\",o,e,r,s);try{n=i.length?a.$_reach(i):a}catch(t){l.assert(!1,\"to non-existing schema\",o,e,r,s)}return l.assert(\"link\"!==n.type,\"which is another link\",o,e,r,s),e._flags.relative||r.mainstay.links.set(e,n),n._generate(t,r,s).schema},l.perspective=function(e,t){if(\"local\"===e.type){for(const r of t.schemas){const{schema:t,key:s}=r;if((t._flags.id||s)===e.path[0])return{perspective:t,path:e.path.slice(1)};if(t.$_terms.shared)for(const r of t.$_terms.shared)if(r._flags.id===e.path[0])return{perspective:r,path:e.path.slice(1)}}return{perspective:null,path:null}}return\"root\"===e.ancestor?{perspective:t.schemas[t.schemas.length-1].schema,path:e.path}:{perspective:t.schemas[e.ancestor]&&t.schemas[e.ancestor].schema,path:e.path}},l.assert=function(e,t,r,n,o,a){e||s(!1,'\"'.concat(i.label(n._flags,o,a),'\" contains link reference \"').concat(r.display,'\" ').concat(t))}},function(e,t,r){\"use strict\";const s=r(0),n=r(3),o=r(1),a={numberRx:/^\\s*[+-]?(?:(?:\\d+(?:\\.\\d*)?)|(?:\\.\\d+))(?:e([+-]?\\d+))?\\s*$/i,precisionRx:/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/};e.exports=n.extend({type:\"number\",flags:{unsafe:{default:!1}},coerce:{from:\"string\",method(e,t){let{schema:r,error:s}=t;const n=e.match(a.numberRx);if(!n)return;e=e.trim();const o={value:parseFloat(e)};if(0===o.value&&(o.value=0),!r._flags.unsafe)if(e.match(/e/i)){if(a.normalizeExponent(\"\".concat(o.value/Math.pow(10,n[1]),\"e\").concat(n[1]))!==a.normalizeExponent(e))return o.errors=s(\"number.unsafe\"),o}else{const t=o.value.toString();if(t.match(/e/i))return o;if(t!==a.normalizeDecimal(e))return o.errors=s(\"number.unsafe\"),o}return o}},validate(e,t){let{schema:r,error:s,prefs:n}=t;if(e===1/0||e===-1/0)return{value:e,errors:s(\"number.infinity\")};if(!o.isNumber(e))return{value:e,errors:s(\"number.base\")};const a={value:e};if(n.convert){const e=r.$_getRule(\"precision\");if(e){const t=Math.pow(10,e.args.limit);a.value=Math.round(a.value*t)/t}}return 0===a.value&&(a.value=0),!r._flags.unsafe&&(e>Number.MAX_SAFE_INTEGER||e<Number.MIN_SAFE_INTEGER)&&(a.errors=s(\"number.unsafe\")),a},rules:{compare:{method:!1,validate(e,t,r,s){let{limit:n}=r,{name:a,operator:i,args:l}=s;return o.compare(e,n,i)?e:t.error(\"number.\"+a,{limit:l.limit,value:e})},args:[{name:\"limit\",ref:!0,assert:o.isNumber,message:\"must be a number\"}]},greater:{method(e){return this.$_addRule({name:\"greater\",method:\"compare\",args:{limit:e},operator:\">\"})}},integer:{method(){return this.$_addRule(\"integer\")},validate:(e,t)=>Math.trunc(e)-e==0?e:t.error(\"number.integer\")},less:{method(e){return this.$_addRule({name:\"less\",method:\"compare\",args:{limit:e},operator:\"<\"})}},max:{method(e){return this.$_addRule({name:\"max\",method:\"compare\",args:{limit:e},operator:\"<=\"})}},min:{method(e){return this.$_addRule({name:\"min\",method:\"compare\",args:{limit:e},operator:\">=\"})}},multiple:{method(e){return this.$_addRule({name:\"multiple\",args:{base:e}})},validate(e,t,r,s){let{base:n}=r;return e%n==0?e:t.error(\"number.multiple\",{multiple:s.args.base,value:e})},args:[{name:\"base\",ref:!0,assert:e=>\"number\"==typeof e&&isFinite(e)&&e>0,message:\"must be a positive number\"}],multi:!0},negative:{method(){return this.sign(\"negative\")}},port:{method(){return this.$_addRule(\"port\")},validate:(e,t)=>Number.isSafeInteger(e)&&e>=0&&e<=65535?e:t.error(\"number.port\")},positive:{method(){return this.sign(\"positive\")}},precision:{method(e){return s(Number.isSafeInteger(e),\"limit must be an integer\"),this.$_addRule({name:\"precision\",args:{limit:e}})},validate(e,t,r){let{limit:s}=r;const n=e.toString().match(a.precisionRx);return Math.max((n[1]?n[1].length:0)-(n[2]?parseInt(n[2],10):0),0)<=s?e:t.error(\"number.precision\",{limit:s,value:e})},convert:!0},sign:{method(e){return s([\"negative\",\"positive\"].includes(e),\"Invalid sign\",e),this.$_addRule({name:\"sign\",args:{sign:e}})},validate(e,t,r){let{sign:s}=r;return\"negative\"===s&&e<0||\"positive\"===s&&e>0?e:t.error(\"number.\".concat(s))}},unsafe:{method(){let e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return s(\"boolean\"==typeof e,\"enabled must be a boolean\"),this.$_setFlag(\"unsafe\",e)}}},cast:{string:{from:e=>\"number\"==typeof e,to:(e,t)=>e.toString()}},messages:{\"number.base\":'\"{{#label}}\" must be a number',\"number.greater\":'\"{{#label}}\" must be greater than {{#limit}}',\"number.infinity\":'\"{{#label}}\" cannot be infinity',\"number.integer\":'\"{{#label}}\" must be an integer',\"number.less\":'\"{{#label}}\" must be less than {{#limit}}',\"number.max\":'\"{{#label}}\" must be less than or equal to {{#limit}}',\"number.min\":'\"{{#label}}\" must be larger than or equal to {{#limit}}',\"number.multiple\":'\"{{#label}}\" must be a multiple of {{#multiple}}',\"number.negative\":'\"{{#label}}\" must be a negative number',\"number.port\":'\"{{#label}}\" must be a valid port',\"number.positive\":'\"{{#label}}\" must be a positive number',\"number.precision\":'\"{{#label}}\" must have no more than {{#limit}} decimal places',\"number.unsafe\":'\"{{#label}}\" must be a safe number'}}),a.normalizeExponent=function(e){return e.replace(/E/,\"e\").replace(/\\.(\\d*[1-9])?0+e/,\".$1e\").replace(/\\.e/,\"e\").replace(/e\\+/,\"e\").replace(/^\\+/,\"\").replace(/^(-?)0+([1-9])/,\"$1$2\")},a.normalizeDecimal=function(e){return(e=e.replace(/^\\+/,\"\").replace(/\\.0+$/,\"\").replace(/^(-?)\\.([^\\.]*)$/,\"$10.$2\").replace(/^(-?)0+([1-9])/,\"$1$2\")).includes(\".\")&&e.endsWith(\"0\")&&(e=e.replace(/0+$/,\"\")),\"-0\"===e?\"0\":e}},function(e,t,r){\"use strict\";const s=r(22);e.exports=s.extend({type:\"object\",cast:{map:{from:e=>e&&\"object\"==typeof e,to:(e,t)=>new Map(Object.entries(e))}}})},function(e,t,r){\"use strict\";function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,s)}return r}function n(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(r,!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(r).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}const a=r(0),i=r(23),l=r(47),c=r(25),u=r(48),f=r(3),h=r(1),m=r(49),d=r(26),p={tlds:u instanceof Set&&{tlds:{allow:u,deny:null}},base64Regex:{true:{true:/^(?:[\\w\\-]{2}[\\w\\-]{2})*(?:[\\w\\-]{2}==|[\\w\\-]{3}=)?$/,false:/^(?:[A-Za-z0-9+\\/]{2}[A-Za-z0-9+\\/]{2})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)?$/},false:{true:/^(?:[\\w\\-]{2}[\\w\\-]{2})*(?:[\\w\\-]{2}(==)?|[\\w\\-]{3}=?)?$/,false:/^(?:[A-Za-z0-9+\\/]{2}[A-Za-z0-9+\\/]{2})*(?:[A-Za-z0-9+\\/]{2}(==)?|[A-Za-z0-9+\\/]{3}=?)?$/}},dataUriRegex:/^data:[\\w+.-]+\\/[\\w+.-]+;((charset=[\\w-]+|base64),)?(.*)$/,hexRegex:/^[a-f0-9]+$/i,hostRegex:/^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$/,ipRegex:m.createIpRegex([\"ipv4\",\"ipv6\",\"ipvfuture\"],\"optional\"),isoDurationRegex:/^P(?!$)(\\d+Y)?(\\d+M)?(\\d+W)?(\\d+D)?(T(?=\\d)(\\d+H)?(\\d+M)?(\\d+S)?)?$/,guidBrackets:{\"{\":\"}\",\"[\":\"]\",\"(\":\")\",\"\":\"\"},guidVersions:{uuidv1:\"1\",uuidv2:\"2\",uuidv3:\"3\",uuidv4:\"4\",uuidv5:\"5\"},cidrPresences:[\"required\",\"optional\",\"forbidden\"],normalizationForms:[\"NFC\",\"NFD\",\"NFKC\",\"NFKD\"]};e.exports=f.extend({type:\"string\",flags:{insensitive:{default:!1},truncate:{default:!1}},terms:{replacements:{init:null}},coerce:{from:\"string\",method(e,t){let{schema:r,state:s,prefs:n}=t;const o=r.$_getRule(\"normalize\");o&&(e=e.normalize(o.args.form));const a=r.$_getRule(\"case\");a&&(e=\"upper\"===a.args.direction?e.toLocaleUpperCase():e.toLocaleLowerCase());const i=r.$_getRule(\"trim\");if(i&&i.args.enabled&&(e=e.trim()),r.$_terms.replacements)for(const t of r.$_terms.replacements)e=e.replace(t.pattern,t.replacement);const l=r.$_getRule(\"hex\");if(l&&l.args.options.byteAligned&&e.length%2!=0&&(e=\"0\".concat(e)),r.$_getRule(\"isoDate\")){const t=p.isoDate(e);t&&(e=t)}if(r._flags.truncate){const t=r.$_getRule(\"max\");if(t){let o=t.args.limit;if(h.isResolvable(o)&&(o=o.resolve(e,s,n),!h.limit(o)))return{value:e,errors:r.$_createError(\"any.ref\",o,{ref:t.args.limit,arg:\"limit\",reason:\"must be a positive integer\"},s,n)};e=e.slice(0,o)}}return{value:e}}},validate(e,t){let{error:r}=t;return\"string\"!=typeof e?{value:e,errors:r(\"string.base\")}:\"\"===e?{value:e,errors:r(\"string.empty\")}:void 0},rules:{alphanum:{method(){return this.$_addRule(\"alphanum\")},validate:(e,t)=>/^[a-zA-Z0-9]+$/.test(e)?e:t.error(\"string.alphanum\")},base64:{method(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return h.assertOptions(e,[\"paddingRequired\",\"urlSafe\"]),e=n({urlSafe:!1,paddingRequired:!0},e),a(\"boolean\"==typeof e.paddingRequired,\"paddingRequired must be boolean\"),a(\"boolean\"==typeof e.urlSafe,\"urlSafe must be boolean\"),this.$_addRule({name:\"base64\",args:{options:e}})},validate(e,t,r){let{options:s}=r;return p.base64Regex[s.paddingRequired][s.urlSafe].test(e)?e:t.error(\"string.base64\")}},case:{method(e){return a([\"lower\",\"upper\"].includes(e),\"Invalid case:\",e),this.$_addRule({name:\"case\",args:{direction:e}})},validate(e,t,r){let{direction:s}=r;return\"lower\"===s&&e===e.toLocaleLowerCase()||\"upper\"===s&&e===e.toLocaleUpperCase()?e:t.error(\"string.\".concat(s,\"case\"))},convert:!0},creditCard:{method(){return this.$_addRule(\"creditCard\")},validate(e,t){let r=e.length,s=0,n=1;for(;r--;){const t=e.charAt(r)*n;s+=t-9*(t>9),n^=3}return s>0&&s%10==0?e:t.error(\"string.creditCard\")}},dataUri:{method(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return h.assertOptions(e,[\"paddingRequired\"]),e=n({paddingRequired:!0},e),a(\"boolean\"==typeof e.paddingRequired,\"paddingRequired must be boolean\"),this.$_addRule({name:\"dataUri\",args:{options:e}})},validate(e,t,r){let{options:s}=r;const n=e.match(p.dataUriRegex);if(n){if(!n[2])return e;if(\"base64\"!==n[2])return e;if(p.base64Regex[s.paddingRequired].false.test(n[3]))return e}return t.error(\"string.dataUri\")}},domain:{method(e){e&&h.assertOptions(e,[\"allowUnicode\",\"minDomainSegments\",\"tlds\"]);const t=p.addressOptions(e);return this.$_addRule({name:\"domain\",args:{options:e},address:t})},validate(e,t,r,s){let{address:n}=s;return i.isValid(e,n)?e:t.error(\"string.domain\")}},email:{method(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};h.assertOptions(e,[\"allowUnicode\",\"ignoreLength\",\"minDomainSegments\",\"multiple\",\"separator\",\"tlds\"]),a(void 0===e.multiple||\"boolean\"==typeof e.multiple,\"multiple option must be an boolean\");const t=p.addressOptions(e),r=new RegExp(\"\\\\s*[\".concat(e.separator?c(e.separator):\",\",\"]\\\\s*\"));return this.$_addRule({name:\"email\",args:{options:e},regex:r,address:t})},validate(e,t,r,s){let{options:n}=r,{regex:o,address:a}=s;const i=n.multiple?e.split(o):[e],c=[];for(const e of i)l.isValid(e,a)||c.push(e);return c.length?t.error(\"string.email\",{value:e,invalids:c}):e}},guid:{alias:\"uuid\",method(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};h.assertOptions(e,[\"version\"]);let t=\"\";if(e.version){const r=[].concat(e.version);a(r.length>=1,\"version must have at least 1 valid version specified\");const s=new Set;for(let e=0;e<r.length;++e){const n=r[e];a(\"string\"==typeof n,\"version at position \"+e+\" must be a string\");const o=p.guidVersions[n.toLowerCase()];a(o,\"version at position \"+e+\" must be one of \"+Object.keys(p.guidVersions).join(\", \")),a(!s.has(o),\"version at position \"+e+\" must not be a duplicate\"),t+=o,s.add(o)}}const r=new RegExp(\"^([\\\\[{\\\\(]?)[0-9A-F]{8}([:-]?)[0-9A-F]{4}\\\\2?[\".concat(t||\"0-9A-F\",\"][0-9A-F]{3}\\\\2?[\").concat(t?\"89AB\":\"0-9A-F\",\"][0-9A-F]{3}\\\\2?[0-9A-F]{12}([\\\\]}\\\\)]?)$\"),\"i\");return this.$_addRule({name:\"guid\",args:{options:e},regex:r})},validate(e,t,r,s){let{regex:n}=s;const o=n.exec(e);return o?p.guidBrackets[o[1]]!==o[o.length-1]?t.error(\"string.guid\"):e:t.error(\"string.guid\")}},hex:{method(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return h.assertOptions(e,[\"byteAligned\"]),e=n({byteAligned:!1},e),a(\"boolean\"==typeof e.byteAligned,\"byteAligned must be boolean\"),this.$_addRule({name:\"hex\",args:{options:e}})},validate(e,t,r){let{options:s}=r;return p.hexRegex.test(e)?s.byteAligned&&e.length%2!=0?t.error(\"string.hexAlign\"):e:t.error(\"string.hex\")}},hostname:{method(){return this.$_addRule(\"hostname\")},validate:(e,t)=>e.length<=255&&p.hostRegex.test(e)||p.ipRegex.test(e)?e:t.error(\"string.hostname\")},insensitive:{method(){return this.$_setFlag(\"insensitive\",!0)}},ip:{method(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};h.assertOptions(e,[\"cidr\",\"version\"]),e=Object.assign({},e);let t,r=p.ipRegex;if(e.cidr?(a(\"string\"==typeof e.cidr,\"cidr must be a string\"),e.cidr=e.cidr.toLowerCase(),a(p.cidrPresences.includes(e.cidr),\"cidr must be one of \"+p.cidrPresences.join(\", \")),e.version||\"optional\"===e.cidr||(r=m.createIpRegex([\"ipv4\",\"ipv6\",\"ipvfuture\"],e.cidr))):e.cidr=\"optional\",e.version){Array.isArray(e.version)||(e.version=[e.version]),a(e.version.length>=1,\"version must have at least 1 version specified\"),t=[];for(let r=0;r<e.version.length;++r){let s=e.version[r];a(\"string\"==typeof s,\"version at position \"+r+\" must be a string\"),s=s.toLowerCase(),a(m.versions[s],\"version at position \"+r+\" must be one of \"+Object.keys(m.versions).join(\", \")),t.push(s)}t=Array.from(new Set(t)),r=m.createIpRegex(t,e.cidr)}return this.$_addRule({name:\"ip\",args:{options:e},versions:t,regex:r})},validate(e,t,r,s){let{options:n}=r,{versions:o,regex:a}=s;return a.test(e)?e:o?t.error(\"string.ipVersion\",{value:e,cidr:n.cidr,version:o}):t.error(\"string.ip\",{value:e,cidr:n.cidr})}},isoDate:{method(){return this.$_addRule(\"isoDate\")},validate(e,t){let{error:r}=t;return p.isoDate(e)?e:r(\"string.isoDate\")}},isoDuration:{method(){return this.$_addRule(\"isoDuration\")},validate:(e,t)=>p.isoDurationRegex.test(e)?e:t.error(\"string.isoDuration\")},length:{method(e,t){return p.length(this,\"length\",e,\"=\",t)},validate(e,t,r,s){let{limit:n,encoding:o}=r,{name:a,operator:i,args:l}=s;const c=!o&&e.length;return h.compare(c,n,i)?e:t.error(\"string.\"+a,{limit:l.limit,value:e,encoding:o})},args:[{name:\"limit\",ref:!0,assert:h.limit,message:\"must be a positive integer\"},\"encoding\"]},lowercase:{method(){return this.case(\"lower\")}},max:{method(e,t){return p.length(this,\"max\",e,\"<=\",t)},args:[\"limit\",\"encoding\"]},min:{method(e,t){return p.length(this,\"min\",e,\">=\",t)},args:[\"limit\",\"encoding\"]},normalize:{method(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\"NFC\";return a(p.normalizationForms.includes(e),\"normalization form must be one of \"+p.normalizationForms.join(\", \")),this.$_addRule({name:\"normalize\",args:{form:e}})},validate(e,t,r){let{error:s}=t,{form:n}=r;return e===e.normalize(n)?e:s(\"string.normalize\",{value:e,form:n})},convert:!0},pattern:{alias:\"regex\",method(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};a(e instanceof RegExp,\"regex must be a RegExp\"),a(!e.flags.includes(\"g\")&&!e.flags.includes(\"y\"),\"regex should not use global or sticky mode\"),\"string\"==typeof t&&(t={name:t}),h.assertOptions(t,[\"invert\",\"name\"]);const r=[\"string.pattern\",t.invert?\".invert\":\"\",t.name?\".name\":\".base\"].join(\"\");return this.$_addRule({name:\"pattern\",args:{regex:e,options:t},errorCode:r})},validate(e,t,r,s){let{regex:n,options:o}=r,{errorCode:a}=s;return n.test(e)^o.invert?e:t.error(a,{name:o.name,regex:n,value:e})},args:[\"regex\",\"options\"],multi:!0},replace:{method(e,t){\"string\"==typeof e&&(e=new RegExp(c(e),\"g\")),a(e instanceof RegExp,\"pattern must be a RegExp\"),a(\"string\"==typeof t,\"replacement must be a String\");const r=this.clone();return r.$_terms.replacements||(r.$_terms.replacements=[]),r.$_terms.replacements.push({pattern:e,replacement:t}),r}},token:{method(){return this.$_addRule(\"token\")},validate:(e,t)=>/^\\w+$/.test(e)?e:t.error(\"string.token\")},trim:{method(){let e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return a(\"boolean\"==typeof e,\"enabled must be a boolean\"),this.$_addRule({name:\"trim\",args:{enabled:e}})},validate(e,t,r){let{enabled:s}=r;return s&&e!==e.trim()?t.error(\"string.trim\"):e},convert:!0},truncate:{method(){let e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return a(\"boolean\"==typeof e,\"enabled must be a boolean\"),this.$_setFlag(\"truncate\",e)}},uppercase:{method(){return this.case(\"upper\")}},uri:{method(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};h.assertOptions(e,[\"allowRelative\",\"allowQuerySquareBrackets\",\"domain\",\"relativeOnly\",\"scheme\"]),e.domain&&h.assertOptions(e.domain,[\"allowUnicode\",\"minDomainSegments\",\"tlds\"]);const t=d.createRegex(e),r=e.domain?p.addressOptions(e.domain):null;return this.$_addRule({name:\"uri\",args:{options:e},regex:t,domain:r})},validate(e,t,r,s){let{options:n}=r,{regex:o,domain:a}=s;if([\"http:/\",\"https:/\"].includes(e))return t.error(\"string.uri\");const l=o.exec(e);return l?a&&!i.isValid(l[1],a)?t.error(\"string.domain\",{value:l[1]}):e:n.relativeOnly?t.error(\"string.uriRelativeOnly\"):n.scheme?t.error(\"string.uriCustomScheme\",{scheme:o.scheme,value:e}):t.error(\"string.uri\")}}},manifest:{build(e,t){if(t.replacements)for(const r of t.replacements){const{pattern:t,replacement:s}=r;e=e.replace(t,s)}return e}},messages:{\"string.alphanum\":'\"{{#label}}\" must only contain alpha-numeric characters',\"string.base\":'\"{{#label}}\" must be a string',\"string.base64\":'\"{{#label}}\" must be a valid base64 string',\"string.creditCard\":'\"{{#label}}\" must be a credit card',\"string.dataUri\":'\"{{#label}}\" must be a valid dataUri string',\"string.domain\":'\"{{#label}}\" must contain a valid domain name',\"string.email\":'\"{{#label}}\" must be a valid email',\"string.empty\":'\"{{#label}}\" is not allowed to be empty',\"string.guid\":'\"{{#label}}\" must be a valid GUID',\"string.hex\":'\"{{#label}}\" must only contain hexadecimal characters',\"string.hexAlign\":'\"{{#label}}\" hex decoded representation must be byte aligned',\"string.hostname\":'\"{{#label}}\" must be a valid hostname',\"string.ip\":'\"{{#label}}\" must be a valid ip address with a {{#cidr}} CIDR',\"string.ipVersion\":'\"{{#label}}\" must be a valid ip address of one of the following versions {{#version}} with a {{#cidr}} CIDR',\"string.isoDate\":'\"{{#label}}\" must be in iso format',\"string.isoDuration\":'\"{{#label}}\" must be a valid ISO 8601 duration',\"string.length\":'\"{{#label}}\" length must be {{#limit}} characters long',\"string.lowercase\":'\"{{#label}}\" must only contain lowercase characters',\"string.max\":'\"{{#label}}\" length must be less than or equal to {{#limit}} characters long',\"string.min\":'\"{{#label}}\" length must be at least {{#limit}} characters long',\"string.normalize\":'\"{{#label}}\" must be unicode normalized in the {{#form}} form',\"string.token\":'\"{{#label}}\" must only contain alpha-numeric and underscore characters',\"string.pattern.base\":'\"{{#label}}\" with value \"{[.]}\" fails to match the required pattern: {{#regex}}',\"string.pattern.name\":'\"{{#label}}\" with value \"{[.]}\" fails to match the {{#name}} pattern',\"string.pattern.invert.base\":'\"{{#label}}\" with value \"{[.]}\" matches the inverted pattern: {{#regex}}',\"string.pattern.invert.name\":'\"{{#label}}\" with value \"{[.]}\" matches the inverted {{#name}} pattern',\"string.trim\":'\"{{#label}}\" must not have leading or trailing whitespace',\"string.uri\":'\"{{#label}}\" must be a valid uri',\"string.uriCustomScheme\":'\"{{#label}}\" must be a valid uri with a scheme matching the {{#scheme}} pattern',\"string.uriRelativeOnly\":'\"{{#label}}\" must be a valid relative uri',\"string.uppercase\":'\"{{#label}}\" must only contain uppercase characters'}}),p.addressOptions=function(e){if(!e)return e;if(a(void 0===e.minDomainSegments||Number.isSafeInteger(e.minDomainSegments)&&e.minDomainSegments>0,\"minDomainSegments must be a positive integer\"),!1===e.tlds)return e;if(!0===e.tlds||void 0===e.tlds)return a(p.tlds,\"Built-in TLD list disabled\"),Object.assign({},e,p.tlds);a(\"object\"==typeof e.tlds,\"tlds must be true, false, or an object\");const t=e.tlds.deny;if(t)return Array.isArray(t)&&(e=Object.assign({},e,{tlds:{deny:new Set(t)}})),a(e.tlds.deny instanceof Set,\"tlds.deny must be an array, Set, or boolean\"),a(!e.tlds.allow,\"Cannot specify both tlds.allow and tlds.deny lists\"),e;const r=e.tlds.allow;return r?!0===r?(a(p.tlds,\"Built-in TLD list disabled\"),Object.assign({},e,p.tlds)):(Array.isArray(r)&&(e=Object.assign({},e,{tlds:{allow:new Set(r)}})),a(e.tlds.allow instanceof Set,\"tlds.allow must be an array, Set, or boolean\"),e):e},p.isoDate=function(e){if(!h.isIsoDate(e))return null;const t=new Date(e);return isNaN(t.getTime())?null:t.toISOString()},p.length=function(e,t,r,s,n){return a(!n||!1,\"Invalid encoding:\",n),e.$_addRule({name:t,method:\"length\",args:{limit:r,encoding:n},operator:s})}},function(e,t,r){\"use strict\";const s=r(24),n=r(23),o={nonAsciiRx:/[^\\x00-\\x7f]/,encoder:new(s.TextEncoder||TextEncoder)};t.analyze=function(e,t){return o.email(e,t)},t.isValid=function(e,t){return!o.email(e,t)},o.email=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(\"string\"!=typeof e)throw new Error(\"Invalid input: email must be a string\");if(!e)return{error:\"Address must be a non-empty string\"};const r=!o.nonAsciiRx.test(e);if(!r){if(!1===t.allowUnicode)return{error:\"Address contains forbidden Unicode characters\"};e=e.normalize(\"NFC\")}const s=e.split(\"@\");if(2!==s.length)return{error:s.length>2?\"Address cannot contain more than one @ character\":\"Address must contain one @ character\"};const[a,i]=s;if(!a)return{error:\"Address local part cannot be empty\"};if(!t.ignoreLength){if(e.length>254)return{error:\"Address too long\"};if(o.encoder.encode(a).length>64)return{error:\"Address local part too long\"}}return o.local(a,r)||n.analyze(i,t)},o.local=function(e,t){const r=e.split(\".\");for(const e of r){if(!e.length)return{error:\"Address local part contains empty dot-separated segment\"};if(t){if(!o.atextRx.test(e))return{error:\"Address local part contains invalid character\"}}else for(const t of e){if(o.atextRx.test(t))continue;const e=o.binary(t);if(!o.atomRx.test(e))return{error:\"Address local part contains invalid character\"}}}},o.binary=function(e){return Array.from(o.encoder.encode(e)).map(e=>String.fromCharCode(e)).join(\"\")},o.atextRx=/^[\\w!#\\$%&'\\*\\+\\-\\/=\\?\\^`\\{\\|\\}~]+$/,o.atomRx=new RegExp([\"(?:[\\\\xc2-\\\\xdf][\\\\x80-\\\\xbf])\",\"(?:\\\\xe0[\\\\xa0-\\\\xbf][\\\\x80-\\\\xbf])|(?:[\\\\xe1-\\\\xec][\\\\x80-\\\\xbf]{2})|(?:\\\\xed[\\\\x80-\\\\x9f][\\\\x80-\\\\xbf])|(?:[\\\\xee-\\\\xef][\\\\x80-\\\\xbf]{2})\",\"(?:\\\\xf0[\\\\x90-\\\\xbf][\\\\x80-\\\\xbf]{2})|(?:[\\\\xf1-\\\\xf3][\\\\x80-\\\\xbf]{3})|(?:\\\\xf4[\\\\x80-\\\\x8f][\\\\x80-\\\\xbf]{2})\"].join(\"|\"))},function(e,t){},function(e,t,r){\"use strict\";const s=r(26);t.cidrs={ipv4:{required:\"\\\\/(?:\"+s.ipv4Cidr+\")\",optional:\"(?:\\\\/(?:\"+s.ipv4Cidr+\"))?\",forbidden:\"\"},ipv6:{required:\"\\\\/\"+s.ipv6Cidr,optional:\"(?:\\\\/\"+s.ipv6Cidr+\")?\",forbidden:\"\"},ipvfuture:{required:\"\\\\/\"+s.ipv6Cidr,optional:\"(?:\\\\/\"+s.ipv6Cidr+\")?\",forbidden:\"\"}},t.versions={ipv4:s.ipv4address,ipv6:s.ipv6address,ipvfuture:s.ipvFuture},t.createIpRegex=function(e,r){const s=e.map(e=>t.versions[e]+t.cidrs[e][r]);return new RegExp(\"^(?:\"+s.join(\"|\")+\")$\")}},function(e,t,r){\"use strict\";const s=r(0),n=r(3),o={};o.Map=class extends Map{slice(){return new o.Map(this)}},e.exports=n.extend({type:\"symbol\",terms:{map:{init:new o.Map}},coerce:{method(e,t){let{schema:r,error:s}=t;const n=r.$_terms.map.get(e);return n&&(e=n),r._flags.only&&\"symbol\"!=typeof e?{value:e,errors:s(\"symbol.map\",{map:r.$_terms.map})}:{value:e}}},validate(e,t){let{error:r}=t;if(\"symbol\"!=typeof e)return{value:e,errors:r(\"symbol.base\")}},rules:{map:{method(e){e&&!e[Symbol.iterator]&&\"object\"==typeof e&&(e=Object.entries(e)),s(e&&e[Symbol.iterator],\"Iterable must be an iterable or object\");const t=this.clone(),r=[];for(const n of e){s(n&&n[Symbol.iterator],\"Entry must be an iterable\");const[e,o]=n;s(\"object\"!=typeof e&&\"function\"!=typeof e&&\"symbol\"!=typeof e,\"Key must not be of type object, function, or Symbol\"),s(\"symbol\"==typeof o,\"Value must be a Symbol\"),t.$_terms.map.set(e,o),r.push(o)}return t.valid(...r)}}},manifest:{build:(e,t)=>(t.map&&(e=e.map(t.map)),e)},messages:{\"symbol.base\":'\"{{#label}}\" must be a symbol',\"symbol.map\":'\"{{#label}}\" must be one of {{#map}}'}})}])}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGhhcGkvam9pL2Rpc3Qvam9pLWJyb3dzZXIubWluLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BoYXBpL2pvaS9kaXN0L2pvaS1icm93c2VyLm1pbi5qcz83MjRlIl0sInNvdXJjZXNDb250ZW50IjpbIiFmdW5jdGlvbihlLHQpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPXQoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtdLHQpOlwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzP2V4cG9ydHMuam9pPXQoKTplLmpvaT10KCl9KHdpbmRvdywoZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHQ9e307ZnVuY3Rpb24gcihzKXtpZih0W3NdKXJldHVybiB0W3NdLmV4cG9ydHM7dmFyIG49dFtzXT17aTpzLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIGVbc10uY2FsbChuLmV4cG9ydHMsbixuLmV4cG9ydHMsciksbi5sPSEwLG4uZXhwb3J0c31yZXR1cm4gci5tPWUsci5jPXQsci5kPWZ1bmN0aW9uKGUsdCxzKXtyLm8oZSx0KXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7ZW51bWVyYWJsZTohMCxnZXQ6c30pfSxyLnI9ZnVuY3Rpb24oZSl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiTW9kdWxlXCJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX0sci50PWZ1bmN0aW9uKGUsdCl7aWYoMSZ0JiYoZT1yKGUpKSw4JnQpcmV0dXJuIGU7aWYoNCZ0JiZcIm9iamVjdFwiPT10eXBlb2YgZSYmZSYmZS5fX2VzTW9kdWxlKXJldHVybiBlO3ZhciBzPU9iamVjdC5jcmVhdGUobnVsbCk7aWYoci5yKHMpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzLFwiZGVmYXVsdFwiLHtlbnVtZXJhYmxlOiEwLHZhbHVlOmV9KSwyJnQmJlwic3RyaW5nXCIhPXR5cGVvZiBlKWZvcih2YXIgbiBpbiBlKXIuZChzLG4sZnVuY3Rpb24odCl7cmV0dXJuIGVbdF19LmJpbmQobnVsbCxuKSk7cmV0dXJuIHN9LHIubj1mdW5jdGlvbihlKXt2YXIgdD1lJiZlLl9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gZS5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiBlfTtyZXR1cm4gci5kKHQsXCJhXCIsdCksdH0sci5vPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfSxyLnA9XCJcIixyKHIucz0xMil9KFtmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7Y29uc3Qgcz1yKDEzKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7aWYoIWUpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLHI9bmV3IEFycmF5KHQ+MT90LTE6MCksbj0xO248dDtuKyspcltuLTFdPWFyZ3VtZW50c1tuXTtpZigxPT09ci5sZW5ndGgmJnJbMF1pbnN0YW5jZW9mIEVycm9yKXRocm93IHJbMF07dGhyb3cgbmV3IHMocil9fX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2NvbnN0IHM9cigwKSxuPXIoMTMpLG89cigyOCk7bGV0IGEsaTtjb25zdCBsPXtpc29EYXRlOi9eKD86Wy0rXVxcZHsyfSk/KD86XFxkezR9KD8hXFxkezJ9XFxiKSkoPzooLT8pKD86KD86MFsxLTldfDFbMC0yXSkoPzpcXDEoPzpbMTJdXFxkfDBbMS05XXwzWzAxXSkpP3xXKD86WzAtNF1cXGR8NVswLTJdKSg/Oi0/WzEtN10pP3woPzowMFsxLTldfDBbMS05XVxcZHxbMTJdXFxkezJ9fDMoPzpbMC01XVxcZHw2WzEtNl0pKSkoPyFbVF0kfFtUXVtcXGRdK1okKSg/OltUXFxzXSg/Oig/Oig/OlswMV1cXGR8MlswLTNdKSg/Oig6PylbMC01XVxcZCk/fDI0XFw6PzAwKSg/OlsuLF1cXGQrKD8hOikpPykoPzpcXDJbMC01XVxcZCg/OlsuLF1cXGQrKT8pPyg/OltaXXwoPzpbKy1dKSg/OlswMV1cXGR8MlswLTNdKSg/Ojo/WzAtNV1cXGQpPyk/KT8pPyQvfTt0LnZlcnNpb249by52ZXJzaW9uLHQuZGVmYXVsdHM9e2Fib3J0RWFybHk6ITAsYWxsb3dVbmtub3duOiExLGNhY2hlOiEwLGNvbnRleHQ6bnVsbCxjb252ZXJ0OiEwLGRhdGVGb3JtYXQ6XCJpc29cIixlcnJvcnM6e2VzY2FwZUh0bWw6ITEsbGFiZWw6XCJwYXRoXCIsbGFuZ3VhZ2U6bnVsbCxyZW5kZXI6ITAsc3RhY2s6ITEsd3JhcEFycmF5czohMH0sZXh0ZXJuYWxzOiEwLG1lc3NhZ2VzOnt9LG5vbkVudW1lcmFibGVzOiExLG5vRGVmYXVsdHM6ITEscHJlc2VuY2U6XCJvcHRpb25hbFwiLHNraXBGdW5jdGlvbnM6ITEsc3RyaXBVbmtub3duOiExLHdhcm5pbmdzOiExfSx0LnN5bWJvbHM9e2FueTpTeW1ib2wuZm9yKFwiQGhhcGkvam9pL3NjaGVtYVwiKSxhcnJheVNpbmdsZTpTeW1ib2woXCJhcnJheVNpbmdsZVwiKSxkZWVwRGVmYXVsdDpTeW1ib2woXCJkZWVwRGVmYXVsdFwiKSxsaXRlcmFsOlN5bWJvbChcImxpdGVyYWxcIiksb3ZlcnJpZGU6U3ltYm9sKFwib3ZlcnJpZGVcIikscHJlZnM6U3ltYm9sKFwicHJlZnNcIikscmVmOlN5bWJvbChcInJlZlwiKSx2YWx1ZXM6U3ltYm9sKFwidmFsdWVzXCIpLHRlbXBsYXRlOlN5bWJvbChcInRlbXBsYXRlXCIpfSx0LmFzc2VydE9wdGlvbnM9ZnVuY3Rpb24oZSx0KXtsZXQgcj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06XCJPcHRpb25zXCI7cyhlJiZcIm9iamVjdFwiPT10eXBlb2YgZSYmIUFycmF5LmlzQXJyYXkoZSksXCJPcHRpb25zIG11c3QgYmUgb2YgdHlwZSBvYmplY3RcIik7Y29uc3Qgbj1PYmplY3Qua2V5cyhlKS5maWx0ZXIoZT0+IXQuaW5jbHVkZXMoZSkpO3MoMD09PW4ubGVuZ3RoLFwiXCIuY29uY2F0KHIsXCIgY29udGFpbiB1bmtub3duIGtleXM6IFwiKS5jb25jYXQobikpfSx0LmNoZWNrUHJlZmVyZW5jZXM9ZnVuY3Rpb24oZSl7Y29uc3QgdD0oaT1pfHxyKDE2KSkucHJlZmVyZW5jZXMudmFsaWRhdGUoZSk7aWYodC5lcnJvcil0aHJvdyBuZXcgbihbdC5lcnJvci5kZXRhaWxzWzBdLm1lc3NhZ2VdKX0sdC5jb21wYXJlPWZ1bmN0aW9uKGUsdCxyKXtzd2l0Y2gocil7Y2FzZVwiPVwiOnJldHVybiBlPT09dDtjYXNlXCI+XCI6cmV0dXJuIGU+dDtjYXNlXCI8XCI6cmV0dXJuIGU8dDtjYXNlXCI+PVwiOnJldHVybiBlPj10O2Nhc2VcIjw9XCI6cmV0dXJuIGU8PXR9fSx0LmRlZmF1bHQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdm9pZCAwPT09ZT90OmV9LHQuaXNJc29EYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBsLmlzb0RhdGUudGVzdChlKX0sdC5pc051bWJlcj1mdW5jdGlvbihlKXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgZSYmIWlzTmFOKGUpfSx0LmlzUmVzb2x2YWJsZT1mdW5jdGlvbihlKXtyZXR1cm4hIWUmJihlW3Quc3ltYm9scy5yZWZdfHxlW3Quc3ltYm9scy50ZW1wbGF0ZV0pfSx0LmlzU2NoZW1hPWZ1bmN0aW9uKGUpe2xldCByPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp7fTtjb25zdCBuPWUmJmVbdC5zeW1ib2xzLmFueV07cmV0dXJuISFuJiYocyhyLmxlZ2FjeXx8bi52ZXJzaW9uPT09dC52ZXJzaW9uLFwiQ2Fubm90IG1peCBkaWZmZXJlbnQgdmVyc2lvbnMgb2Ygam9pIHNjaGVtYXNcIiksITApfSx0LmlzVmFsdWVzPWZ1bmN0aW9uKGUpe3JldHVybiBlW3Quc3ltYm9scy52YWx1ZXNdfSx0LmxpbWl0PWZ1bmN0aW9uKGUpe3JldHVybiBOdW1iZXIuaXNTYWZlSW50ZWdlcihlKSYmZT49MH0sdC5wcmVmZXJlbmNlcz1mdW5jdGlvbihlLHMpe2E9YXx8cig5KSxlPWV8fHt9LHM9c3x8e307Y29uc3Qgbj1PYmplY3QuYXNzaWduKHt9LGUscyk7cmV0dXJuIHMuZXJyb3JzJiZlLmVycm9ycyYmKG4uZXJyb3JzPU9iamVjdC5hc3NpZ24oe30sZS5lcnJvcnMscy5lcnJvcnMpKSxzLm1lc3NhZ2VzJiYobi5tZXNzYWdlcz1hLmNvbXBpbGUocy5tZXNzYWdlcyxlLm1lc3NhZ2VzKSksZGVsZXRlIG5bdC5zeW1ib2xzLnByZWZzXSxufSx0LnRyeVdpdGhQYXRoPWZ1bmN0aW9uKGUsdCl7bGV0IHI9YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOnt9O3RyeXtyZXR1cm4gZSgpfWNhdGNoKGUpe3Rocm93IHZvaWQgMCE9PWUucGF0aD9lLnBhdGg9dCtcIi5cIitlLnBhdGg6ZS5wYXRoPXQsci5hcHBlbmQmJihlLm1lc3NhZ2U9XCJcIi5jb25jYXQoZS5tZXNzYWdlLFwiIChcIikuY29uY2F0KGUucGF0aCxcIilcIikpLGV9fSx0LnZhbGlkYXRlQXJnPWZ1bmN0aW9uKGUscixzKXtsZXR7YXNzZXJ0Om4sbWVzc2FnZTpvfT1zO2lmKHQuaXNTY2hlbWEobikpe2NvbnN0IHQ9bi52YWxpZGF0ZShlKTtpZighdC5lcnJvcilyZXR1cm47cmV0dXJuIHQuZXJyb3IubWVzc2FnZX1pZighbihlKSlyZXR1cm4gcj9cIlwiLmNvbmNhdChyLFwiIFwiKS5jb25jYXQobyk6b30sdC52ZXJpZnlGbGF0PWZ1bmN0aW9uKGUsdCl7Zm9yKGNvbnN0IHIgb2YgZSlzKCFBcnJheS5pc0FycmF5KHIpLFwiTWV0aG9kIG5vIGxvbmdlciBhY2NlcHRzIGFycmF5IGFyZ3VtZW50czpcIix0KX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtjb25zdCBzPXIoMTQpLG49cigxMCksbz17bmVlZHNQcm90b0hhY2s6bmV3IFNldChbcy5zZXQscy5tYXAscy53ZWFrU2V0LHMud2Vha01hcF0pfTtlLmV4cG9ydHM9by5jbG9uZT1mdW5jdGlvbihlKXtsZXQgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06e30scj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtpZihcIm9iamVjdFwiIT10eXBlb2YgZXx8bnVsbD09PWUpcmV0dXJuIGU7bGV0IGE9by5jbG9uZSxpPXI7aWYodC5zaGFsbG93KXtpZighMCE9PXQuc2hhbGxvdylyZXR1cm4gby5jbG9uZVdpdGhTaGFsbG93KGUsdCk7YT1lPT5lfWVsc2V7Y29uc3QgdD0oaT1pfHxuZXcgTWFwKS5nZXQoZSk7aWYodClyZXR1cm4gdH1jb25zdCBsPXMuZ2V0SW50ZXJuYWxQcm90byhlKTtpZihsPT09cy5idWZmZXIpcmV0dXJuITE7aWYobD09PXMuZGF0ZSlyZXR1cm4gbmV3IERhdGUoZS5nZXRUaW1lKCkpO2lmKGw9PT1zLnJlZ2V4KXJldHVybiBuZXcgUmVnRXhwKGUpO2NvbnN0IGM9by5iYXNlKGUsbCx0KTtpZihjPT09ZSlyZXR1cm4gZTtpZihpJiZpLnNldChlLGMpLGw9PT1zLnNldClmb3IoY29uc3QgciBvZiBlKWMuYWRkKGEocix0LGkpKTtlbHNlIGlmKGw9PT1zLm1hcClmb3IoY29uc3RbcixzXW9mIGUpYy5zZXQocixhKHMsdCxpKSk7Y29uc3QgdT1uLmtleXMoZSx0KTtmb3IoY29uc3QgciBvZiB1KXtpZihsPT09cy5hcnJheSYmXCJsZW5ndGhcIj09PXIpe2MubGVuZ3RoPWUubGVuZ3RoO2NvbnRpbnVlfWNvbnN0IG49T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLHIpO24/bi5nZXR8fG4uc2V0P09iamVjdC5kZWZpbmVQcm9wZXJ0eShjLHIsbik6bi5lbnVtZXJhYmxlP2Nbcl09YShlW3JdLHQsaSk6T2JqZWN0LmRlZmluZVByb3BlcnR5KGMscix7ZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITAsdmFsdWU6YShlW3JdLHQsaSl9KTpPYmplY3QuZGVmaW5lUHJvcGVydHkoYyxyLHtlbnVtZXJhYmxlOiEwLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx2YWx1ZTphKGVbcl0sdCxpKX0pfXJldHVybiBjfSxvLmNsb25lV2l0aFNoYWxsb3c9ZnVuY3Rpb24oZSx0KXtjb25zdCByPXQuc2hhbGxvdzsodD1PYmplY3QuYXNzaWduKHt9LHQpKS5zaGFsbG93PSExO2NvbnN0IHM9bi5zdG9yZShlLHIpLGE9by5jbG9uZShlLHQpO3JldHVybiBuLnJlc3RvcmUoYSxlLHMpLGF9LG8uYmFzZT1mdW5jdGlvbihlLHQscil7aWYodD09PXMuYXJyYXkpcmV0dXJuW107aWYoITE9PT1yLnByb3RvdHlwZSlyZXR1cm4gby5uZWVkc1Byb3RvSGFjay5oYXModCk/bmV3IHQuY29uc3RydWN0b3I6e307Y29uc3Qgbj1PYmplY3QuZ2V0UHJvdG90eXBlT2YoZSk7aWYobiYmbi5pc0ltbXV0YWJsZSlyZXR1cm4gZTtpZihvLm5lZWRzUHJvdG9IYWNrLmhhcyh0KSl7Y29uc3QgZT1uZXcgbi5jb25zdHJ1Y3RvcjtyZXR1cm4gbiE9PXQmJk9iamVjdC5zZXRQcm90b3R5cGVPZihlLG4pLGV9cmV0dXJuIE9iamVjdC5jcmVhdGUobil9fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7Y29uc3Qgcz1yKDApLG49cigzMiksbz1yKDEpLGE9cig5KTtlLmV4cG9ydHM9bi5leHRlbmQoe3R5cGU6XCJhbnlcIixmbGFnczp7b25seTp7ZGVmYXVsdDohMX19LHRlcm1zOnthbHRlcmF0aW9uczp7aW5pdDpudWxsfSxleGFtcGxlczp7aW5pdDpudWxsfSxleHRlcm5hbHM6e2luaXQ6bnVsbH0sbWV0YXM6e2luaXQ6W119LG5vdGVzOntpbml0OltdfSxzaGFyZWQ6e2luaXQ6bnVsbH0sdGFnczp7aW5pdDpbXX0sd2hlbnM6e2luaXQ6bnVsbH19LHJ1bGVzOntjdXN0b206e21ldGhvZChlLHQpe3JldHVybiBzKFwiZnVuY3Rpb25cIj09dHlwZW9mIGUsXCJNZXRob2QgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpLHModm9pZCAwPT09dHx8dCYmXCJzdHJpbmdcIj09dHlwZW9mIHQsXCJEZXNjcmlwdGlvbiBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZ1wiKSx0aGlzLiRfYWRkUnVsZSh7bmFtZTpcImN1c3RvbVwiLGFyZ3M6e21ldGhvZDplLGRlc2NyaXB0aW9uOnR9fSl9LHZhbGlkYXRlKGUsdCxyKXtsZXR7bWV0aG9kOnN9PXI7dHJ5e3JldHVybiBzKGUsdCl9Y2F0Y2goZSl7cmV0dXJuIHQuZXJyb3IoXCJhbnkuY3VzdG9tXCIse2Vycm9yOmV9KX19LGFyZ3M6W1wibWV0aG9kXCIsXCJkZXNjcmlwdGlvblwiXSxtdWx0aTohMH0sbWVzc2FnZXM6e21ldGhvZChlKXtyZXR1cm4gdGhpcy5wcmVmcyh7bWVzc2FnZXM6ZX0pfX0sc2hhcmVkOnttZXRob2QoZSl7cyhvLmlzU2NoZW1hKGUpJiZlLl9mbGFncy5pZCxcIlNjaGVtYSBtdXN0IGJlIGEgc2NoZW1hIHdpdGggYW4gaWRcIik7Y29uc3QgdD10aGlzLmNsb25lKCk7cmV0dXJuIHQuJF90ZXJtcy5zaGFyZWQ9dC4kX3Rlcm1zLnNoYXJlZHx8W10sdC4kX3Rlcm1zLnNoYXJlZC5wdXNoKGUpLHQuJF9tdXRhdGVSZWdpc3RlcihlKSx0fX0sd2FybmluZzp7bWV0aG9kKGUsdCl7cmV0dXJuIHMoZSYmXCJzdHJpbmdcIj09dHlwZW9mIGUsXCJJbnZhbGlkIHdhcm5pbmcgY29kZVwiKSx0aGlzLiRfYWRkUnVsZSh7bmFtZTpcIndhcm5pbmdcIixhcmdzOntjb2RlOmUsbG9jYWw6dH0sd2FybjohMH0pfSx2YWxpZGF0ZShlLHQscil7bGV0e2NvZGU6cyxsb2NhbDpufT1yO3JldHVybiB0LmVycm9yKHMsbil9LGFyZ3M6W1wiY29kZVwiLFwibG9jYWxcIl0sbXVsdGk6ITB9fSxtb2RpZmllcnM6e2tlZXAoZSl7bGV0IHQ9IShhcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXSl8fGFyZ3VtZW50c1sxXTtlLmtlZXA9dH0sbWVzc2FnZShlLHQpe2UubWVzc2FnZT1hLmNvbXBpbGUodCl9LHdhcm4oZSl7bGV0IHQ9IShhcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXSl8fGFyZ3VtZW50c1sxXTtlLndhcm49dH19LG1hbmlmZXN0OntidWlsZChlLHQpe2Zvcihjb25zdCByIGluIHQpe2NvbnN0IHM9dFtyXTtpZihbXCJleGFtcGxlc1wiLFwiZXh0ZXJuYWxzXCIsXCJtZXRhc1wiLFwibm90ZXNcIixcInRhZ3NcIl0uaW5jbHVkZXMocikpZm9yKGNvbnN0IHQgb2YgcyllPWVbci5zbGljZSgwLC0xKV0odCk7ZWxzZSBpZihcImFsdGVyYXRpb25zXCIhPT1yKWlmKFwid2hlbnNcIiE9PXIpe2lmKFwic2hhcmVkXCI9PT1yKWZvcihjb25zdCB0IG9mIHMpZT1lLnNoYXJlZCh0KX1lbHNlIGZvcihjb25zdCB0IG9mIHMpe2NvbnN0e3JlZjpyLGlzOnMsbm90Om4sdGhlbjpvLG90aGVyd2lzZTphLGNvbmNhdDppfT10O2U9aT9lLmNvbmNhdChpKTpyP2Uud2hlbihyLHtpczpzLG5vdDpuLHRoZW46byxvdGhlcndpc2U6YSxzd2l0Y2g6dC5zd2l0Y2gsYnJlYWs6dC5icmVha30pOmUud2hlbihzLHt0aGVuOm8sb3RoZXJ3aXNlOmEsYnJlYWs6dC5icmVha30pfWVsc2V7Y29uc3QgdD17fTtmb3IoY29uc3QgZSBvZiBzKXtjb25zdHt0YXJnZXQ6cixhZGp1c3RlcjpzfT1lO3Rbcl09c31lPWUuYWx0ZXIodCl9fXJldHVybiBlfX0sbWVzc2FnZXM6e1wiYW55LmN1c3RvbVwiOidcInt7I2xhYmVsfX1cIiBmYWlsZWQgY3VzdG9tIHZhbGlkYXRpb24gYmVjYXVzZSB7eyNlcnJvci5tZXNzYWdlfX0nLFwiYW55LmRlZmF1bHRcIjonXCJ7eyNsYWJlbH19XCIgdGhyZXcgYW4gZXJyb3Igd2hlbiBydW5uaW5nIGRlZmF1bHQgbWV0aG9kJyxcImFueS5mYWlsb3ZlclwiOidcInt7I2xhYmVsfX1cIiB0aHJldyBhbiBlcnJvciB3aGVuIHJ1bm5pbmcgZmFpbG92ZXIgbWV0aG9kJyxcImFueS5pbnZhbGlkXCI6J1wie3sjbGFiZWx9fVwiIGNvbnRhaW5zIGFuIGludmFsaWQgdmFsdWUnLFwiYW55Lm9ubHlcIjonXCJ7eyNsYWJlbH19XCIgbXVzdCBiZSB7aWYoI3ZhbGlkcy5sZW5ndGggPT0gMSwgXCJcIiwgXCJvbmUgb2YgXCIpfXt7I3ZhbGlkc319JyxcImFueS5yZWZcIjonXCJ7eyNsYWJlbH19XCIge3sjYXJnfX0gcmVmZXJlbmNlcyBcInt7I3JlZn19XCIgd2hpY2gge3sjcmVhc29ufX0nLFwiYW55LnJlcXVpcmVkXCI6J1wie3sjbGFiZWx9fVwiIGlzIHJlcXVpcmVkJyxcImFueS51bmtub3duXCI6J1wie3sjbGFiZWx9fVwiIGlzIG5vdCBhbGxvd2VkJ319KX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2NvbnN0IHM9cigyKSxuPXIoMSksbz1yKDYpLGE9e2Fubm90YXRpb25zOlN5bWJvbChcImFubm90YXRpb25zXCIpfTt0LlJlcG9ydD1jbGFzc3tjb25zdHJ1Y3RvcihlLHIscyxuLG8sYSxpKXtpZih0aGlzLmNvZGU9ZSx0aGlzLmZsYWdzPW4sdGhpcy5tZXNzYWdlcz1vLHRoaXMucGF0aD1hLnBhdGgsdGhpcy5wcmVmcz1pLHRoaXMuc3RhdGU9YSx0aGlzLnZhbHVlPXIsdGhpcy5tZXNzYWdlPW51bGwsdGhpcy50ZW1wbGF0ZT1udWxsLHRoaXMubG9jYWw9c3x8e30sdGhpcy5sb2NhbC5sYWJlbD10LmxhYmVsKHRoaXMuZmxhZ3MsdGhpcy5zdGF0ZSx0aGlzLnByZWZzLHRoaXMubWVzc2FnZXMpLHZvaWQgMD09PXRoaXMudmFsdWV8fHRoaXMubG9jYWwuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8KHRoaXMubG9jYWwudmFsdWU9dGhpcy52YWx1ZSksdGhpcy5wYXRoLmxlbmd0aCl7Y29uc3QgZT10aGlzLnBhdGhbdGhpcy5wYXRoLmxlbmd0aC0xXTtcIm9iamVjdFwiIT10eXBlb2YgZSYmKHRoaXMubG9jYWwua2V5PWUpfX1fc2V0VGVtcGxhdGUoZSl7aWYodGhpcy50ZW1wbGF0ZT1lLCF0aGlzLmZsYWdzLmxhYmVsJiYwPT09dGhpcy5wYXRoLmxlbmd0aCl7Y29uc3QgZT10aGlzLl90ZW1wbGF0ZSh0aGlzLnRlbXBsYXRlLFwicm9vdFwiKTtlJiYodGhpcy5sb2NhbC5sYWJlbD1lKX19dG9TdHJpbmcoKXtpZih0aGlzLm1lc3NhZ2UpcmV0dXJuIHRoaXMubWVzc2FnZTtjb25zdCBlPXRoaXMuY29kZTtpZighdGhpcy5wcmVmcy5lcnJvcnMucmVuZGVyKXJldHVybiB0aGlzLmNvZGU7Y29uc3QgdD10aGlzLl90ZW1wbGF0ZSh0aGlzLnRlbXBsYXRlKXx8dGhpcy5fdGVtcGxhdGUodGhpcy5wcmVmcy5tZXNzYWdlcyl8fHRoaXMuX3RlbXBsYXRlKHRoaXMubWVzc2FnZXMpO3JldHVybiB2b2lkIDA9PT10PydFcnJvciBjb2RlIFwiJy5jb25jYXQoZSwnXCIgaXMgbm90IGRlZmluZWQsIHlvdXIgY3VzdG9tIHR5cGUgaXMgbWlzc2luZyB0aGUgY29ycmVjdCBtZXNzYWdlcyBkZWZpbml0aW9uJyk6KHRoaXMubWVzc2FnZT10LnJlbmRlcih0aGlzLnZhbHVlLHRoaXMuc3RhdGUsdGhpcy5wcmVmcyx0aGlzLmxvY2FsLHtlcnJvcnM6dGhpcy5wcmVmcy5lcnJvcnMsbWVzc2FnZXM6W3RoaXMucHJlZnMubWVzc2FnZXMsdGhpcy5tZXNzYWdlc119KSx0aGlzLnByZWZzLmVycm9ycy5sYWJlbHx8KHRoaXMubWVzc2FnZT10aGlzLm1lc3NhZ2UucmVwbGFjZSgvXlwiXCIgLyxcIlwiKS50cmltKCkpLHRoaXMubWVzc2FnZSl9X3RlbXBsYXRlKGUscil7cmV0dXJuIHQudGVtcGxhdGUodGhpcy52YWx1ZSxlLHJ8fHRoaXMuY29kZSx0aGlzLnN0YXRlLHRoaXMucHJlZnMpfX0sdC5wYXRoPWZ1bmN0aW9uKGUpe2xldCB0PVwiXCI7Zm9yKGNvbnN0IHIgb2YgZSlcIm9iamVjdFwiIT10eXBlb2YgciYmKFwic3RyaW5nXCI9PXR5cGVvZiByPyh0JiYodCs9XCIuXCIpLHQrPXIpOnQrPVwiW1wiLmNvbmNhdChyLFwiXVwiKSk7cmV0dXJuIHR9LHQudGVtcGxhdGU9ZnVuY3Rpb24oZSx0LHIscyxhKXtpZighdClyZXR1cm47aWYoby5pc1RlbXBsYXRlKHQpKXJldHVyblwicm9vdFwiIT09cj90Om51bGw7bGV0IGk9YS5lcnJvcnMubGFuZ3VhZ2U7cmV0dXJuIG4uaXNSZXNvbHZhYmxlKGkpJiYoaT1pLnJlc29sdmUoZSxzLGEpKSxpJiZ0W2ldJiZ2b2lkIDAhPT10W2ldW3JdP3RbaV1bcl06dFtyXX0sdC5sYWJlbD1mdW5jdGlvbihlLHIscyxuKXtpZihlLmxhYmVsKXJldHVybiBlLmxhYmVsO2lmKCFzLmVycm9ycy5sYWJlbClyZXR1cm5cIlwiO2xldCBvPXIucGF0aDtyZXR1cm5cImtleVwiPT09cy5lcnJvcnMubGFiZWwmJnIucGF0aC5sZW5ndGg+MSYmKG89ci5wYXRoLnNsaWNlKC0xKSksdC5wYXRoKG8pfHx0LnRlbXBsYXRlKG51bGwscy5tZXNzYWdlcyxcInJvb3RcIixyLHMpfHxuJiZ0LnRlbXBsYXRlKG51bGwsbixcInJvb3RcIixyLHMpfHxcInZhbHVlXCJ9LHQucHJvY2Vzcz1mdW5jdGlvbihlLHIscyl7aWYoIWUpcmV0dXJuIG51bGw7Y29uc3R7b3ZlcnJpZGU6bixtZXNzYWdlOm8sZGV0YWlsczphfT10LmRldGFpbHMoZSk7aWYobilyZXR1cm4gbjtpZihzLmVycm9ycy5zdGFjaylyZXR1cm4gbmV3IHQuVmFsaWRhdGlvbkVycm9yKG8sYSxyKTtjb25zdCBpPUVycm9yLnN0YWNrVHJhY2VMaW1pdDtFcnJvci5zdGFja1RyYWNlTGltaXQ9MDtjb25zdCBsPW5ldyB0LlZhbGlkYXRpb25FcnJvcihvLGEscik7cmV0dXJuIEVycm9yLnN0YWNrVHJhY2VMaW1pdD1pLGx9LHQuZGV0YWlscz1mdW5jdGlvbihlKXtsZXQgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06e30scj1bXTtjb25zdCBzPVtdO2Zvcihjb25zdCBuIG9mIGUpe2lmKG4gaW5zdGFuY2VvZiBFcnJvcil7aWYoITEhPT10Lm92ZXJyaWRlKXJldHVybntvdmVycmlkZTpufTtjb25zdCBlPW4udG9TdHJpbmcoKTtyLnB1c2goZSkscy5wdXNoKHttZXNzYWdlOmUsdHlwZTpcIm92ZXJyaWRlXCIsY29udGV4dDp7ZXJyb3I6bn19KTtjb250aW51ZX1jb25zdCBlPW4udG9TdHJpbmcoKTtyLnB1c2goZSkscy5wdXNoKHttZXNzYWdlOmUscGF0aDpuLnBhdGguZmlsdGVyKGU9Plwib2JqZWN0XCIhPXR5cGVvZiBlKSx0eXBlOm4uY29kZSxjb250ZXh0Om4ubG9jYWx9KX1yZXR1cm4gci5sZW5ndGg+MSYmKHI9Wy4uLm5ldyBTZXQocildKSx7bWVzc2FnZTpyLmpvaW4oXCIuIFwiKSxkZXRhaWxzOnN9fSx0LlZhbGlkYXRpb25FcnJvcj1jbGFzcyBleHRlbmRzIEVycm9ye2NvbnN0cnVjdG9yKGUsdCxyKXtzdXBlcihlKSx0aGlzLl9vcmlnaW5hbD1yLHRoaXMuZGV0YWlscz10fWFubm90YXRlKGUpe2lmKCF0aGlzLl9vcmlnaW5hbHx8XCJvYmplY3RcIiE9dHlwZW9mIHRoaXMuX29yaWdpbmFsKXJldHVybiB0aGlzLmRldGFpbHNbMF0ubWVzc2FnZTtjb25zdCB0PWU/XCJcIjpcIlx1MDAxYlszMW1cIixyPWU/XCJcIjpcIlx1MDAxYls0MW1cIixvPWU/XCJcIjpcIlx1MDAxYlswbVwiLGk9cyh0aGlzLl9vcmlnaW5hbCk7Zm9yKGxldCBlPXRoaXMuZGV0YWlscy5sZW5ndGgtMTtlPj0wOy0tZSl7Y29uc3QgdD1lKzEscj10aGlzLmRldGFpbHNbZV0scz1yLnBhdGg7bGV0IG89aTtmb3IobGV0IGU9MDs7KytlKXtjb25zdCBpPXNbZV07aWYobi5pc1NjaGVtYShvKSYmKG89by5jbG9uZSgpKSwhKGUrMTxzLmxlbmd0aCYmXCJzdHJpbmdcIiE9dHlwZW9mIG9baV0pKXtjb25zdCBlPW9bYS5hbm5vdGF0aW9uc118fHtlcnJvcnM6e30sbWlzc2luZzp7fX07b1thLmFubm90YXRpb25zXT1lO2NvbnN0IHM9aXx8ci5jb250ZXh0LmtleTt2b2lkIDAhPT1vW2ldPyhlLmVycm9yc1tzXT1lLmVycm9yc1tzXXx8W10sZS5lcnJvcnNbc10ucHVzaCh0KSk6ZS5taXNzaW5nW3NdPXQ7YnJlYWt9bz1vW2ldfX1jb25zdCBsPS9fXFwka2V5XFwkXyhbLCBcXGRdKylfXFwkZW5kXFwkX1wiL2csYz0vXCJfXFwkbWlzc1xcJF8oW158XSspXFx8KFxcZCspX1xcJGVuZFxcJF9cIjogXCJfX21pc3NpbmdfX1wiL2csdT0vXFxzKlwiX1xcJGlkeFxcJF8oWywgXFxkXSspX1xcJGVuZFxcJF9cIiw/XFxuKC4qKS9nLGY9L1wiXFxbKE5hTnxTeW1ib2wuKnwtP0luZmluaXR5fGZ1bmN0aW9uLip8XFwoLiopXVwiL2c7bGV0IGg9YS5zYWZlU3RyaW5naWZ5KGksMikucmVwbGFjZShsLChlLHIpPT4nXCIgJy5jb25jYXQodCxcIltcIikuY29uY2F0KHIsXCJdXCIpLmNvbmNhdChvKSkucmVwbGFjZShjLChlLHMsbik9PlwiXCIuY29uY2F0KHIsJ1wiJykuY29uY2F0KHMsJ1wiJykuY29uY2F0KG8pLmNvbmNhdCh0LFwiIFtcIikuY29uY2F0KG4sXCJdOiAtLSBtaXNzaW5nIC0tXCIpLmNvbmNhdChvKSkucmVwbGFjZSh1LChlLHIscyk9PlwiXFxuXCIuY29uY2F0KHMsXCIgXCIpLmNvbmNhdCh0LFwiW1wiKS5jb25jYXQocixcIl1cIikuY29uY2F0KG8pKS5yZXBsYWNlKGYsKGUsdCk9PnQpO2g9XCJcIi5jb25jYXQoaCxcIlxcblwiKS5jb25jYXQodCk7Zm9yKGxldCBlPTA7ZTx0aGlzLmRldGFpbHMubGVuZ3RoOysrZSl7Y29uc3QgdD1lKzE7aD1cIlwiLmNvbmNhdChoLFwiXFxuW1wiKS5jb25jYXQodCxcIl0gXCIpLmNvbmNhdCh0aGlzLmRldGFpbHNbZV0ubWVzc2FnZSl9cmV0dXJuIGgrPW99fSx0LlZhbGlkYXRpb25FcnJvci5wcm90b3R5cGUuaXNKb2k9ITAsdC5WYWxpZGF0aW9uRXJyb3IucHJvdG90eXBlLm5hbWU9XCJWYWxpZGF0aW9uRXJyb3JcIixhLnNhZmVTdHJpbmdpZnk9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gSlNPTi5zdHJpbmdpZnkoZSxhLnNlcmlhbGl6ZXIoKSx0KX0sYS5zZXJpYWxpemVyPWZ1bmN0aW9uKCl7Y29uc3QgZT1bXSx0PVtdLHI9KHIscyk9PnRbMF09PT1zP1wiW0NpcmN1bGFyIH5dXCI6XCJbQ2lyY3VsYXIgfi5cIitlLnNsaWNlKDAsdC5pbmRleE9mKHMpKS5qb2luKFwiLlwiKStcIl1cIjtyZXR1cm4gZnVuY3Rpb24ocyxuKXtpZih0Lmxlbmd0aD4wKXtjb25zdCBvPXQuaW5kZXhPZih0aGlzKTt+bz8odC5sZW5ndGg9bysxLGUubGVuZ3RoPW8rMSxlW29dPXMpOih0LnB1c2godGhpcyksZS5wdXNoKHMpKSx+dC5pbmRleE9mKG4pJiYobj1yLmNhbGwodGhpcyxzLG4pKX1lbHNlIHQucHVzaChuKTtpZihuKXtjb25zdCBlPW5bYS5hbm5vdGF0aW9uc107aWYoZSl7aWYoQXJyYXkuaXNBcnJheShuKSl7Y29uc3QgdD1bXTtmb3IobGV0IHI9MDtyPG4ubGVuZ3RoOysrcillLmVycm9yc1tyXSYmdC5wdXNoKFwiXyRpZHgkX1wiLmNvbmNhdChlLmVycm9yc1tyXS5zb3J0KCkuam9pbihcIiwgXCIpLFwiXyRlbmQkX1wiKSksdC5wdXNoKG5bcl0pO249dH1lbHNle2Zvcihjb25zdCB0IGluIGUuZXJyb3JzKW5bXCJcIi5jb25jYXQodCxcIl8ka2V5JF9cIikuY29uY2F0KGUuZXJyb3JzW3RdLnNvcnQoKS5qb2luKFwiLCBcIiksXCJfJGVuZCRfXCIpXT1uW3RdLG5bdF09dm9pZCAwO2Zvcihjb25zdCB0IGluIGUubWlzc2luZyluW1wiXyRtaXNzJF9cIi5jb25jYXQodCxcInxcIikuY29uY2F0KGUubWlzc2luZ1t0XSxcIl8kZW5kJF9cIildPVwiX19taXNzaW5nX19cIn1yZXR1cm4gbn19cmV0dXJuIG49PT0xLzB8fG49PT0tMS8wfHxOdW1iZXIuaXNOYU4obil8fFwiZnVuY3Rpb25cIj09dHlwZW9mIG58fFwic3ltYm9sXCI9PXR5cGVvZiBuP1wiW1wiK24udG9TdHJpbmcoKStcIl1cIjpufX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtjb25zdCBzPXIoMCksbj1yKDIpLG89cig4KSxhPXIoMSk7bGV0IGk7Y29uc3QgbD17c3ltYm9sOlN5bWJvbChcInJlZlwiKSxkZWZhdWx0czp7YWRqdXN0Om51bGwsaW46ITEsaXRlcmFibGVzOm51bGwsbWFwOm51bGwsc2VwYXJhdG9yOlwiLlwiLHR5cGU6XCJ2YWx1ZVwifX07dC5jcmVhdGU9ZnVuY3Rpb24oZSl7bGV0IHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnt9O3MoXCJzdHJpbmdcIj09dHlwZW9mIGUsXCJJbnZhbGlkIHJlZmVyZW5jZSBrZXk6XCIsZSksYS5hc3NlcnRPcHRpb25zKHQsW1wiYWRqdXN0XCIsXCJhbmNlc3RvclwiLFwiaW5cIixcIml0ZXJhYmxlc1wiLFwibWFwXCIsXCJwcmVmaXhcIixcInNlcGFyYXRvclwiXSkscyghdC5wcmVmaXh8fFwib2JqZWN0XCI9PXR5cGVvZiB0LnByZWZpeCxcIm9wdGlvbnMucHJlZml4IG11c3QgYmUgb2YgdHlwZSBvYmplY3RcIik7Y29uc3Qgcj1PYmplY3QuYXNzaWduKHt9LGwuZGVmYXVsdHMsdCk7ZGVsZXRlIHIucHJlZml4O2NvbnN0IG49ci5zZXBhcmF0b3Isbz1sLmNvbnRleHQoZSxuLHQucHJlZml4KTtpZihyLnR5cGU9by50eXBlLGU9by5rZXksXCJ2YWx1ZVwiPT09ci50eXBlKWlmKG8ucm9vdCYmKHMoIW58fGVbMF0hPT1uLFwiQ2Fubm90IHNwZWNpZnkgcmVsYXRpdmUgcGF0aCB3aXRoIHJvb3QgcHJlZml4XCIpLHIuYW5jZXN0b3I9XCJyb290XCIsZXx8KGU9bnVsbCkpLG4mJm49PT1lKWU9bnVsbCxyLmFuY2VzdG9yPTA7ZWxzZSBpZih2b2lkIDAhPT1yLmFuY2VzdG9yKXMoIW58fCFlfHxlWzBdIT09bixcIkNhbm5vdCBjb21iaW5lIHByZWZpeCB3aXRoIGFuY2VzdG9yIG9wdGlvblwiKTtlbHNle2NvbnN0W3Qsc109bC5hbmNlc3RvcihlLG4pO3MmJlwiXCI9PT0oZT1lLnNsaWNlKHMpKSYmKGU9bnVsbCksci5hbmNlc3Rvcj10fXJldHVybiByLnBhdGg9bj9udWxsPT09ZT9bXTplLnNwbGl0KG4pOltlXSxuZXcgbC5SZWYocil9LHQuaW49ZnVuY3Rpb24oZSl7bGV0IHI9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnt9O3JldHVybiB0LmNyZWF0ZShlLE9iamVjdC5hc3NpZ24oe30scix7aW46ITB9KSl9LHQuaXNSZWY9ZnVuY3Rpb24oZSl7cmV0dXJuISFlJiYhIWVbYS5zeW1ib2xzLnJlZl19LGwuUmVmPWNsYXNze2NvbnN0cnVjdG9yKGUpe3MoXCJvYmplY3RcIj09dHlwZW9mIGUsXCJJbnZhbGlkIHJlZmVyZW5jZSBjb25zdHJ1Y3Rpb25cIiksYS5hc3NlcnRPcHRpb25zKGUsW1wiYWRqdXN0XCIsXCJhbmNlc3RvclwiLFwiaW5cIixcIml0ZXJhYmxlc1wiLFwibWFwXCIsXCJwYXRoXCIsXCJzZXBhcmF0b3JcIixcInR5cGVcIixcImRlcHRoXCIsXCJrZXlcIixcInJvb3RcIixcImRpc3BsYXlcIl0pLHMoWyExLHZvaWQgMF0uaW5jbHVkZXMoZS5zZXBhcmF0b3IpfHxcInN0cmluZ1wiPT10eXBlb2YgZS5zZXBhcmF0b3ImJjE9PT1lLnNlcGFyYXRvci5sZW5ndGgsXCJJbnZhbGlkIHNlcGFyYXRvclwiKSxzKCFlLmFkanVzdHx8XCJmdW5jdGlvblwiPT10eXBlb2YgZS5hZGp1c3QsXCJvcHRpb25zLmFkanVzdCBtdXN0IGJlIGEgZnVuY3Rpb25cIikscyghZS5tYXB8fEFycmF5LmlzQXJyYXkoZS5tYXApLFwib3B0aW9ucy5tYXAgbXVzdCBiZSBhbiBhcnJheVwiKSxzKCFlLm1hcHx8IWUuYWRqdXN0LFwiQ2Fubm90IHNldCBib3RoIG1hcCBhbmQgYWRqdXN0IG9wdGlvbnNcIiksT2JqZWN0LmFzc2lnbih0aGlzLGwuZGVmYXVsdHMsZSkscyhcInZhbHVlXCI9PT10aGlzLnR5cGV8fHZvaWQgMD09PXRoaXMuYW5jZXN0b3IsXCJOb24tdmFsdWUgcmVmZXJlbmNlcyBjYW5ub3QgcmVmZXJlbmNlIGFuY2VzdG9yc1wiKSxBcnJheS5pc0FycmF5KHRoaXMubWFwKSYmKHRoaXMubWFwPW5ldyBNYXAodGhpcy5tYXApKSx0aGlzLmRlcHRoPXRoaXMucGF0aC5sZW5ndGgsdGhpcy5rZXk9dGhpcy5wYXRoLmxlbmd0aD90aGlzLnBhdGguam9pbih0aGlzLnNlcGFyYXRvcik6bnVsbCx0aGlzLnJvb3Q9dGhpcy5wYXRoWzBdLHRoaXMudXBkYXRlRGlzcGxheSgpfXJlc29sdmUoZSx0LHIsbil7bGV0IG89YXJndW1lbnRzLmxlbmd0aD40JiZ2b2lkIDAhPT1hcmd1bWVudHNbNF0/YXJndW1lbnRzWzRdOnt9O3JldHVybiBzKCF0aGlzLmlufHxvLmluLFwiSW52YWxpZCBpbigpIHJlZmVyZW5jZSB1c2FnZVwiKSxcImdsb2JhbFwiPT09dGhpcy50eXBlP3RoaXMuX3Jlc29sdmUoci5jb250ZXh0LHQsbyk6XCJsb2NhbFwiPT09dGhpcy50eXBlP3RoaXMuX3Jlc29sdmUobix0LG8pOnRoaXMuYW5jZXN0b3I/XCJyb290XCI9PT10aGlzLmFuY2VzdG9yP3RoaXMuX3Jlc29sdmUodC5hbmNlc3RvcnNbdC5hbmNlc3RvcnMubGVuZ3RoLTFdLHQsbyk6KHModGhpcy5hbmNlc3Rvcjw9dC5hbmNlc3RvcnMubGVuZ3RoLFwiSW52YWxpZCByZWZlcmVuY2UgZXhjZWVkcyB0aGUgc2NoZW1hIHJvb3Q6XCIsdGhpcy5kaXNwbGF5KSx0aGlzLl9yZXNvbHZlKHQuYW5jZXN0b3JzW3RoaXMuYW5jZXN0b3ItMV0sdCxvKSk6dGhpcy5fcmVzb2x2ZShlLHQsbyl9X3Jlc29sdmUoZSx0LHIpe2xldCBzO2lmKFwidmFsdWVcIj09PXRoaXMudHlwZSYmdC5tYWluc3RheS5zaGFkb3cmJiExIT09ci5zaGFkb3cmJihzPXQubWFpbnN0YXkuc2hhZG93LmdldCh0aGlzLmFic29sdXRlKHQpKSksdm9pZCAwPT09cyYmKHM9byhlLHRoaXMucGF0aCx7aXRlcmFibGVzOnRoaXMuaXRlcmFibGVzLGZ1bmN0aW9uczohMH0pKSx0aGlzLmFkanVzdCYmKHM9dGhpcy5hZGp1c3QocykpLHRoaXMubWFwKXtjb25zdCBlPXRoaXMubWFwLmdldChzKTt2b2lkIDAhPT1lJiYocz1lKX1yZXR1cm4gdC5tYWluc3RheSYmdC5tYWluc3RheS50cmFjZXIucmVzb2x2ZSh0LHRoaXMscyksc310b1N0cmluZygpe3JldHVybiB0aGlzLmRpc3BsYXl9YWJzb2x1dGUoZSl7cmV0dXJuWy4uLmUucGF0aC5zbGljZSgwLC10aGlzLmFuY2VzdG9yKSwuLi50aGlzLnBhdGhdfWNsb25lKCl7cmV0dXJuIG5ldyBsLlJlZih0aGlzKX1kZXNjcmliZSgpe2NvbnN0IGU9e3BhdGg6dGhpcy5wYXRofTtcInZhbHVlXCIhPT10aGlzLnR5cGUmJihlLnR5cGU9dGhpcy50eXBlKSxcIi5cIiE9PXRoaXMuc2VwYXJhdG9yJiYoZS5zZXBhcmF0b3I9dGhpcy5zZXBhcmF0b3IpLFwidmFsdWVcIj09PXRoaXMudHlwZSYmMSE9PXRoaXMuYW5jZXN0b3ImJihlLmFuY2VzdG9yPXRoaXMuYW5jZXN0b3IpLHRoaXMubWFwJiYoZS5tYXA9Wy4uLnRoaXMubWFwXSk7Zm9yKGNvbnN0IHQgb2ZbXCJhZGp1c3RcIixcIml0ZXJhYmxlc1wiXSludWxsIT09dGhpc1t0XSYmKGVbdF09dGhpc1t0XSk7cmV0dXJuITEhPT10aGlzLmluJiYoZS5pbj0hMCkse3JlZjplfX11cGRhdGVEaXNwbGF5KCl7Y29uc3QgZT1udWxsIT09dGhpcy5rZXk/dGhpcy5rZXk6XCJcIjtpZihcInZhbHVlXCIhPT10aGlzLnR5cGUpcmV0dXJuIHZvaWQodGhpcy5kaXNwbGF5PVwicmVmOlwiLmNvbmNhdCh0aGlzLnR5cGUsXCI6XCIpLmNvbmNhdChlKSk7aWYoIXRoaXMuc2VwYXJhdG9yKXJldHVybiB2b2lkKHRoaXMuZGlzcGxheT1cInJlZjpcIi5jb25jYXQoZSkpO2lmKCF0aGlzLmFuY2VzdG9yKXJldHVybiB2b2lkKHRoaXMuZGlzcGxheT1cInJlZjpcIi5jb25jYXQodGhpcy5zZXBhcmF0b3IpLmNvbmNhdChlKSk7aWYoXCJyb290XCI9PT10aGlzLmFuY2VzdG9yKXJldHVybiB2b2lkKHRoaXMuZGlzcGxheT1cInJlZjpyb290OlwiLmNvbmNhdChlKSk7aWYoMT09PXRoaXMuYW5jZXN0b3IpcmV0dXJuIHZvaWQodGhpcy5kaXNwbGF5PVwicmVmOlwiLmNvbmNhdChlfHxcIi4uXCIpKTtjb25zdCB0PW5ldyBBcnJheSh0aGlzLmFuY2VzdG9yKzEpLmZpbGwodGhpcy5zZXBhcmF0b3IpLmpvaW4oXCJcIik7dGhpcy5kaXNwbGF5PVwicmVmOlwiLmNvbmNhdCh0KS5jb25jYXQoZXx8XCJcIil9fSxsLlJlZi5wcm90b3R5cGVbYS5zeW1ib2xzLnJlZl09ITAsdC5idWlsZD1mdW5jdGlvbihlKXtyZXR1cm5cInZhbHVlXCI9PT0oZT1PYmplY3QuYXNzaWduKHt9LGwuZGVmYXVsdHMsZSkpLnR5cGUmJnZvaWQgMD09PWUuYW5jZXN0b3ImJihlLmFuY2VzdG9yPTEpLG5ldyBsLlJlZihlKX0sbC5jb250ZXh0PWZ1bmN0aW9uKGUsdCl7bGV0IHI9YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOnt9O2lmKGU9ZS50cmltKCkscil7Y29uc3Qgcz12b2lkIDA9PT1yLmdsb2JhbD9cIiRcIjpyLmdsb2JhbDtpZihzIT09dCYmZS5zdGFydHNXaXRoKHMpKXJldHVybntrZXk6ZS5zbGljZShzLmxlbmd0aCksdHlwZTpcImdsb2JhbFwifTtjb25zdCBuPXZvaWQgMD09PXIubG9jYWw/XCIjXCI6ci5sb2NhbDtpZihuIT09dCYmZS5zdGFydHNXaXRoKG4pKXJldHVybntrZXk6ZS5zbGljZShuLmxlbmd0aCksdHlwZTpcImxvY2FsXCJ9O2NvbnN0IG89dm9pZCAwPT09ci5yb290P1wiL1wiOnIucm9vdDtpZihvIT09dCYmZS5zdGFydHNXaXRoKG8pKXJldHVybntrZXk6ZS5zbGljZShvLmxlbmd0aCksdHlwZTpcInZhbHVlXCIscm9vdDohMH19cmV0dXJue2tleTplLHR5cGU6XCJ2YWx1ZVwifX0sbC5hbmNlc3Rvcj1mdW5jdGlvbihlLHQpe2lmKCF0KXJldHVyblsxLDBdO2lmKGVbMF0hPT10KXJldHVyblsxLDBdO2lmKGVbMV0hPT10KXJldHVyblswLDFdO2xldCByPTI7Zm9yKDtlW3JdPT09dDspKytyO3JldHVybltyLTEscl19LHQudG9TaWJsaW5nPTAsdC50b1BhcmVudD0xLHQuTWFuYWdlcj1jbGFzc3tjb25zdHJ1Y3Rvcigpe3RoaXMucmVmcz1bXX1yZWdpc3RlcihlLHMpe2lmKGUpaWYocz12b2lkIDA9PT1zP3QudG9QYXJlbnQ6cyxBcnJheS5pc0FycmF5KGUpKWZvcihjb25zdCB0IG9mIGUpdGhpcy5yZWdpc3Rlcih0LHMpO2Vsc2UgaWYoYS5pc1NjaGVtYShlKSlmb3IoY29uc3QgdCBvZiBlLl9yZWZzLnJlZnMpdC5hbmNlc3Rvci1zPj0wJiZ0aGlzLnJlZnMucHVzaCh7YW5jZXN0b3I6dC5hbmNlc3Rvci1zLHJvb3Q6dC5yb290fSk7ZWxzZSB0LmlzUmVmKGUpJiZcInZhbHVlXCI9PT1lLnR5cGUmJmUuYW5jZXN0b3Itcz49MCYmdGhpcy5yZWZzLnB1c2goe2FuY2VzdG9yOmUuYW5jZXN0b3Itcyxyb290OmUucm9vdH0pLChpPWl8fHIoNikpLmlzVGVtcGxhdGUoZSkmJnRoaXMucmVnaXN0ZXIoZS5yZWZzKCkscyl9Z2V0IGxlbmd0aCgpe3JldHVybiB0aGlzLnJlZnMubGVuZ3RofWNsb25lKCl7Y29uc3QgZT1uZXcgdC5NYW5hZ2VyO3JldHVybiBlLnJlZnM9bih0aGlzLnJlZnMpLGV9cmVzZXQoKXt0aGlzLnJlZnM9W119cm9vdHMoKXtyZXR1cm4gdGhpcy5yZWZzLmZpbHRlcihlPT4hZS5hbmNlc3RvcikubWFwKGU9PmUucm9vdCl9fX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2NvbnN0IHM9cigwKSxuPXIoMiksbz1yKDI5KSxhPXIoMzApLGk9cigxKSxsPXIoNCksYz1yKDUpLHU9e3N5bWJvbDpTeW1ib2woXCJ0ZW1wbGF0ZVwiKSxvcGVuczpuZXcgQXJyYXkoMWUzKS5qb2luKFwiXFwwXCIpLGNsb3NlczpuZXcgQXJyYXkoMWUzKS5qb2luKFwiXHUwMDAxXCIpLGRhdGVGb3JtYXQ6e2RhdGU6RGF0ZS5wcm90b3R5cGUudG9EYXRlU3RyaW5nLGlzbzpEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZyxzdHJpbmc6RGF0ZS5wcm90b3R5cGUudG9TdHJpbmcsdGltZTpEYXRlLnByb3RvdHlwZS50b1RpbWVTdHJpbmcsdXRjOkRhdGUucHJvdG90eXBlLnRvVVRDU3RyaW5nfX07ZS5leHBvcnRzPXUuVGVtcGxhdGU9Y2xhc3N7Y29uc3RydWN0b3IoZSx0KXtzKFwic3RyaW5nXCI9PXR5cGVvZiBlLFwiVGVtcGxhdGUgc291cmNlIG11c3QgYmUgYSBzdHJpbmdcIikscyghZS5pbmNsdWRlcyhcIlxcMFwiKSYmIWUuaW5jbHVkZXMoXCJcdTAwMDFcIiksXCJUZW1wbGF0ZSBzb3VyY2UgY2Fubm90IGNvbnRhaW4gcmVzZXJ2ZWQgY29udHJvbCBjaGFyYWN0ZXJzXCIpLHRoaXMuc291cmNlPWUsdGhpcy5yZW5kZXJlZD1lLHRoaXMuX3RlbXBsYXRlPW51bGwsdGhpcy5fc2V0dGluZ3M9bih0KSx0aGlzLl9wYXJzZSgpfV9wYXJzZSgpe2lmKCF0aGlzLnNvdXJjZS5pbmNsdWRlcyhcIntcIikpcmV0dXJuO2NvbnN0IGU9dS5lbmNvZGUodGhpcy5zb3VyY2UpLHQ9dS5zcGxpdChlKTtsZXQgcj0hMTtjb25zdCBzPVtdLG49dC5zaGlmdCgpO24mJnMucHVzaChuKTtmb3IoY29uc3QgZSBvZiB0KXtjb25zdCB0PVwie1wiIT09ZVswXSxuPXQ/XCJ9XCI6XCJ9fVwiLG89ZS5pbmRleE9mKG4pO2lmKC0xPT09b3x8XCJ7XCI9PT1lWzFdKXtzLnB1c2goXCJ7XCIuY29uY2F0KHUuZGVjb2RlKGUpKSk7Y29udGludWV9Y29uc3QgYT1lLnNsaWNlKHQ/MDoxLG8pLGk9dGhpcy5fcmVmKHUuZGVjb2RlKGEpLHQpO3MucHVzaChpKSxcInN0cmluZ1wiIT10eXBlb2YgaSYmKHI9ITApO2NvbnN0IGw9ZS5zbGljZShvK24ubGVuZ3RoKTtsJiZzLnB1c2godS5kZWNvZGUobCkpfXI/dGhpcy5fdGVtcGxhdGU9czp0aGlzLnJlbmRlcmVkPXMuam9pbihcIlwiKX1zdGF0aWMgZGF0ZShlLHQpe3JldHVybiB1LmRhdGVGb3JtYXRbdC5kYXRlRm9ybWF0XS5jYWxsKGUpfWRlc2NyaWJlKCl7bGV0IGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9O2lmKCF0aGlzLl9zZXR0aW5ncyYmZS5jb21wYWN0KXJldHVybiB0aGlzLnNvdXJjZTtjb25zdCB0PXt0ZW1wbGF0ZTp0aGlzLnNvdXJjZX07cmV0dXJuIHRoaXMuX3NldHRpbmdzJiYodC5vcHRpb25zPXRoaXMuX3NldHRpbmdzKSx0fXN0YXRpYyBidWlsZChlKXtyZXR1cm4gbmV3IHUuVGVtcGxhdGUoZS50ZW1wbGF0ZSxlLm9wdGlvbnMpfWlzRHluYW1pYygpe3JldHVybiEhdGhpcy5fdGVtcGxhdGV9c3RhdGljIGlzVGVtcGxhdGUoZSl7cmV0dXJuISFlJiYhIWVbaS5zeW1ib2xzLnRlbXBsYXRlXX1yZWZzKCl7aWYoIXRoaXMuX3RlbXBsYXRlKXJldHVybjtjb25zdCBlPVtdO2Zvcihjb25zdCB0IG9mIHRoaXMuX3RlbXBsYXRlKVwic3RyaW5nXCIhPXR5cGVvZiB0JiZlLnB1c2goLi4udC5yZWZzKTtyZXR1cm4gZX1yZXNvbHZlKGUsdCxyLHMpe3JldHVybiB0aGlzLl90ZW1wbGF0ZSYmMT09PXRoaXMuX3RlbXBsYXRlLmxlbmd0aD90aGlzLl9wYXJ0KHRoaXMuX3RlbXBsYXRlWzBdLGUsdCxyLHMse30pOnRoaXMucmVuZGVyKGUsdCxyLHMpfV9wYXJ0KGUpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLHI9bmV3IEFycmF5KHQ+MT90LTE6MCkscz0xO3M8dDtzKyspcltzLTFdPWFyZ3VtZW50c1tzXTtyZXR1cm4gZS5yZWY/ZS5yZWYucmVzb2x2ZSguLi5yKTplLmZvcm11bGEuZXZhbHVhdGUocil9cmVuZGVyKGUsdCxyLHMpe2xldCBuPWFyZ3VtZW50cy5sZW5ndGg+NCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XTp7fTtpZighdGhpcy5pc0R5bmFtaWMoKSlyZXR1cm4gdGhpcy5yZW5kZXJlZDtjb25zdCBhPVtdO2Zvcihjb25zdCBpIG9mIHRoaXMuX3RlbXBsYXRlKWlmKFwic3RyaW5nXCI9PXR5cGVvZiBpKWEucHVzaChpKTtlbHNle2NvbnN0IGw9dGhpcy5fcGFydChpLGUsdCxyLHMsbiksYz11LnN0cmluZ2lmeShsLHIsbi5lcnJvcnMpO2lmKHZvaWQgMCE9PWMpe2NvbnN0IGU9aS5yYXd8fCExPT09KG4uZXJyb3JzJiZuLmVycm9ycy5lc2NhcGVIdG1sKT9jOm8oYyk7YS5wdXNoKGUpfX1yZXR1cm4gYS5qb2luKFwiXCIpfV9yZWYoZSx0KXtjb25zdCByPVtdLHM9ZT0+e2NvbnN0IHQ9Yy5jcmVhdGUoZSx0aGlzLl9zZXR0aW5ncyk7cmV0dXJuIHIucHVzaCh0KSxlPT50LnJlc29sdmUoLi4uZSl9O3RyeXt2YXIgbj1uZXcgYShlLHtyZWZlcmVuY2U6cyxmdW5jdGlvbnM6dS5mdW5jdGlvbnMsY29uc3RhbnRzOnUuY29uc3RhbnRzfSl9Y2F0Y2godCl7dGhyb3cgdC5tZXNzYWdlPSdJbnZhbGlkIHRlbXBsYXRlIHZhcmlhYmxlIFwiJy5jb25jYXQoZSwnXCIgZmFpbHMgZHVlIHRvOiAnKS5jb25jYXQodC5tZXNzYWdlKSx0fXJldHVybiBuLnNpbmdsZT9cInJlZmVyZW5jZVwiPT09bi5zaW5nbGUudHlwZT97cmVmOnJbMF0scmF3OnQscmVmczpyfTp1LnN0cmluZ2lmeShuLnNpbmdsZS52YWx1ZSk6e2Zvcm11bGE6bixyYXc6dCxyZWZzOnJ9fXRvU3RyaW5nKCl7cmV0dXJuIHRoaXMuc291cmNlfX0sdS5UZW1wbGF0ZS5wcm90b3R5cGVbaS5zeW1ib2xzLnRlbXBsYXRlXT0hMCx1LlRlbXBsYXRlLnByb3RvdHlwZS5pc0ltbXV0YWJsZT0hMCx1LmVuY29kZT1mdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKC9cXFxcKFxceyspL2csKGUsdCk9PnUub3BlbnMuc2xpY2UoMCx0Lmxlbmd0aCkpLnJlcGxhY2UoL1xcXFwoXFx9KykvZywoZSx0KT0+dS5jbG9zZXMuc2xpY2UoMCx0Lmxlbmd0aCkpfSx1LmRlY29kZT1mdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKC9cXHUwMDAwL2csXCJ7XCIpLnJlcGxhY2UoL1xcdTAwMDEvZyxcIn1cIil9LHUuc3BsaXQ9ZnVuY3Rpb24oZSl7Y29uc3QgdD1bXTtsZXQgcj1cIlwiO2ZvcihsZXQgcz0wO3M8ZS5sZW5ndGg7KytzKXtjb25zdCBuPWVbc107aWYoXCJ7XCI9PT1uKXtsZXQgbj1cIlwiO2Zvcig7cysxPGUubGVuZ3RoJiZcIntcIj09PWVbcysxXTspbis9XCJ7XCIsKytzO3QucHVzaChyKSxyPW59ZWxzZSByKz1ufXJldHVybiB0LnB1c2gociksdH0sdS5zdHJpbmdpZnk9ZnVuY3Rpb24oZSx0LHIpe2NvbnN0IHM9dHlwZW9mIGU7aWYobnVsbD09PWUpcmV0dXJuXCJudWxsXCI7aWYoXCJzdHJpbmdcIj09PXMpcmV0dXJuIGU7aWYoXCJudW1iZXJcIj09PXN8fFwiZnVuY3Rpb25cIj09PXN8fFwic3ltYm9sXCI9PT1zKXJldHVybiBlLnRvU3RyaW5nKCk7aWYoXCJvYmplY3RcIiE9PXMpcmV0dXJuIEpTT04uc3RyaW5naWZ5KGUpO2lmKGUgaW5zdGFuY2VvZiBEYXRlKXJldHVybiB1LlRlbXBsYXRlLmRhdGUoZSx0KTtpZihlIGluc3RhbmNlb2YgTWFwKXtjb25zdCB0PVtdO2Zvcihjb25zdFtyLHNdb2YgZS5lbnRyaWVzKCkpdC5wdXNoKFwiXCIuY29uY2F0KHIudG9TdHJpbmcoKSxcIiAtPiBcIikuY29uY2F0KHMudG9TdHJpbmcoKSkpO2U9dH1pZighQXJyYXkuaXNBcnJheShlKSlyZXR1cm4gZS50b1N0cmluZygpO2xldCBuPVwiXCI7Zm9yKGNvbnN0IHMgb2YgZSluPW4rKG4ubGVuZ3RoP1wiLCBcIjpcIlwiKSt1LnN0cmluZ2lmeShzLHQscik7cmV0dXJuIHIud3JhcEFycmF5cz9cIltcIituK1wiXVwiOm59LHUuY29uc3RhbnRzPXt0cnVlOiEwLGZhbHNlOiExLG51bGw6bnVsbCxzZWNvbmQ6MWUzLG1pbnV0ZTo2ZTQsaG91cjozNmU1LGRheTo4NjRlNX0sdS5mdW5jdGlvbnM9e2lmOihlLHQscik9PmU/dDpyLG1zZyhlKXtjb25zdFt0LHIscyxuLG9dPXRoaXMsYT1vLm1lc3NhZ2VzO2lmKCFhKXJldHVyblwiXCI7Y29uc3QgaT1sLnRlbXBsYXRlKHQsYVswXSxlLHIscyl8fGwudGVtcGxhdGUodCxhWzFdLGUscixzKTtyZXR1cm4gaT9pLnJlbmRlcih0LHIscyxuLG8pOlwiXCJ9LG51bWJlcjplPT5cIm51bWJlclwiPT10eXBlb2YgZT9lOlwic3RyaW5nXCI9PXR5cGVvZiBlP3BhcnNlRmxvYXQoZSk6XCJib29sZWFuXCI9PXR5cGVvZiBlP2U/MTowOmUgaW5zdGFuY2VvZiBEYXRlP2UuZ2V0VGltZSgpOm51bGx9fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7Y29uc3Qgcz1yKDApLG49cigxKSxvPXIoNSksYT17fTt0LnNjaGVtYT1mdW5jdGlvbihlLHQpe2xldCByPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTp7fTtuLmFzc2VydE9wdGlvbnMocixbXCJhcHBlbmRQYXRoXCIsXCJvdmVycmlkZVwiXSk7dHJ5e3JldHVybiBhLnNjaGVtYShlLHQscil9Y2F0Y2goZSl7dGhyb3cgci5hcHBlbmRQYXRoJiZ2b2lkIDAhPT1lLnBhdGgmJihlLm1lc3NhZ2U9XCJcIi5jb25jYXQoZS5tZXNzYWdlLFwiIChcIikuY29uY2F0KGUucGF0aCxcIilcIikpLGV9fSxhLnNjaGVtYT1mdW5jdGlvbihlLHQscil7cyh2b2lkIDAhPT10LFwiSW52YWxpZCB1bmRlZmluZWQgc2NoZW1hXCIpLEFycmF5LmlzQXJyYXkodCkmJihzKHQubGVuZ3RoLFwiSW52YWxpZCBlbXB0eSBhcnJheSBzY2hlbWFcIiksMT09PXQubGVuZ3RoJiYodD10WzBdKSk7Y29uc3Qgbz1mdW5jdGlvbih0KXtmb3IodmFyIHM9YXJndW1lbnRzLmxlbmd0aCxuPW5ldyBBcnJheShzPjE/cy0xOjApLG89MTtvPHM7bysrKW5bby0xXT1hcmd1bWVudHNbb107cmV0dXJuITEhPT1yLm92ZXJyaWRlP3QudmFsaWQoZS5vdmVycmlkZSwuLi5uKTp0LnZhbGlkKC4uLm4pfTtpZihhLnNpbXBsZSh0KSlyZXR1cm4gbyhlLHQpO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHQpcmV0dXJuIGUuY3VzdG9tKHQpO2lmKHMoXCJvYmplY3RcIj09dHlwZW9mIHQsXCJJbnZhbGlkIHNjaGVtYSBjb250ZW50OlwiLHR5cGVvZiB0KSxuLmlzUmVzb2x2YWJsZSh0KSlyZXR1cm4gbyhlLHQpO2lmKG4uaXNTY2hlbWEodCkpcmV0dXJuIHQ7aWYoQXJyYXkuaXNBcnJheSh0KSl7Zm9yKGNvbnN0IHIgb2YgdClpZighYS5zaW1wbGUocikpcmV0dXJuIGUuYWx0ZXJuYXRpdmVzKCkudHJ5KC4uLnQpO3JldHVybiBvKGUsLi4udCl9cmV0dXJuIHQgaW5zdGFuY2VvZiBSZWdFeHA/ZS5zdHJpbmcoKS5yZWdleCh0KTp0IGluc3RhbmNlb2YgRGF0ZT9vKGUuZGF0ZSgpLHQpOihzKE9iamVjdC5nZXRQcm90b3R5cGVPZih0KT09PU9iamVjdC5nZXRQcm90b3R5cGVPZih7fSksXCJTY2hlbWEgY2FuIG9ubHkgY29udGFpbiBwbGFpbiBvYmplY3RzXCIpLGUub2JqZWN0KCkua2V5cyh0KSl9LHQucmVmPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIG8uaXNSZWYoZSk/ZTpvLmNyZWF0ZShlLHQpfSx0LmNvbXBpbGU9ZnVuY3Rpb24oZSxyKXtsZXQgbz1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06e307bi5hc3NlcnRPcHRpb25zKG8sW1wibGVnYWN5XCJdKTtjb25zdCBpPXImJnJbbi5zeW1ib2xzLmFueV07aWYoaSlyZXR1cm4gcyhvLmxlZ2FjeXx8aS52ZXJzaW9uPT09bi52ZXJzaW9uLFwiQ2Fubm90IG1peCBkaWZmZXJlbnQgdmVyc2lvbnMgb2Ygam9pIHNjaGVtYXM6XCIsaS52ZXJzaW9uLG4udmVyc2lvbikscjtpZihcIm9iamVjdFwiIT10eXBlb2Ygcnx8IW8ubGVnYWN5KXJldHVybiB0LnNjaGVtYShlLHIse2FwcGVuZFBhdGg6ITB9KTtjb25zdCBsPWEud2FsayhyKTtyZXR1cm4gbD9sLmNvbXBpbGUobC5yb290LHIpOnQuc2NoZW1hKGUscix7YXBwZW5kUGF0aDohMH0pfSxhLndhbGs9ZnVuY3Rpb24oZSl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGUpcmV0dXJuIG51bGw7aWYoQXJyYXkuaXNBcnJheShlKSl7Zm9yKGNvbnN0IHQgb2YgZSl7Y29uc3QgZT1hLndhbGsodCk7aWYoZSlyZXR1cm4gZX1yZXR1cm4gbnVsbH1jb25zdCB0PWVbbi5zeW1ib2xzLmFueV07aWYodClyZXR1cm57cm9vdDplW3Qucm9vdF0sY29tcGlsZTp0LmNvbXBpbGV9O3MoT2JqZWN0LmdldFByb3RvdHlwZU9mKGUpPT09T2JqZWN0LmdldFByb3RvdHlwZU9mKHt9KSxcIlNjaGVtYSBjYW4gb25seSBjb250YWluIHBsYWluIG9iamVjdHNcIik7Zm9yKGNvbnN0IHQgaW4gZSl7Y29uc3Qgcj1hLndhbGsoZVt0XSk7aWYocilyZXR1cm4gcn1yZXR1cm4gbnVsbH0sYS5zaW1wbGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PT1lfHxbXCJib29sZWFuXCIsXCJzdHJpbmdcIixcIm51bWJlclwiXS5pbmNsdWRlcyh0eXBlb2YgZSl9LHQud2hlbj1mdW5jdGlvbihlLHIsaSl7aWYodm9pZCAwPT09aSYmKHMociYmXCJvYmplY3RcIj09dHlwZW9mIHIsXCJNaXNzaW5nIG9wdGlvbnNcIiksaT1yLHI9by5jcmVhdGUoXCIuXCIpKSxBcnJheS5pc0FycmF5KGkpJiYoaT17c3dpdGNoOml9KSxuLmFzc2VydE9wdGlvbnMoaSxbXCJpc1wiLFwibm90XCIsXCJ0aGVuXCIsXCJvdGhlcndpc2VcIixcInN3aXRjaFwiLFwiYnJlYWtcIl0pLG4uaXNTY2hlbWEocikpcmV0dXJuIHModm9pZCAwPT09aS5pcywnXCJpc1wiIGNhbiBub3QgYmUgdXNlZCB3aXRoIGEgc2NoZW1hIGNvbmRpdGlvbicpLHModm9pZCAwPT09aS5ub3QsJ1wibm90XCIgY2FuIG5vdCBiZSB1c2VkIHdpdGggYSBzY2hlbWEgY29uZGl0aW9uJykscyh2b2lkIDA9PT1pLnN3aXRjaCwnXCJzd2l0Y2hcIiBjYW4gbm90IGJlIHVzZWQgd2l0aCBhIHNjaGVtYSBjb25kaXRpb24nKSxhLmNvbmRpdGlvbihlLHtpczpyLHRoZW46aS50aGVuLG90aGVyd2lzZTppLm90aGVyd2lzZSxicmVhazppLmJyZWFrfSk7aWYocyhvLmlzUmVmKHIpfHxcInN0cmluZ1wiPT10eXBlb2YgcixcIkludmFsaWQgY29uZGl0aW9uOlwiLHIpLHModm9pZCAwPT09aS5ub3R8fHZvaWQgMD09PWkuaXMsJ0Nhbm5vdCBjb21iaW5lIFwiaXNcIiB3aXRoIFwibm90XCInKSx2b2lkIDA9PT1pLnN3aXRjaCl7bGV0IGw9aTt2b2lkIDAhPT1pLm5vdCYmKGw9e2lzOmkubm90LHRoZW46aS5vdGhlcndpc2Usb3RoZXJ3aXNlOmkudGhlbixicmVhazppLmJyZWFrfSk7bGV0IGM9dm9pZCAwIT09bC5pcz9lLiRfY29tcGlsZShsLmlzKTplLiRfcm9vdC5pbnZhbGlkKG51bGwsITEsMCxcIlwiKS5yZXF1aXJlZCgpO3JldHVybiBzKHZvaWQgMCE9PWwudGhlbnx8dm9pZCAwIT09bC5vdGhlcndpc2UsJ29wdGlvbnMgbXVzdCBoYXZlIGF0IGxlYXN0IG9uZSBvZiBcInRoZW5cIiwgXCJvdGhlcndpc2VcIiwgb3IgXCJzd2l0Y2hcIicpLHModm9pZCAwPT09bC5icmVha3x8dm9pZCAwPT09bC50aGVufHx2b2lkIDA9PT1sLm90aGVyd2lzZSxcIkNhbm5vdCBzcGVjaWZ5IHRoZW4sIG90aGVyd2lzZSwgYW5kIGJyZWFrIGFsbCB0b2dldGhlclwiKSx2b2lkIDA9PT1pLmlzfHxvLmlzUmVmKGkuaXMpfHxuLmlzU2NoZW1hKGkuaXMpfHwoYz1jLnJlcXVpcmVkKCkpLGEuY29uZGl0aW9uKGUse3JlZjp0LnJlZihyKSxpczpjLHRoZW46bC50aGVuLG90aGVyd2lzZTpsLm90aGVyd2lzZSxicmVhazpsLmJyZWFrfSl9cyhBcnJheS5pc0FycmF5KGkuc3dpdGNoKSwnXCJzd2l0Y2hcIiBtdXN0IGJlIGFuIGFycmF5Jykscyh2b2lkIDA9PT1pLmlzLCdDYW5ub3QgY29tYmluZSBcInN3aXRjaFwiIHdpdGggXCJpc1wiJykscyh2b2lkIDA9PT1pLm5vdCwnQ2Fubm90IGNvbWJpbmUgXCJzd2l0Y2hcIiB3aXRoIFwibm90XCInKSxzKHZvaWQgMD09PWkudGhlbiwnQ2Fubm90IGNvbWJpbmUgXCJzd2l0Y2hcIiB3aXRoIFwidGhlblwiJyk7Y29uc3QgbD17cmVmOnQucmVmKHIpLHN3aXRjaDpbXSxicmVhazppLmJyZWFrfTtmb3IobGV0IHQ9MDt0PGkuc3dpdGNoLmxlbmd0aDsrK3Qpe2NvbnN0IHI9aS5zd2l0Y2hbdF0sYT10PT09aS5zd2l0Y2gubGVuZ3RoLTE7bi5hc3NlcnRPcHRpb25zKHIsYT9bXCJpc1wiLFwidGhlblwiLFwib3RoZXJ3aXNlXCJdOltcImlzXCIsXCJ0aGVuXCJdKSxzKHZvaWQgMCE9PXIuaXMsJ1N3aXRjaCBzdGF0ZW1lbnQgbWlzc2luZyBcImlzXCInKSxzKHZvaWQgMCE9PXIudGhlbiwnU3dpdGNoIHN0YXRlbWVudCBtaXNzaW5nIFwidGhlblwiJyk7Y29uc3QgYz17aXM6ZS4kX2NvbXBpbGUoci5pcyksdGhlbjplLiRfY29tcGlsZShyLnRoZW4pfTtpZihvLmlzUmVmKHIuaXMpfHxuLmlzU2NoZW1hKHIuaXMpfHwoYy5pcz1jLmlzLnJlcXVpcmVkKCkpLGEpe3Modm9pZCAwPT09aS5vdGhlcndpc2V8fHZvaWQgMD09PXIub3RoZXJ3aXNlLCdDYW5ub3Qgc3BlY2lmeSBcIm90aGVyd2lzZVwiIGluc2lkZSBhbmQgb3V0c2lkZSBhIFwic3dpdGNoXCInKTtjb25zdCB0PXZvaWQgMCE9PWkub3RoZXJ3aXNlP2kub3RoZXJ3aXNlOnIub3RoZXJ3aXNlO3ZvaWQgMCE9PXQmJihzKHZvaWQgMD09PWwuYnJlYWssXCJDYW5ub3Qgc3BlY2lmeSBib3RoIG90aGVyd2lzZSBhbmQgYnJlYWtcIiksYy5vdGhlcndpc2U9ZS4kX2NvbXBpbGUodCkpfWwuc3dpdGNoLnB1c2goYyl9cmV0dXJuIGx9LGEuY29uZGl0aW9uPWZ1bmN0aW9uKGUsdCl7Zm9yKGNvbnN0IHIgb2ZbXCJ0aGVuXCIsXCJvdGhlcndpc2VcIl0pdm9pZCAwPT09dFtyXT9kZWxldGUgdFtyXTp0W3JdPWUuJF9jb21waWxlKHRbcl0pO3JldHVybiB0fX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2NvbnN0IHM9cigwKSxuPXt9O2UuZXhwb3J0cz1mdW5jdGlvbihlLHQscil7aWYoITE9PT10fHxudWxsPT10KXJldHVybiBlO1wic3RyaW5nXCI9PXR5cGVvZihyPXJ8fHt9KSYmKHI9e3NlcGFyYXRvcjpyfSk7Y29uc3Qgbz1BcnJheS5pc0FycmF5KHQpO3MoIW98fCFyLnNlcGFyYXRvcixcIlNlcGFyYXRvciBvcHRpb24gbm8gdmFsaWQgZm9yIGFycmF5LWJhc2VkIGNoYWluXCIpO2NvbnN0IGE9bz90OnQuc3BsaXQoci5zZXBhcmF0b3J8fFwiLlwiKTtsZXQgaT1lO2ZvcihsZXQgZT0wO2U8YS5sZW5ndGg7KytlKXtsZXQgbz1hW2VdO2NvbnN0IGw9ci5pdGVyYWJsZXMmJm4uaXRlcmFibGVzKGkpO2lmKEFycmF5LmlzQXJyYXkoaSl8fFwic2V0XCI9PT1sKXtjb25zdCBlPU51bWJlcihvKTtOdW1iZXIuaXNJbnRlZ2VyKGUpJiYobz1lPDA/aS5sZW5ndGgrZTplKX1pZighaXx8XCJmdW5jdGlvblwiPT10eXBlb2YgaSYmITE9PT1yLmZ1bmN0aW9uc3x8IWwmJnZvaWQgMD09PWlbb10pe3MoIXIuc3RyaWN0fHxlKzE9PT1hLmxlbmd0aCxcIk1pc3Npbmcgc2VnbWVudFwiLG8sXCJpbiByZWFjaCBwYXRoIFwiLHQpLHMoXCJvYmplY3RcIj09dHlwZW9mIGl8fCEwPT09ci5mdW5jdGlvbnN8fFwiZnVuY3Rpb25cIiE9dHlwZW9mIGksXCJJbnZhbGlkIHNlZ21lbnRcIixvLFwiaW4gcmVhY2ggcGF0aCBcIix0KSxpPXIuZGVmYXVsdDticmVha31pPWw/XCJzZXRcIj09PWw/Wy4uLmldW29dOmkuZ2V0KG8pOmlbb119cmV0dXJuIGl9LG4uaXRlcmFibGVzPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgU2V0P1wic2V0XCI6ZSBpbnN0YW5jZW9mIE1hcD9cIm1hcFwiOnZvaWQgMH19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtjb25zdCBzPXIoMCksbj1yKDIpLG89cig2KTt0LmNvbXBpbGU9ZnVuY3Rpb24oZSx0KXtpZihcInN0cmluZ1wiPT10eXBlb2YgZSlyZXR1cm4gcyghdCxcIkNhbm5vdCBzZXQgc2luZ2xlIG1lc3NhZ2Ugc3RyaW5nXCIpLG5ldyBvKGUpO2lmKG8uaXNUZW1wbGF0ZShlKSlyZXR1cm4gcyghdCxcIkNhbm5vdCBzZXQgc2luZ2xlIG1lc3NhZ2UgdGVtcGxhdGVcIiksZTtzKFwib2JqZWN0XCI9PXR5cGVvZiBlJiYhQXJyYXkuaXNBcnJheShlKSxcIkludmFsaWQgbWVzc2FnZSBvcHRpb25zXCIpLHQ9dD9uKHQpOnt9O2ZvcihsZXQgciBpbiBlKXtjb25zdCBuPWVbcl07aWYoXCJyb290XCI9PT1yfHxvLmlzVGVtcGxhdGUobikpe3Rbcl09bjtjb250aW51ZX1pZihcInN0cmluZ1wiPT10eXBlb2Ygbil7dFtyXT1uZXcgbyhuKTtjb250aW51ZX1zKFwib2JqZWN0XCI9PXR5cGVvZiBuJiYhQXJyYXkuaXNBcnJheShuKSxcIkludmFsaWQgbWVzc2FnZSBmb3JcIixyKTtjb25zdCBhPXI7Zm9yKHIgaW4gdFthXT10W2FdfHx7fSxuKXtjb25zdCBlPW5bcl07XCJyb290XCI9PT1yfHxvLmlzVGVtcGxhdGUoZSk/dFthXVtyXT1lOihzKFwic3RyaW5nXCI9PXR5cGVvZiBlLFwiSW52YWxpZCBtZXNzYWdlIGZvclwiLHIsXCJpblwiLGEpLHRbYV1bcl09bmV3IG8oZSkpfX1yZXR1cm4gdH0sdC5kZWNvbXBpbGU9ZnVuY3Rpb24oZSl7Y29uc3QgdD17fTtmb3IobGV0IHIgaW4gZSl7Y29uc3Qgcz1lW3JdO2lmKFwicm9vdFwiPT09cil7dFtyXT1zO2NvbnRpbnVlfWlmKG8uaXNUZW1wbGF0ZShzKSl7dFtyXT1zLmRlc2NyaWJlKHtjb21wYWN0OiEwfSk7Y29udGludWV9Y29uc3Qgbj1yO2ZvcihyIGluIHRbbl09e30scyl7Y29uc3QgZT1zW3JdO1wicm9vdFwiIT09cj90W25dW3JdPWUuZGVzY3JpYmUoe2NvbXBhY3Q6ITB9KTp0W25dW3JdPWV9fXJldHVybiB0fSx0Lm1lcmdlPWZ1bmN0aW9uKGUscil7aWYoIWUpcmV0dXJuIHQuY29tcGlsZShyKTtpZighcilyZXR1cm4gZTtpZihcInN0cmluZ1wiPT10eXBlb2YgcilyZXR1cm4gbmV3IG8ocik7aWYoby5pc1RlbXBsYXRlKHIpKXJldHVybiByO2NvbnN0IGE9bihlKTtmb3IobGV0IGUgaW4gcil7Y29uc3QgdD1yW2VdO2lmKFwicm9vdFwiPT09ZXx8by5pc1RlbXBsYXRlKHQpKXthW2VdPXQ7Y29udGludWV9aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpe2FbZV09bmV3IG8odCk7Y29udGludWV9cyhcIm9iamVjdFwiPT10eXBlb2YgdCYmIUFycmF5LmlzQXJyYXkodCksXCJJbnZhbGlkIG1lc3NhZ2UgZm9yXCIsZSk7Y29uc3Qgbj1lO2ZvcihlIGluIGFbbl09YVtuXXx8e30sdCl7Y29uc3Qgcj10W2VdO1wicm9vdFwiPT09ZXx8by5pc1RlbXBsYXRlKHIpP2Fbbl1bZV09cjoocyhcInN0cmluZ1wiPT10eXBlb2YgcixcIkludmFsaWQgbWVzc2FnZSBmb3JcIixlLFwiaW5cIixuKSxhW25dW2VdPW5ldyBvKHIpKX19cmV0dXJuIGF9fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7Y29uc3Qgcz1yKDgpLG49e307dC5rZXlzPWZ1bmN0aW9uKGUpe2xldCB0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp7fTtyZXR1cm4hMSE9PXQuc3ltYm9scz9SZWZsZWN0Lm93bktleXMoZSk6T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZSl9LHQuc3RvcmU9ZnVuY3Rpb24oZSx0KXtjb25zdCByPW5ldyBNYXA7Zm9yKGxldCBvPTA7bzx0Lmxlbmd0aDsrK28pe2NvbnN0IGE9dFtvXSxpPXMoZSxhKTtcIm9iamVjdFwiIT10eXBlb2YgaSYmXCJmdW5jdGlvblwiIT10eXBlb2YgaXx8KHIuc2V0KGEsaSksbi5yZWFjaFNldChlLGEsdm9pZCAwKSl9cmV0dXJuIHJ9LHQucmVzdG9yZT1mdW5jdGlvbihlLHQscil7Zm9yKGNvbnN0W3Msb11vZiByKW4ucmVhY2hTZXQoZSxzLG8pLG4ucmVhY2hTZXQodCxzLG8pfSxuLnJlYWNoU2V0PWZ1bmN0aW9uKGUsdCxyKXtjb25zdCBzPUFycmF5LmlzQXJyYXkodCk/dDp0LnNwbGl0KFwiLlwiKTtsZXQgbj1lO2ZvcihsZXQgZT0wO2U8cy5sZW5ndGg7KytlKXtjb25zdCB0PXNbZV07ZSsxPT09cy5sZW5ndGgmJihuW3RdPXIpLG49blt0XX19fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7Y29uc3Qgcz1yKDE0KSxuPXttaXNtYXRjaGVkOm51bGx9O2UuZXhwb3J0cz1mdW5jdGlvbihlLHQscil7cmV0dXJuIHI9T2JqZWN0LmFzc2lnbih7cHJvdG90eXBlOiEwfSxyKSwhIW4uaXNEZWVwRXF1YWwoZSx0LHIsW10pfSxuLmlzRGVlcEVxdWFsPWZ1bmN0aW9uKGUsdCxyLG8pe2lmKGU9PT10KXJldHVybiAwIT09ZXx8MS9lPT0xL3Q7Y29uc3QgYT10eXBlb2YgZTtpZihhIT09dHlwZW9mIHQpcmV0dXJuITE7aWYobnVsbD09PWV8fG51bGw9PT10KXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09PWEpe2lmKCFyLmRlZXBGdW5jdGlvbnx8ZS50b1N0cmluZygpIT09dC50b1N0cmluZygpKXJldHVybiExfWVsc2UgaWYoXCJvYmplY3RcIiE9PWEpcmV0dXJuIGUhPWUmJnQhPXQ7Y29uc3QgaT1uLmdldFNoYXJlZFR5cGUoZSx0LCEhci5wcm90b3R5cGUpO3N3aXRjaChpKXtjYXNlIHMuYnVmZmVyOnJldHVybiExO2Nhc2Ugcy5wcm9taXNlOnJldHVybiBlPT09dDtjYXNlIHMucmVnZXg6cmV0dXJuIGUudG9TdHJpbmcoKT09PXQudG9TdHJpbmcoKTtjYXNlIG4ubWlzbWF0Y2hlZDpyZXR1cm4hMX1mb3IobGV0IHI9by5sZW5ndGgtMTtyPj0wOy0tcilpZihvW3JdLmlzU2FtZShlLHQpKXJldHVybiEwO28ucHVzaChuZXcgbi5TZWVuRW50cnkoZSx0KSk7dHJ5e3JldHVybiEhbi5pc0RlZXBFcXVhbE9iaihpLGUsdCxyLG8pfWZpbmFsbHl7by5wb3AoKX19LG4uZ2V0U2hhcmVkVHlwZT1mdW5jdGlvbihlLHQscil7aWYocilyZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKGUpIT09T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpP24ubWlzbWF0Y2hlZDpzLmdldEludGVybmFsUHJvdG8oZSk7Y29uc3Qgbz1zLmdldEludGVybmFsUHJvdG8oZSk7cmV0dXJuIG8hPT1zLmdldEludGVybmFsUHJvdG8odCk/bi5taXNtYXRjaGVkOm99LG4udmFsdWVPZj1mdW5jdGlvbihlKXtjb25zdCB0PWUudmFsdWVPZjtpZih2b2lkIDA9PT10KXJldHVybiBlO3RyeXtyZXR1cm4gdC5jYWxsKGUpfWNhdGNoKGUpe3JldHVybiBlfX0sbi5oYXNPd25FbnVtZXJhYmxlUHJvcGVydHk9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKGUsdCl9LG4uaXNTZXRTaW1wbGVFcXVhbD1mdW5jdGlvbihlLHQpe2Zvcihjb25zdCByIG9mIGUpaWYoIXQuaGFzKHIpKXJldHVybiExO3JldHVybiEwfSxuLmlzRGVlcEVxdWFsT2JqPWZ1bmN0aW9uKGUsdCxyLG8sYSl7Y29uc3R7aXNEZWVwRXF1YWw6aSx2YWx1ZU9mOmwsaGFzT3duRW51bWVyYWJsZVByb3BlcnR5OmN9PW4se2tleXM6dSxnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6Zn09T2JqZWN0O2lmKGU9PT1zLmFycmF5KXtpZighby5wYXJ0KXtpZih0Lmxlbmd0aCE9PXIubGVuZ3RoKXJldHVybiExO2ZvcihsZXQgZT0wO2U8dC5sZW5ndGg7KytlKWlmKCFpKHRbZV0scltlXSxvLGEpKXJldHVybiExO3JldHVybiEwfWZvcihjb25zdCBlIG9mIHQpZm9yKGNvbnN0IHQgb2YgcilpZihpKGUsdCxvLGEpKXJldHVybiEwfWVsc2UgaWYoZT09PXMuc2V0KXtpZih0LnNpemUhPT1yLnNpemUpcmV0dXJuITE7aWYoIW4uaXNTZXRTaW1wbGVFcXVhbCh0LHIpKXtjb25zdCBlPW5ldyBTZXQocik7Zm9yKGNvbnN0IHIgb2YgdCl7aWYoZS5kZWxldGUocikpY29udGludWU7bGV0IHQ9ITE7Zm9yKGNvbnN0IHMgb2YgZSlpZihpKHIscyxvLGEpKXtlLmRlbGV0ZShzKSx0PSEwO2JyZWFrfWlmKCF0KXJldHVybiExfX19ZWxzZSBpZihlPT09cy5tYXApe2lmKHQuc2l6ZSE9PXIuc2l6ZSlyZXR1cm4hMTtmb3IoY29uc3RbZSxzXW9mIHQpe2lmKHZvaWQgMD09PXMmJiFyLmhhcyhlKSlyZXR1cm4hMTtpZighaShzLHIuZ2V0KGUpLG8sYSkpcmV0dXJuITF9fWVsc2UgaWYoZT09PXMuZXJyb3ImJih0Lm5hbWUhPT1yLm5hbWV8fHQubWVzc2FnZSE9PXIubWVzc2FnZSkpcmV0dXJuITE7Y29uc3QgaD1sKHQpLG09bChyKTtpZigodCE9PWh8fHIhPT1tKSYmIWkoaCxtLG8sYSkpcmV0dXJuITE7Y29uc3QgZD11KHQpO2lmKCFvLnBhcnQmJmQubGVuZ3RoIT09dShyKS5sZW5ndGgmJiFvLnNraXApcmV0dXJuITE7bGV0IHA9MDtmb3IoY29uc3QgZSBvZiBkKWlmKG8uc2tpcCYmby5za2lwLmluY2x1ZGVzKGUpKXZvaWQgMD09PXJbZV0mJisrcDtlbHNle2lmKCFjKHIsZSkpcmV0dXJuITE7aWYoIWkodFtlXSxyW2VdLG8sYSkpcmV0dXJuITF9aWYoIW8ucGFydCYmZC5sZW5ndGgtcCE9PXUocikubGVuZ3RoKXJldHVybiExO2lmKCExIT09by5zeW1ib2xzKXtjb25zdCBlPWYodCkscz1uZXcgU2V0KGYocikpO2Zvcihjb25zdCBuIG9mIGUpe2lmKCFvLnNraXB8fCFvLnNraXAuaW5jbHVkZXMobikpaWYoYyh0LG4pKXtpZighYyhyLG4pKXJldHVybiExO2lmKCFpKHRbbl0scltuXSxvLGEpKXJldHVybiExfWVsc2UgaWYoYyhyLG4pKXJldHVybiExO3MuZGVsZXRlKG4pfWZvcihjb25zdCBlIG9mIHMpaWYoYyhyLGUpKXJldHVybiExfXJldHVybiEwfSxuLlNlZW5FbnRyeT1jbGFzc3tjb25zdHJ1Y3RvcihlLHQpe3RoaXMub2JqPWUsdGhpcy5yZWY9dH1pc1NhbWUoZSx0KXtyZXR1cm4gdGhpcy5vYmo9PT1lJiZ0aGlzLnJlZj09PXR9fX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2NvbnN0IHM9cigwKSxuPXIoMiksbz1yKDE1KSxhPXIoMSksaT1yKDcpLGw9cig0KSxjPXIoMTcpLHU9cigxOCksZj1yKDUpLGg9cig2KSxtPXIoMTkpO2xldCBkO2NvbnN0IHA9e3R5cGVzOnthbHRlcm5hdGl2ZXM6cigzMSksYW55OnIoMyksYXJyYXk6cigzNyksYm9vbGVhbjpyKDM4KSxkYXRlOnIoMzkpLGZ1bmN0aW9uOnIoNDApLGxpbms6cig0MyksbnVtYmVyOnIoNDQpLG9iamVjdDpyKDQ1KSxzdHJpbmc6cig0Niksc3ltYm9sOnIoNTApfSxhbGlhc2VzOnthbHQ6XCJhbHRlcm5hdGl2ZXNcIixib29sOlwiYm9vbGVhblwiLGZ1bmM6XCJmdW5jdGlvblwifX07cC5yb290PWZ1bmN0aW9uKCl7Y29uc3QgZT17X3R5cGVzOm5ldyBTZXQoT2JqZWN0LmtleXMocC50eXBlcykpfTtmb3IoY29uc3QgdCBvZiBlLl90eXBlcyllW3RdPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPWFyZ3VtZW50cy5sZW5ndGgscj1uZXcgQXJyYXkoZSksbj0wO248ZTtuKyspcltuXT1hcmd1bWVudHNbbl07cmV0dXJuIHMoIXIubGVuZ3RofHxbXCJhbHRlcm5hdGl2ZXNcIixcImxpbmtcIixcIm9iamVjdFwiXS5pbmNsdWRlcyh0KSxcIlRoZVwiLHQsXCJ0eXBlIGRvZXMgbm90IGFsbG93IGFyZ3VtZW50c1wiKSxwLmdlbmVyYXRlKHRoaXMscC50eXBlc1t0XSxyKX07Zm9yKGNvbnN0IHQgb2ZbXCJhbGxvd1wiLFwiY3VzdG9tXCIsXCJkaXNhbGxvd1wiLFwiZXF1YWxcIixcImV4aXN0XCIsXCJmb3JiaWRkZW5cIixcImludmFsaWRcIixcIm5vdFwiLFwib25seVwiLFwib3B0aW9uYWxcIixcIm9wdGlvbnNcIixcInByZWZzXCIsXCJwcmVmZXJlbmNlc1wiLFwicmVxdWlyZWRcIixcInN0cmlwXCIsXCJ2YWxpZFwiLFwid2hlblwiXSllW3RdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYW55KClbdF0oLi4uYXJndW1lbnRzKX07T2JqZWN0LmFzc2lnbihlLHAubWV0aG9kcyk7Zm9yKGNvbnN0IHQgaW4gcC5hbGlhc2VzKXtjb25zdCByPXAuYWxpYXNlc1t0XTtlW3RdPWVbcl19cmV0dXJuIGUueD1lLmV4cHJlc3Npb24sbS5zZXR1cCYmbS5zZXR1cChlKSxlfSxwLm1ldGhvZHM9e1ZhbGlkYXRpb25FcnJvcjpsLlZhbGlkYXRpb25FcnJvcix2ZXJzaW9uOmEudmVyc2lvbixjYWNoZTpvLnByb3ZpZGVyLGFzc2VydChlLHQpe2Zvcih2YXIgcj1hcmd1bWVudHMubGVuZ3RoLHM9bmV3IEFycmF5KHI+Mj9yLTI6MCksbj0yO248cjtuKyspc1tuLTJdPWFyZ3VtZW50c1tuXTtwLmFzc2VydChlLHQsITAscyl9LGF0dGVtcHQoZSx0KXtmb3IodmFyIHI9YXJndW1lbnRzLmxlbmd0aCxzPW5ldyBBcnJheShyPjI/ci0yOjApLG49MjtuPHI7bisrKXNbbi0yXT1hcmd1bWVudHNbbl07cmV0dXJuIHAuYXNzZXJ0KGUsdCwhMSxzKX0sYnVpbGQoZSl7cmV0dXJuIHMoXCJmdW5jdGlvblwiPT10eXBlb2YgdS5idWlsZCxcIk1hbmlmZXN0IGZ1bmN0aW9uYWxpdHkgZGlzYWJsZWRcIiksdS5idWlsZCh0aGlzLGUpfSxjaGVja1ByZWZlcmVuY2VzKGUpe2EuY2hlY2tQcmVmZXJlbmNlcyhlKX0sY29tcGlsZShlLHQpe3JldHVybiBpLmNvbXBpbGUodGhpcyxlLHQpfSxkZWZhdWx0cyhlKXtzKFwiZnVuY3Rpb25cIj09dHlwZW9mIGUsXCJtb2RpZmllciBtdXN0IGJlIGEgZnVuY3Rpb25cIik7Y29uc3QgdD1PYmplY3QuYXNzaWduKHt9LHRoaXMpO2Zvcihjb25zdCByIG9mIHQuX3R5cGVzKXtjb25zdCBuPWUodFtyXSgpKTtzKGEuaXNTY2hlbWEobiksXCJtb2RpZmllciBtdXN0IHJldHVybiBhIHZhbGlkIHNjaGVtYSBvYmplY3RcIiksdFtyXT1mdW5jdGlvbigpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLHQ9bmV3IEFycmF5KGUpLHI9MDtyPGU7cisrKXRbcl09YXJndW1lbnRzW3JdO3JldHVybiBwLmdlbmVyYXRlKHRoaXMsbix0KX19cmV0dXJuIHR9LGV4cHJlc3Npb24oKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aCx0PW5ldyBBcnJheShlKSxyPTA7cjxlO3IrKyl0W3JdPWFyZ3VtZW50c1tyXTtyZXR1cm4gbmV3IGgoLi4udCl9LGV4dGVuZCgpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLHQ9bmV3IEFycmF5KGUpLG49MDtuPGU7bisrKXRbbl09YXJndW1lbnRzW25dO2EudmVyaWZ5RmxhdCh0LFwiZXh0ZW5kXCIpLGQ9ZHx8cigxNikscyh0Lmxlbmd0aCxcIllvdSBuZWVkIHRvIHByb3ZpZGUgYXQgbGVhc3Qgb25lIGV4dGVuc2lvblwiKSx0aGlzLmFzc2VydCh0LGQuZXh0ZW5zaW9ucyk7Y29uc3Qgbz1PYmplY3QuYXNzaWduKHt9LHRoaXMpO28uX3R5cGVzPW5ldyBTZXQoby5fdHlwZXMpO2ZvcihsZXQgZSBvZiB0KXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBlJiYoZT1lKG8pKSx0aGlzLmFzc2VydChlLGQuZXh0ZW5zaW9uKSxzKHZvaWQgMD09PW9bZS50eXBlXXx8by5fdHlwZXMuaGFzKGUudHlwZSksXCJDYW5ub3Qgb3ZlcnJpZGUgbmFtZVwiLGUudHlwZSk7Y29uc3QgdD1lLmJhc2V8fHRoaXMuYW55KCkscj1jLnR5cGUodCxlKTtvLl90eXBlcy5hZGQoZS50eXBlKSxvW2UudHlwZV09ZnVuY3Rpb24oKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aCx0PW5ldyBBcnJheShlKSxzPTA7czxlO3MrKyl0W3NdPWFyZ3VtZW50c1tzXTtyZXR1cm4gcC5nZW5lcmF0ZSh0aGlzLHIsdCl9fXJldHVybiBvfSxpc0V4cHJlc3Npb246aC5pc1RlbXBsYXRlLGlzUmVmOmYuaXNSZWYsaXNTY2hlbWE6YS5pc1NjaGVtYSxpbigpe3JldHVybiBmLmluKC4uLmFyZ3VtZW50cyl9LG92ZXJyaWRlOmEuc3ltYm9scy5vdmVycmlkZSxyZWYoKXtyZXR1cm4gZi5jcmVhdGUoLi4uYXJndW1lbnRzKX0sdHlwZXMoKXtjb25zdCBlPXt9O2Zvcihjb25zdCB0IG9mIHRoaXMuX3R5cGVzKWVbdF09dGhpc1t0XSgpO2Zvcihjb25zdCB0IGluIHAuYWxpYXNlcyllW3RdPXRoaXNbdF0oKTtyZXR1cm4gZX19LHAuYXNzZXJ0PWZ1bmN0aW9uKGUsdCxyLHMpe2NvbnN0IG89c1swXWluc3RhbmNlb2YgRXJyb3J8fFwic3RyaW5nXCI9PXR5cGVvZiBzWzBdP3NbMF06bnVsbCxpPW8/c1sxXTpzWzBdLGM9dC52YWxpZGF0ZShlLGEucHJlZmVyZW5jZXMoe2Vycm9yczp7c3RhY2s6ITB9fSxpfHx7fSkpO2xldCB1PWMuZXJyb3I7aWYoIXUpcmV0dXJuIGMudmFsdWU7aWYobyBpbnN0YW5jZW9mIEVycm9yKXRocm93IG87Y29uc3QgZj0ocj1yJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiB1LmFubm90YXRlKT91LmFubm90YXRlKCk6dS5tZXNzYWdlO3Rocm93IHUgaW5zdGFuY2VvZiBsLlZhbGlkYXRpb25FcnJvcj09ITEmJih1PW4odSkpLHUubWVzc2FnZT1vP1wiXCIuY29uY2F0KG8sXCIgXCIpLmNvbmNhdChmKTpmLHV9LHAuZ2VuZXJhdGU9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBzKGUsXCJNdXN0IGJlIGludm9rZWQgb24gYSBKb2kgaW5zdGFuY2UuXCIpLHQuJF9yb290PWUsdC5fZGVmaW5pdGlvbi5hcmdzJiZyLmxlbmd0aD90Ll9kZWZpbml0aW9uLmFyZ3ModCwuLi5yKTp0fSxlLmV4cG9ydHM9cC5yb290KCl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtjb25zdCBzPXIoMjcpO2UuZXhwb3J0cz1jbGFzcyBleHRlbmRzIEVycm9ye2NvbnN0cnVjdG9yKGUpe3N1cGVyKGUuZmlsdGVyKGU9PlwiXCIhPT1lKS5tYXAoZT0+XCJzdHJpbmdcIj09dHlwZW9mIGU/ZTplIGluc3RhbmNlb2YgRXJyb3I/ZS5tZXNzYWdlOnMoZSkpLmpvaW4oXCIgXCIpfHxcIlVua25vd24gZXJyb3JcIiksXCJmdW5jdGlvblwiPT10eXBlb2YgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UmJkVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsdC5hc3NlcnQpfX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtjb25zdCBzPXt9O3Q9ZS5leHBvcnRzPXthcnJheTpBcnJheS5wcm90b3R5cGUsYnVmZmVyOiExLGRhdGU6RGF0ZS5wcm90b3R5cGUsZXJyb3I6RXJyb3IucHJvdG90eXBlLGdlbmVyaWM6T2JqZWN0LnByb3RvdHlwZSxtYXA6TWFwLnByb3RvdHlwZSxwcm9taXNlOlByb21pc2UucHJvdG90eXBlLHJlZ2V4OlJlZ0V4cC5wcm90b3R5cGUsc2V0OlNldC5wcm90b3R5cGUsd2Vha01hcDpXZWFrTWFwLnByb3RvdHlwZSx3ZWFrU2V0OldlYWtTZXQucHJvdG90eXBlfSxzLnR5cGVNYXA9bmV3IE1hcChbW1wiW29iamVjdCBFcnJvcl1cIix0LmVycm9yXSxbXCJbb2JqZWN0IE1hcF1cIix0Lm1hcF0sW1wiW29iamVjdCBQcm9taXNlXVwiLHQucHJvbWlzZV0sW1wiW29iamVjdCBTZXRdXCIsdC5zZXRdLFtcIltvYmplY3QgV2Vha01hcF1cIix0LndlYWtNYXBdLFtcIltvYmplY3QgV2Vha1NldF1cIix0LndlYWtTZXRdXSksdC5nZXRJbnRlcm5hbFByb3RvPWZ1bmN0aW9uKGUpe2lmKEFycmF5LmlzQXJyYXkoZSkpcmV0dXJuIHQuYXJyYXk7aWYoZSBpbnN0YW5jZW9mIERhdGUpcmV0dXJuIHQuZGF0ZTtpZihlIGluc3RhbmNlb2YgUmVnRXhwKXJldHVybiB0LnJlZ2V4O2lmKGUgaW5zdGFuY2VvZiBFcnJvcilyZXR1cm4gdC5lcnJvcjtjb25zdCByPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKTtyZXR1cm4gcy50eXBlTWFwLmdldChyKXx8dC5nZW5lcmljfX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2NvbnN0IHM9cigwKSxuPXIoMiksbz1yKDEpLGE9e21heDoxZTMsc3VwcG9ydGVkOm5ldyBTZXQoW1widW5kZWZpbmVkXCIsXCJib29sZWFuXCIsXCJudW1iZXJcIixcInN0cmluZ1wiXSl9O3QucHJvdmlkZXI9e3Byb3Zpc2lvbjplPT5uZXcgYS5DYWNoZShlKX0sYS5DYWNoZT1jbGFzc3tjb25zdHJ1Y3Rvcigpe2xldCBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp7fTtvLmFzc2VydE9wdGlvbnMoZSxbXCJtYXhcIl0pLHModm9pZCAwPT09ZS5tYXh8fGUubWF4JiZlLm1heD4wJiZpc0Zpbml0ZShlLm1heCksXCJJbnZhbGlkIG1heCBjYWNoZSBzaXplXCIpLHRoaXMuX21heD1lLm1heHx8YS5tYXgsdGhpcy5fbWFwPW5ldyBNYXAsdGhpcy5fbGlzdD1uZXcgYS5MaXN0fWdldCBsZW5ndGgoKXtyZXR1cm4gdGhpcy5fbWFwLnNpemV9c2V0KGUsdCl7aWYobnVsbCE9PWUmJiFhLnN1cHBvcnRlZC5oYXModHlwZW9mIGUpKXJldHVybjtsZXQgcj10aGlzLl9tYXAuZ2V0KGUpO2lmKHIpcmV0dXJuIHIudmFsdWU9dCx2b2lkIHRoaXMuX2xpc3QuZmlyc3Qocik7cj10aGlzLl9saXN0LnVuc2hpZnQoe2tleTplLHZhbHVlOnR9KSx0aGlzLl9tYXAuc2V0KGUsciksdGhpcy5fY29tcGFjdCgpfWdldChlKXtjb25zdCB0PXRoaXMuX21hcC5nZXQoZSk7aWYodClyZXR1cm4gdGhpcy5fbGlzdC5maXJzdCh0KSxuKHQudmFsdWUpfV9jb21wYWN0KCl7aWYodGhpcy5fbWFwLnNpemU+dGhpcy5fbWF4KXtjb25zdCBlPXRoaXMuX2xpc3QucG9wKCk7dGhpcy5fbWFwLmRlbGV0ZShlLmtleSl9fX0sYS5MaXN0PWNsYXNze2NvbnN0cnVjdG9yKCl7dGhpcy50YWlsPW51bGwsdGhpcy5oZWFkPW51bGx9dW5zaGlmdChlKXtyZXR1cm4gZS5uZXh0PW51bGwsZS5wcmV2PXRoaXMuaGVhZCx0aGlzLmhlYWQmJih0aGlzLmhlYWQubmV4dD1lKSx0aGlzLmhlYWQ9ZSx0aGlzLnRhaWx8fCh0aGlzLnRhaWw9ZSksZX1maXJzdChlKXtlIT09dGhpcy5oZWFkJiYodGhpcy5fcmVtb3ZlKGUpLHRoaXMudW5zaGlmdChlKSl9cG9wKCl7cmV0dXJuIHRoaXMuX3JlbW92ZSh0aGlzLnRhaWwpfV9yZW1vdmUoZSl7Y29uc3R7bmV4dDp0LHByZXY6cn09ZTtyZXR1cm4gdC5wcmV2PXIsciYmKHIubmV4dD10KSxlPT09dGhpcy50YWlsJiYodGhpcy50YWlsPXQpLGUucHJldj1udWxsLGUubmV4dD1udWxsLGV9fX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2NvbnN0IHM9cigxMiksbj17fTt0LnByZWZlcmVuY2VzPXMub2JqZWN0KHthbGxvd1Vua25vd246cy5ib29sZWFuKCksYWJvcnRFYXJseTpzLmJvb2xlYW4oKSxjYWNoZTpzLmJvb2xlYW4oKSxjb250ZXh0OnMub2JqZWN0KCksY29udmVydDpzLmJvb2xlYW4oKSxkYXRlRm9ybWF0OnMudmFsaWQoXCJkYXRlXCIsXCJpc29cIixcInN0cmluZ1wiLFwidGltZVwiLFwidXRjXCIpLGRlYnVnOnMuYm9vbGVhbigpLGVycm9yczp7ZXNjYXBlSHRtbDpzLmJvb2xlYW4oKSxsYWJlbDpzLnZhbGlkKFwicGF0aFwiLFwia2V5XCIsITEpLGxhbmd1YWdlOltzLnN0cmluZygpLHMub2JqZWN0KCkucmVmKCldLHJlbmRlcjpzLmJvb2xlYW4oKSxzdGFjazpzLmJvb2xlYW4oKSx3cmFwQXJyYXlzOnMuYm9vbGVhbigpfSxleHRlcm5hbHM6cy5ib29sZWFuKCksbWVzc2FnZXM6cy5vYmplY3QoKSxub0RlZmF1bHRzOnMuYm9vbGVhbigpLG5vbkVudW1lcmFibGVzOnMuYm9vbGVhbigpLHByZXNlbmNlOnMudmFsaWQoXCJyZXF1aXJlZFwiLFwib3B0aW9uYWxcIixcImZvcmJpZGRlblwiKSxza2lwRnVuY3Rpb25zOnMuYm9vbGVhbigpLHN0cmlwVW5rbm93bjpzLm9iamVjdCh7YXJyYXlzOnMuYm9vbGVhbigpLG9iamVjdHM6cy5ib29sZWFuKCl9KS5vcihcImFycmF5c1wiLFwib2JqZWN0c1wiKS5hbGxvdyghMCwhMSksd2FybmluZ3M6cy5ib29sZWFuKCl9KS5zdHJpY3QoKSxuLm5hbWVSeD0vXlthLXpBLVowLTldKyQvLG4ucnVsZT1zLm9iamVjdCh7YWxpYXM6cy5hcnJheSgpLml0ZW1zKHMuc3RyaW5nKCkucGF0dGVybihuLm5hbWVSeCkpLnNpbmdsZSgpLGFyZ3M6cy5hcnJheSgpLml0ZW1zKHMuc3RyaW5nKCkscy5vYmplY3Qoe25hbWU6cy5zdHJpbmcoKS5wYXR0ZXJuKG4ubmFtZVJ4KS5yZXF1aXJlZCgpLHJlZjpzLmJvb2xlYW4oKSxhc3NlcnQ6cy5hbHRlcm5hdGl2ZXMoW3MuZnVuY3Rpb24oKSxzLm9iamVjdCgpLnNjaGVtYSgpXSkuY29uZGl0aW9uYWwoXCJyZWZcIix7aXM6ITAsdGhlbjpzLnJlcXVpcmVkKCl9KSxub3JtYWxpemU6cy5mdW5jdGlvbigpLG1lc3NhZ2U6cy5zdHJpbmcoKS53aGVuKFwiYXNzZXJ0XCIse2lzOnMuZnVuY3Rpb24oKSx0aGVuOnMucmVxdWlyZWQoKX0pfSkpLGNvbnZlcnQ6cy5ib29sZWFuKCksbWFuaWZlc3Q6cy5ib29sZWFuKCksbWV0aG9kOnMuZnVuY3Rpb24oKS5hbGxvdyghMSksbXVsdGk6cy5ib29sZWFuKCksdmFsaWRhdGU6cy5mdW5jdGlvbigpfSksdC5leHRlbnNpb249cy5vYmplY3Qoe3R5cGU6cy5zdHJpbmcoKS5yZXF1aXJlZCgpLGFyZ3M6cy5mdW5jdGlvbigpLGJhc2U6cy5vYmplY3QoKS5zY2hlbWEoKSxjb2VyY2U6W3MuZnVuY3Rpb24oKS5tYXhBcml0eSgzKSxzLm9iamVjdCh7bWV0aG9kOnMuZnVuY3Rpb24oKS5tYXhBcml0eSgzKS5yZXF1aXJlZCgpLGZyb206cy5hcnJheSgpLml0ZW1zKHMuc3RyaW5nKCkpLnNpbmdsZSgpfSldLGZsYWdzOnMub2JqZWN0KCkucGF0dGVybihuLm5hbWVSeCxzLm9iamVjdCh7c2V0dGVyOnMuc3RyaW5nKCksZGVmYXVsdDpzLmFueSgpfSkpLG1hbmlmZXN0OntidWlsZDpzLmZ1bmN0aW9uKCkuYXJpdHkoMil9LG1lc3NhZ2VzOltzLm9iamVjdCgpLHMuc3RyaW5nKCldLG1vZGlmaWVyczpzLm9iamVjdCgpLnBhdHRlcm4obi5uYW1lUngscy5mdW5jdGlvbigpLm1pbkFyaXR5KDEpLm1heEFyaXR5KDIpKSxvdmVycmlkZXM6cy5vYmplY3QoKS5wYXR0ZXJuKG4ubmFtZVJ4LHMuZnVuY3Rpb24oKSkscHJlcGFyZTpzLmZ1bmN0aW9uKCkubWF4QXJpdHkoMykscmVidWlsZDpzLmZ1bmN0aW9uKCkuYXJpdHkoMSkscnVsZXM6cy5vYmplY3QoKS5wYXR0ZXJuKG4ubmFtZVJ4LG4ucnVsZSksdGVybXM6cy5vYmplY3QoKS5wYXR0ZXJuKG4ubmFtZVJ4LHMub2JqZWN0KHtpbml0OnMuYXJyYXkoKS5hbGxvdyhudWxsKS5yZXF1aXJlZCgpLG1hbmlmZXN0OnMub2JqZWN0KCkucGF0dGVybigvLisvLFtzLnZhbGlkKFwic2NoZW1hXCIsXCJzaW5nbGVcIikscy5vYmplY3Qoe21hcHBlZDpzLm9iamVjdCh7ZnJvbTpzLnN0cmluZygpLnJlcXVpcmVkKCksdG86cy5zdHJpbmcoKS5yZXF1aXJlZCgpfSkucmVxdWlyZWQoKX0pXSl9KSksdmFsaWRhdGU6cy5mdW5jdGlvbigpLm1heEFyaXR5KDMpfSkuc3RyaWN0KCksdC5leHRlbnNpb25zPXMuYXJyYXkoKS5pdGVtcyhzLm9iamVjdCgpLHMuZnVuY3Rpb24oKS5hcml0eSgxKSkuc3RyaWN0KCksbi5kZXNjPXtidWZmZXI6cy5vYmplY3Qoe2J1ZmZlcjpzLnN0cmluZygpfSksZnVuYzpzLm9iamVjdCh7ZnVuY3Rpb246cy5mdW5jdGlvbigpLnJlcXVpcmVkKCksb3B0aW9uczp7bGl0ZXJhbDohMH19KSxvdmVycmlkZTpzLm9iamVjdCh7b3ZlcnJpZGU6ITB9KSxyZWY6cy5vYmplY3Qoe3JlZjpzLm9iamVjdCh7dHlwZTpzLnZhbGlkKFwidmFsdWVcIixcImdsb2JhbFwiLFwibG9jYWxcIikscGF0aDpzLmFycmF5KCkucmVxdWlyZWQoKSxzZXBhcmF0b3I6cy5zdHJpbmcoKS5sZW5ndGgoMSkuYWxsb3coITEpLGFuY2VzdG9yOnMubnVtYmVyKCkubWluKDApLmludGVnZXIoKS5hbGxvdyhcInJvb3RcIiksbWFwOnMuYXJyYXkoKS5pdGVtcyhzLmFycmF5KCkubGVuZ3RoKDIpKS5taW4oMSksYWRqdXN0OnMuZnVuY3Rpb24oKSxpdGVyYWJsZXM6cy5ib29sZWFuKCksaW46cy5ib29sZWFuKCl9KS5yZXF1aXJlZCgpfSkscmVnZXg6cy5vYmplY3Qoe3JlZ2V4OnMuc3RyaW5nKCkubWluKDMpfSksc3BlY2lhbDpzLm9iamVjdCh7c3BlY2lhbDpzLnZhbGlkKFwiZGVlcFwiKS5yZXF1aXJlZCgpfSksdGVtcGxhdGU6cy5vYmplY3Qoe3RlbXBsYXRlOnMuc3RyaW5nKCkucmVxdWlyZWQoKSxvcHRpb25zOnMub2JqZWN0KCl9KSx2YWx1ZTpzLm9iamVjdCh7dmFsdWU6cy5hbHRlcm5hdGl2ZXMoW3Mub2JqZWN0KCkscy5hcnJheSgpXSkucmVxdWlyZWQoKX0pfSxuLmRlc2MuZW50aXR5PXMuYWx0ZXJuYXRpdmVzKFtzLmFycmF5KCkuaXRlbXMocy5saW5rKFwiLi4uXCIpKSxzLmJvb2xlYW4oKSxzLmZ1bmN0aW9uKCkscy5udW1iZXIoKSxzLnN0cmluZygpLG4uZGVzYy5idWZmZXIsbi5kZXNjLmZ1bmMsbi5kZXNjLnJlZixuLmRlc2MucmVnZXgsbi5kZXNjLnNwZWNpYWwsbi5kZXNjLnRlbXBsYXRlLG4uZGVzYy52YWx1ZSxzLmxpbmsoXCIvXCIpXSksbi5kZXNjLnZhbHVlcz1zLmFycmF5KCkuaXRlbXMobnVsbCxzLmJvb2xlYW4oKSxzLmZ1bmN0aW9uKCkscy5udW1iZXIoKS5hbGxvdygxLzAsLTEvMCkscy5zdHJpbmcoKS5hbGxvdyhcIlwiKSxzLnN5bWJvbCgpLG4uZGVzYy5idWZmZXIsbi5kZXNjLmZ1bmMsbi5kZXNjLm92ZXJyaWRlLG4uZGVzYy5yZWYsbi5kZXNjLnJlZ2V4LG4uZGVzYy50ZW1wbGF0ZSxuLmRlc2MudmFsdWUpLG4uZGVzYy5tZXNzYWdlcz1zLm9iamVjdCgpLnBhdHRlcm4oLy4rLyxbcy5zdHJpbmcoKSxuLmRlc2MudGVtcGxhdGUscy5vYmplY3QoKS5wYXR0ZXJuKC8uKy8sW3Muc3RyaW5nKCksbi5kZXNjLnRlbXBsYXRlXSldKSx0LmRlc2NyaXB0aW9uPXMub2JqZWN0KHt0eXBlOnMuc3RyaW5nKCkucmVxdWlyZWQoKSxmbGFnczpzLm9iamVjdCh7Y2FzdDpzLnN0cmluZygpLGRlZmF1bHQ6cy5hbnkoKSxkZXNjcmlwdGlvbjpzLnN0cmluZygpLGVtcHR5OnMubGluayhcIi9cIiksZmFpbG92ZXI6bi5kZXNjLmVudGl0eSxpZDpzLnN0cmluZygpLGxhYmVsOnMuc3RyaW5nKCksb25seTohMCxwcmVzZW5jZTpbXCJvcHRpb25hbFwiLFwicmVxdWlyZWRcIixcImZvcmJpZGRlblwiXSxyZXN1bHQ6W1wicmF3XCIsXCJzdHJpcFwiXSxzdHJpcDpzLmJvb2xlYW4oKSx1bml0OnMuc3RyaW5nKCl9KS51bmtub3duKCkscHJlZmVyZW5jZXM6e2FsbG93VW5rbm93bjpzLmJvb2xlYW4oKSxhYm9ydEVhcmx5OnMuYm9vbGVhbigpLGNhY2hlOnMuYm9vbGVhbigpLGNvbnZlcnQ6cy5ib29sZWFuKCksZGF0ZUZvcm1hdDpbXCJkYXRlXCIsXCJpc29cIixcInN0cmluZ1wiLFwidGltZVwiLFwidXRjXCJdLGVycm9yczp7ZXNjYXBlSHRtbDpzLmJvb2xlYW4oKSxsYWJlbDpbXCJwYXRoXCIsXCJrZXlcIl0sbGFuZ3VhZ2U6W3Muc3RyaW5nKCksbi5kZXNjLnJlZl0sd3JhcEFycmF5czpzLmJvb2xlYW4oKX0sZXh0ZXJuYWxzOnMuYm9vbGVhbigpLG1lc3NhZ2VzOm4uZGVzYy5tZXNzYWdlcyxub0RlZmF1bHRzOnMuYm9vbGVhbigpLG5vbkVudW1lcmFibGVzOnMuYm9vbGVhbigpLHByZXNlbmNlOltcInJlcXVpcmVkXCIsXCJvcHRpb25hbFwiLFwiZm9yYmlkZGVuXCJdLHNraXBGdW5jdGlvbnM6cy5ib29sZWFuKCksc3RyaXBVbmtub3duOnMub2JqZWN0KHthcnJheXM6cy5ib29sZWFuKCksb2JqZWN0czpzLmJvb2xlYW4oKX0pLm9yKFwiYXJyYXlzXCIsXCJvYmplY3RzXCIpLmFsbG93KCEwLCExKSx3YXJuaW5nczpzLmJvb2xlYW4oKX0sYWxsb3c6bi5kZXNjLnZhbHVlcyxpbnZhbGlkOm4uZGVzYy52YWx1ZXMscnVsZXM6cy5hcnJheSgpLm1pbigxKS5pdGVtcyh7bmFtZTpzLnN0cmluZygpLnJlcXVpcmVkKCksYXJnczpzLm9iamVjdCgpLm1pbigxKSxrZWVwOnMuYm9vbGVhbigpLG1lc3NhZ2U6W3Muc3RyaW5nKCksbi5kZXNjLm1lc3NhZ2VzXSx3YXJuOnMuYm9vbGVhbigpfSksa2V5czpzLm9iamVjdCgpLnBhdHRlcm4oLy4qLyxzLmxpbmsoXCIvXCIpKSxsaW5rOm4uZGVzYy5yZWZ9KS5wYXR0ZXJuKC9eW2Etel1cXHcqJC8scy5hbnkoKSl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtjb25zdCBzPXIoMCksbj1yKDIpLG89cigxKSxhPXIoOSksaT17fTt0LnR5cGU9ZnVuY3Rpb24oZSx0KXtjb25zdCByPU9iamVjdC5nZXRQcm90b3R5cGVPZihlKSxsPW4ociksYz1lLl9hc3NpZ24oT2JqZWN0LmNyZWF0ZShsKSksdT1PYmplY3QuYXNzaWduKHt9LHQpO2RlbGV0ZSB1LmJhc2UsbC5fZGVmaW5pdGlvbj11O2NvbnN0IGY9ci5fZGVmaW5pdGlvbnx8e307dS5tZXNzYWdlcz1hLm1lcmdlKGYubWVzc2FnZXMsdS5tZXNzYWdlcyksdS5wcm9wZXJ0aWVzPU9iamVjdC5hc3NpZ24oe30sZi5wcm9wZXJ0aWVzLHUucHJvcGVydGllcyksYy50eXBlPXUudHlwZSx1LmZsYWdzPU9iamVjdC5hc3NpZ24oe30sZi5mbGFncyx1LmZsYWdzKTtjb25zdCBoPU9iamVjdC5hc3NpZ24oe30sZi50ZXJtcyk7aWYodS50ZXJtcylmb3IoY29uc3QgZSBpbiB1LnRlcm1zKXtjb25zdCB0PXUudGVybXNbZV07cyh2b2lkIDA9PT1jLiRfdGVybXNbZV0sXCJJbnZhbGlkIHRlcm0gb3ZlcnJpZGUgZm9yXCIsdS50eXBlLGUpLGMuJF90ZXJtc1tlXT10LmluaXQsaFtlXT10fXUudGVybXM9aCx1LmFyZ3N8fCh1LmFyZ3M9Zi5hcmdzKSx1LnByZXBhcmU9aS5wcmVwYXJlKHUucHJlcGFyZSxmLnByZXBhcmUpLHUuY29lcmNlJiYoXCJmdW5jdGlvblwiPT10eXBlb2YgdS5jb2VyY2UmJih1LmNvZXJjZT17bWV0aG9kOnUuY29lcmNlfSksdS5jb2VyY2UuZnJvbSYmIUFycmF5LmlzQXJyYXkodS5jb2VyY2UuZnJvbSkmJih1LmNvZXJjZT17bWV0aG9kOnUuY29lcmNlLm1ldGhvZCxmcm9tOltdLmNvbmNhdCh1LmNvZXJjZS5mcm9tKX0pKSx1LmNvZXJjZT1pLmNvZXJjZSh1LmNvZXJjZSxmLmNvZXJjZSksdS52YWxpZGF0ZT1pLnZhbGlkYXRlKHUudmFsaWRhdGUsZi52YWxpZGF0ZSk7Y29uc3QgbT1PYmplY3QuYXNzaWduKHt9LGYucnVsZXMpO2lmKHUucnVsZXMpZm9yKGNvbnN0IGUgaW4gdS5ydWxlcyl7Y29uc3QgdD11LnJ1bGVzW2VdO3MoXCJvYmplY3RcIj09dHlwZW9mIHQsXCJJbnZhbGlkIHJ1bGUgZGVmaW5pdGlvbiBmb3JcIix1LnR5cGUsZSk7bGV0IHI9dC5tZXRob2Q7aWYodm9pZCAwPT09ciYmKHI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kX2FkZFJ1bGUoZSl9KSxyJiYocyghbFtlXSxcIlJ1bGUgY29uZmxpY3QgaW5cIix1LnR5cGUsZSksbFtlXT1yKSxzKCFtW2VdLFwiUnVsZSBjb25mbGljdCBpblwiLHUudHlwZSxlKSxtW2VdPXQsdC5hbGlhcyl7Y29uc3QgZT1bXS5jb25jYXQodC5hbGlhcyk7Zm9yKGNvbnN0IHIgb2YgZSlsW3JdPXQubWV0aG9kfXQuYXJncyYmKHQuYXJnc0J5TmFtZT1uZXcgTWFwLHQuYXJncz10LmFyZ3MubWFwKGU9PihcInN0cmluZ1wiPT10eXBlb2YgZSYmKGU9e25hbWU6ZX0pLHMoIXQuYXJnc0J5TmFtZS5oYXMoZS5uYW1lKSxcIkR1cGxpY2F0ZWQgYXJndW1lbnQgbmFtZVwiLGUubmFtZSksby5pc1NjaGVtYShlLmFzc2VydCkmJihlLmFzc2VydD1lLmFzc2VydC5zdHJpY3QoKS5sYWJlbChlLm5hbWUpKSx0LmFyZ3NCeU5hbWUuc2V0KGUubmFtZSxlKSxlKSkpfXUucnVsZXM9bTtjb25zdCBkPU9iamVjdC5hc3NpZ24oe30sZi5tb2RpZmllcnMpO2lmKHUubW9kaWZpZXJzKWZvcihjb25zdCBlIGluIHUubW9kaWZpZXJzKXtzKCFsW2VdLFwiUnVsZSBjb25mbGljdCBpblwiLHUudHlwZSxlKTtjb25zdCB0PXUubW9kaWZpZXJzW2VdO3MoXCJmdW5jdGlvblwiPT10eXBlb2YgdCxcIkludmFsaWQgbW9kaWZpZXIgZGVmaW5pdGlvbiBmb3JcIix1LnR5cGUsZSk7Y29uc3Qgcj1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5ydWxlKHtbZV06dH0pfTtsW2VdPXIsZFtlXT10fWlmKHUubW9kaWZpZXJzPWQsdS5vdmVycmlkZXMpe2wuX3N1cGVyPXIsYy4kX3N1cGVyPXt9O2Zvcihjb25zdCBlIGluIHUub3ZlcnJpZGVzKXMocltlXSxcIkNhbm5vdCBvdmVycmlkZSBtaXNzaW5nXCIsZSksYy4kX3N1cGVyW2VdPXJbZV0uYmluZChjKTtPYmplY3QuYXNzaWduKGwsdS5vdmVycmlkZXMpfXUuY2FzdD1PYmplY3QuYXNzaWduKHt9LGYuY2FzdCx1LmNhc3QpO2NvbnN0IHA9T2JqZWN0LmFzc2lnbih7fSxmLm1hbmlmZXN0LHUubWFuaWZlc3QpO3JldHVybiBwLmJ1aWxkPWkuYnVpbGQodS5tYW5pZmVzdCYmdS5tYW5pZmVzdC5idWlsZCxmLm1hbmlmZXN0JiZmLm1hbmlmZXN0LmJ1aWxkKSx1Lm1hbmlmZXN0PXAsdS5yZWJ1aWxkPWkucmVidWlsZCh1LnJlYnVpbGQsZi5yZWJ1aWxkKSxjfSxpLmJ1aWxkPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUmJnQ/ZnVuY3Rpb24ocixzKXtyZXR1cm4gdChlKHIscykscyl9OmV8fHR9LGkuY29lcmNlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUmJnQ/e2Zyb206ZS5mcm9tJiZ0LmZyb20/Wy4uLm5ldyBTZXQoWy4uLmUuZnJvbSwuLi50LmZyb21dKV06bnVsbCxtZXRob2QocixzKXtsZXQgbjtpZigoIXQuZnJvbXx8dC5mcm9tLmluY2x1ZGVzKHR5cGVvZiByKSkmJihuPXQubWV0aG9kKHIscykpKXtpZihuLmVycm9yc3x8dm9pZCAwPT09bi52YWx1ZSlyZXR1cm4gbjtyPW4udmFsdWV9aWYoIWUuZnJvbXx8ZS5mcm9tLmluY2x1ZGVzKHR5cGVvZiByKSl7Y29uc3QgdD1lLm1ldGhvZChyLHMpO2lmKHQpcmV0dXJuIHR9cmV0dXJuIG59fTplfHx0fSxpLnByZXBhcmU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZSYmdD9mdW5jdGlvbihyLHMpe2NvbnN0IG49ZShyLHMpO2lmKG4pe2lmKG4uZXJyb3JzfHx2b2lkIDA9PT1uLnZhbHVlKXJldHVybiBuO3I9bi52YWx1ZX1yZXR1cm4gdChyLHMpfHxufTplfHx0fSxpLnJlYnVpbGQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZSYmdD9mdW5jdGlvbihyKXt0KHIpLGUocil9OmV8fHR9LGkudmFsaWRhdGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZSYmdD9mdW5jdGlvbihyLHMpe2NvbnN0IG49dChyLHMpO2lmKG4pe2lmKG4uZXJyb3JzJiYoIUFycmF5LmlzQXJyYXkobi5lcnJvcnMpfHxuLmVycm9ycy5sZW5ndGgpKXJldHVybiBuO3I9bi52YWx1ZX1yZXR1cm4gZShyLHMpfHxufTplfHx0fX0sZnVuY3Rpb24oZSx0KXt9LGZ1bmN0aW9uKGUsdCl7fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7Y29uc3Qgcz1yKDApLG49cigyKSxvPXIoMTApLGE9e307ZS5leHBvcnRzPWEubWVyZ2U9ZnVuY3Rpb24oZSx0LHIpe2lmKHMoZSYmXCJvYmplY3RcIj09dHlwZW9mIGUsXCJJbnZhbGlkIHRhcmdldCB2YWx1ZTogbXVzdCBiZSBhbiBvYmplY3RcIikscyhudWxsPT10fHxcIm9iamVjdFwiPT10eXBlb2YgdCxcIkludmFsaWQgc291cmNlIHZhbHVlOiBtdXN0IGJlIG51bGwsIHVuZGVmaW5lZCwgb3IgYW4gb2JqZWN0XCIpLCF0KXJldHVybiBlO2lmKHI9T2JqZWN0LmFzc2lnbih7bnVsbE92ZXJyaWRlOiEwLG1lcmdlQXJyYXlzOiEwfSxyKSxBcnJheS5pc0FycmF5KHQpKXtzKEFycmF5LmlzQXJyYXkoZSksXCJDYW5ub3QgbWVyZ2UgYXJyYXkgb250byBhbiBvYmplY3RcIiksci5tZXJnZUFycmF5c3x8KGUubGVuZ3RoPTApO2ZvcihsZXQgcz0wO3M8dC5sZW5ndGg7KytzKWUucHVzaChuKHRbc10se3N5bWJvbHM6ci5zeW1ib2xzfSkpO3JldHVybiBlfWNvbnN0IGk9by5rZXlzKHQscik7Zm9yKGxldCBzPTA7czxpLmxlbmd0aDsrK3Mpe2NvbnN0IG89aVtzXTtpZihcIl9fcHJvdG9fX1wiPT09b3x8IU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh0LG8pKWNvbnRpbnVlO2NvbnN0IGw9dFtvXTtsJiZcIm9iamVjdFwiPT10eXBlb2YgbD8hZVtvXXx8XCJvYmplY3RcIiE9dHlwZW9mIGVbb118fEFycmF5LmlzQXJyYXkoZVtvXSkhPT1BcnJheS5pc0FycmF5KGwpfHxsIGluc3RhbmNlb2YgRGF0ZXx8bCBpbnN0YW5jZW9mIFJlZ0V4cD9lW29dPW4obCx7c3ltYm9sczpyLnN5bWJvbHN9KTphLm1lcmdlKGVbb10sbCxyKTpudWxsIT1sP2Vbb109bDpyLm51bGxPdmVycmlkZSYmKGVbb109bCl9cmV0dXJuIGV9fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7Y29uc3Qgcz1yKDApLG49cigxMSksbz1yKDEpLGE9e307ZS5leHBvcnRzPWEuVmFsdWVzPWNsYXNze2NvbnN0cnVjdG9yKGUsdCl7dGhpcy5fdmFsdWVzPW5ldyBTZXQoZSksdGhpcy5fcmVmcz1uZXcgU2V0KHQpLHRoaXMuX2xvd2VyY2FzZT1hLmxvd2VyY2FzZXMoZSksdGhpcy5fb3ZlcnJpZGU9ITF9Z2V0IGxlbmd0aCgpe3JldHVybiB0aGlzLl92YWx1ZXMuc2l6ZSt0aGlzLl9yZWZzLnNpemV9YWRkKGUsdCl7by5pc1Jlc29sdmFibGUoZSk/dGhpcy5fcmVmcy5oYXMoZSl8fCh0aGlzLl9yZWZzLmFkZChlKSx0JiZ0LnJlZ2lzdGVyKGUpKTp0aGlzLmhhcyhlLG51bGwsbnVsbCwhMSl8fCh0aGlzLl92YWx1ZXMuYWRkKGUpLFwic3RyaW5nXCI9PXR5cGVvZiBlJiZ0aGlzLl9sb3dlcmNhc2Uuc2V0KGUudG9Mb3dlckNhc2UoKSxlKSl9c3RhdGljIG1lcmdlKGUsdCxyKXtpZihlPWV8fG5ldyBhLlZhbHVlcyx0KXtpZih0Ll9vdmVycmlkZSlyZXR1cm4gdC5jbG9uZSgpO2Zvcihjb25zdCByIG9mWy4uLnQuX3ZhbHVlcywuLi50Ll9yZWZzXSllLmFkZChyKX1pZihyKWZvcihjb25zdCB0IG9mWy4uLnIuX3ZhbHVlcywuLi5yLl9yZWZzXSllLnJlbW92ZSh0KTtyZXR1cm4gZS5sZW5ndGg/ZTpudWxsfXJlbW92ZShlKXtvLmlzUmVzb2x2YWJsZShlKT90aGlzLl9yZWZzLmRlbGV0ZShlKToodGhpcy5fdmFsdWVzLmRlbGV0ZShlKSxcInN0cmluZ1wiPT10eXBlb2YgZSYmdGhpcy5fbG93ZXJjYXNlLmRlbGV0ZShlLnRvTG93ZXJDYXNlKCkpKX1oYXMoZSx0LHIscyl7cmV0dXJuISF0aGlzLmdldChlLHQscixzKX1nZXQoZSx0LHIscyl7aWYoIXRoaXMubGVuZ3RoKXJldHVybiExO2lmKHRoaXMuX3ZhbHVlcy5oYXMoZSkpcmV0dXJue3ZhbHVlOmV9O2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlJiZlJiZzKXtjb25zdCB0PXRoaXMuX2xvd2VyY2FzZS5nZXQoZS50b0xvd2VyQ2FzZSgpKTtpZih0KXJldHVybnt2YWx1ZTp0fX1pZighdGhpcy5fcmVmcy5zaXplJiZcIm9iamVjdFwiIT10eXBlb2YgZSlyZXR1cm4hMTtpZihcIm9iamVjdFwiPT10eXBlb2YgZSlmb3IoY29uc3QgdCBvZiB0aGlzLl92YWx1ZXMpaWYobih0LGUpKXJldHVybnt2YWx1ZTp0fTtpZih0KWZvcihjb25zdCBvIG9mIHRoaXMuX3JlZnMpe2NvbnN0IGE9by5yZXNvbHZlKGUsdCxyLG51bGwse2luOiEwfSk7aWYodm9pZCAwPT09YSljb250aW51ZTtjb25zdCBpPW8uaW4mJlwib2JqZWN0XCI9PXR5cGVvZiBhP0FycmF5LmlzQXJyYXkoYSk/YTpPYmplY3Qua2V5cyhhKTpbYV07Zm9yKGNvbnN0IHQgb2YgaSlpZih0eXBlb2YgdD09dHlwZW9mIGUpaWYocyYmZSYmXCJzdHJpbmdcIj09dHlwZW9mIGUpe2lmKHQudG9Mb3dlckNhc2UoKT09PWUudG9Mb3dlckNhc2UoKSlyZXR1cm57dmFsdWU6dCxyZWY6b319ZWxzZSBpZihuKHQsZSkpcmV0dXJue3ZhbHVlOnQscmVmOm99fXJldHVybiExfW92ZXJyaWRlKCl7dGhpcy5fb3ZlcnJpZGU9ITB9dmFsdWVzKGUpe2lmKGUmJmUuZGlzcGxheSl7Y29uc3QgZT1bXTtmb3IoY29uc3QgdCBvZlsuLi50aGlzLl92YWx1ZXMsLi4udGhpcy5fcmVmc10pdm9pZCAwIT09dCYmZS5wdXNoKHQpO3JldHVybiBlfXJldHVybiBBcnJheS5mcm9tKFsuLi50aGlzLl92YWx1ZXMsLi4udGhpcy5fcmVmc10pfWNsb25lKCl7Y29uc3QgZT1uZXcgYS5WYWx1ZXModGhpcy5fdmFsdWVzLHRoaXMuX3JlZnMpO3JldHVybiBlLl9vdmVycmlkZT10aGlzLl9vdmVycmlkZSxlfWNvbmNhdChlKXtzKCFlLl9vdmVycmlkZSxcIkNhbm5vdCBjb25jYXQgb3ZlcnJpZGUgc2V0IG9mIHZhbHVlc1wiKTtjb25zdCB0PW5ldyBhLlZhbHVlcyhbLi4udGhpcy5fdmFsdWVzLC4uLmUuX3ZhbHVlc10sWy4uLnRoaXMuX3JlZnMsLi4uZS5fcmVmc10pO3JldHVybiB0Ll9vdmVycmlkZT10aGlzLl9vdmVycmlkZSx0fWRlc2NyaWJlKCl7Y29uc3QgZT1bXTt0aGlzLl9vdmVycmlkZSYmZS5wdXNoKHtvdmVycmlkZTohMH0pO2Zvcihjb25zdCB0IG9mIHRoaXMuX3ZhbHVlcy52YWx1ZXMoKSllLnB1c2godCYmXCJvYmplY3RcIj09dHlwZW9mIHQ/e3ZhbHVlOnR9OnQpO2Zvcihjb25zdCB0IG9mIHRoaXMuX3JlZnMudmFsdWVzKCkpZS5wdXNoKHQuZGVzY3JpYmUoKSk7cmV0dXJuIGV9fSxhLlZhbHVlcy5wcm90b3R5cGVbby5zeW1ib2xzLnZhbHVlc109ITAsYS5WYWx1ZXMucHJvdG90eXBlLnNsaWNlPWEuVmFsdWVzLnByb3RvdHlwZS5jbG9uZSxhLmxvd2VyY2FzZXM9ZnVuY3Rpb24oZSl7Y29uc3QgdD1uZXcgTWFwO2lmKGUpZm9yKGNvbnN0IHIgb2YgZSlcInN0cmluZ1wiPT10eXBlb2YgciYmdC5zZXQoci50b0xvd2VyQ2FzZSgpLHIpO3JldHVybiB0fX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2NvbnN0IHM9cig0MSksbj1yKDApLG89cigyKSxhPXIoNDIpLGk9cigzKSxsPXIoMSksYz1yKDcpLHU9cig0KSxmPXIoNSksaD1yKDYpLG09e3JlbmFtZURlZmF1bHRzOnthbGlhczohMSxtdWx0aXBsZTohMSxvdmVycmlkZTohMX19O2UuZXhwb3J0cz1pLmV4dGVuZCh7dHlwZTpcIl9rZXlzXCIscHJvcGVydGllczp7dHlwZW9mOlwib2JqZWN0XCJ9LGZsYWdzOnt1bmtub3duOntkZWZhdWx0OiExfX0sdGVybXM6e2RlcGVuZGVuY2llczp7aW5pdDpudWxsfSxrZXlzOntpbml0Om51bGwsbWFuaWZlc3Q6e21hcHBlZDp7ZnJvbTpcInNjaGVtYVwiLHRvOlwia2V5XCJ9fX0scGF0dGVybnM6e2luaXQ6bnVsbH0scmVuYW1lczp7aW5pdDpudWxsfX0sYXJnczooZSx0KT0+ZS5rZXlzKHQpLHZhbGlkYXRlKGUsdCl7bGV0e3NjaGVtYTpyLGVycm9yOnMsc3RhdGU6bixwcmVmczpvfT10O2lmKCFlfHx0eXBlb2YgZSE9PXIuJF9wcm9wZXJ0eShcInR5cGVvZlwiKXx8QXJyYXkuaXNBcnJheShlKSlyZXR1cm57dmFsdWU6ZSxlcnJvcnM6cyhcIm9iamVjdC5iYXNlXCIse3R5cGU6ci4kX3Byb3BlcnR5KFwidHlwZW9mXCIpfSl9O2lmKCEoci4kX3Rlcm1zLnJlbmFtZXN8fHIuJF90ZXJtcy5kZXBlbmRlbmNpZXN8fHIuJF90ZXJtcy5rZXlzfHxyLiRfdGVybXMucGF0dGVybnN8fHIuJF90ZXJtcy5leHRlcm5hbHMpKXJldHVybjtlPW0uY2xvbmUoZSxvKTtjb25zdCBhPVtdO2lmKHIuJF90ZXJtcy5yZW5hbWVzJiYhbS5yZW5hbWUocixlLG4sbyxhKSlyZXR1cm57dmFsdWU6ZSxlcnJvcnM6YX07aWYoIXIuJF90ZXJtcy5rZXlzJiYhci4kX3Rlcm1zLnBhdHRlcm5zJiYhci4kX3Rlcm1zLmRlcGVuZGVuY2llcylyZXR1cm57dmFsdWU6ZSxlcnJvcnM6YX07Y29uc3QgaT1uZXcgU2V0KE9iamVjdC5rZXlzKGUpKTtpZihyLiRfdGVybXMua2V5cyl7Y29uc3QgdD1bZSwuLi5uLmFuY2VzdG9yc107Zm9yKGNvbnN0IHMgb2Ygci4kX3Rlcm1zLmtleXMpe2NvbnN0IHI9cy5rZXksbD1lW3JdO2kuZGVsZXRlKHIpO2NvbnN0IGM9bi5sb2NhbGl6ZShbLi4ubi5wYXRoLHJdLHQscyksdT1zLnNjaGVtYS4kX3ZhbGlkYXRlKGwsYyxvKTtpZih1LmVycm9ycyl7aWYoby5hYm9ydEVhcmx5KXJldHVybnt2YWx1ZTplLGVycm9yczp1LmVycm9yc307YS5wdXNoKC4uLnUuZXJyb3JzKX1lbHNlXCJzdHJpcFwiPT09cy5zY2hlbWEuX2ZsYWdzLnJlc3VsdHx8dm9pZCAwPT09dS52YWx1ZSYmdm9pZCAwIT09bD9kZWxldGUgZVtyXTp2b2lkIDAhPT11LnZhbHVlJiYoZVtyXT11LnZhbHVlKX19aWYoaS5zaXplfHxyLl9mbGFncy5faGFzUGF0dGVybk1hdGNoKXtjb25zdCB0PW0udW5rbm93bihyLGUsaSxhLG4sbyk7aWYodClyZXR1cm4gdH1pZihyLiRfdGVybXMuZGVwZW5kZW5jaWVzKWZvcihjb25zdCB0IG9mIHIuJF90ZXJtcy5kZXBlbmRlbmNpZXMpe2lmKHQua2V5JiZ2b2lkIDA9PT10LmtleS5yZXNvbHZlKGUsbixvLG51bGwse3NoYWRvdzohMX0pKWNvbnRpbnVlO2NvbnN0IHM9bS5kZXBlbmRlbmNpZXNbdC5yZWxdKHIsdCxlLG4sbyk7aWYocyl7Y29uc3QgdD1yLiRfY3JlYXRlRXJyb3Iocy5jb2RlLGUscy5jb250ZXh0LG4sbyk7aWYoby5hYm9ydEVhcmx5KXJldHVybnt2YWx1ZTplLGVycm9yczp0fTthLnB1c2godCl9fXJldHVybnt2YWx1ZTplLGVycm9yczphfX0scnVsZXM6e2FuZDp7bWV0aG9kKCl7Zm9yKHZhciBlPWFyZ3VtZW50cy5sZW5ndGgsdD1uZXcgQXJyYXkoZSkscj0wO3I8ZTtyKyspdFtyXT1hcmd1bWVudHNbcl07cmV0dXJuIGwudmVyaWZ5RmxhdCh0LFwiYW5kXCIpLG0uZGVwZW5kZW5jeSh0aGlzLFwiYW5kXCIsbnVsbCx0KX19LGFwcGVuZDp7bWV0aG9kKGUpe3JldHVybiBudWxsPT1lfHwwPT09T2JqZWN0LmtleXMoZSkubGVuZ3RoP3RoaXM6dGhpcy5rZXlzKGUpfX0sYXNzZXJ0OnttZXRob2QoZSx0LHIpe2guaXNUZW1wbGF0ZShlKXx8KGU9Yy5yZWYoZSkpLG4odm9pZCAwPT09cnx8XCJzdHJpbmdcIj09dHlwZW9mIHIsXCJNZXNzYWdlIG11c3QgYmUgYSBzdHJpbmdcIiksdD10aGlzLiRfY29tcGlsZSh0LHthcHBlbmRQYXRoOiEwfSk7Y29uc3Qgcz10aGlzLiRfYWRkUnVsZSh7bmFtZTpcImFzc2VydFwiLGFyZ3M6e3N1YmplY3Q6ZSxzY2hlbWE6dCxtZXNzYWdlOnJ9fSk7cmV0dXJuIHMuJF9tdXRhdGVSZWdpc3RlcihlKSxzLiRfbXV0YXRlUmVnaXN0ZXIodCksc30sdmFsaWRhdGUoZSx0LHIpe2xldHtlcnJvcjpzLHByZWZzOm4sc3RhdGU6b309dCx7c3ViamVjdDphLHNjaGVtYTppLG1lc3NhZ2U6bH09cjtjb25zdCBjPWEucmVzb2x2ZShlLG8sbiksdT1mLmlzUmVmKGEpP2EuYWJzb2x1dGUobyk6W107cmV0dXJuIGkuJF9tYXRjaChjLG8ubG9jYWxpemUodSxbZSwuLi5vLmFuY2VzdG9yc10saSksbik/ZTpzKFwib2JqZWN0LmFzc2VydFwiLHtzdWJqZWN0OmEsbWVzc2FnZTpsfSl9LGFyZ3M6W1wic3ViamVjdFwiLFwic2NoZW1hXCIsXCJtZXNzYWdlXCJdLG11bHRpOiEwfSxpbnN0YW5jZTp7bWV0aG9kKGUsdCl7cmV0dXJuIG4oXCJmdW5jdGlvblwiPT10eXBlb2YgZSxcImNvbnN0cnVjdG9yIG11c3QgYmUgYSBmdW5jdGlvblwiKSx0PXR8fGUubmFtZSx0aGlzLiRfYWRkUnVsZSh7bmFtZTpcImluc3RhbmNlXCIsYXJnczp7Y29uc3RydWN0b3I6ZSxuYW1lOnR9fSl9LHZhbGlkYXRlKGUsdCxyKXtsZXR7Y29uc3RydWN0b3I6cyxuYW1lOm59PXI7cmV0dXJuIGUgaW5zdGFuY2VvZiBzP2U6dC5lcnJvcihcIm9iamVjdC5pbnN0YW5jZVwiLHt0eXBlOm4sdmFsdWU6ZX0pfSxhcmdzOltcImNvbnN0cnVjdG9yXCIsXCJuYW1lXCJdfSxrZXlzOnttZXRob2QoZSl7bih2b2lkIDA9PT1lfHxcIm9iamVjdFwiPT10eXBlb2YgZSxcIk9iamVjdCBzY2hlbWEgbXVzdCBiZSBhIHZhbGlkIG9iamVjdFwiKSxuKCFsLmlzU2NoZW1hKGUpLFwiT2JqZWN0IHNjaGVtYSBjYW5ub3QgYmUgYSBqb2kgc2NoZW1hXCIpO2NvbnN0IHQ9dGhpcy5jbG9uZSgpO2lmKGUpaWYoT2JqZWN0LmtleXMoZSkubGVuZ3RoKXt0LiRfdGVybXMua2V5cz10LiRfdGVybXMua2V5cz90LiRfdGVybXMua2V5cy5maWx0ZXIodD0+IWUuaGFzT3duUHJvcGVydHkodC5rZXkpKTpbXTtmb3IoY29uc3QgciBpbiBlKWwudHJ5V2l0aFBhdGgoKCk9PnQuJF90ZXJtcy5rZXlzLnB1c2goe2tleTpyLHNjaGVtYTp0aGlzLiRfY29tcGlsZShlW3JdKX0pLHIpfWVsc2UgdC4kX3Rlcm1zLmtleXM9W107ZWxzZSB0LiRfdGVybXMua2V5cz1udWxsO3JldHVybiB0LiRfbXV0YXRlUmVidWlsZCgpfX0sbGVuZ3RoOnttZXRob2QoZSl7cmV0dXJuIHRoaXMuJF9hZGRSdWxlKHtuYW1lOlwibGVuZ3RoXCIsYXJnczp7bGltaXQ6ZX0sb3BlcmF0b3I6XCI9XCJ9KX0sdmFsaWRhdGUoZSx0LHIscyl7bGV0e2xpbWl0Om59PXIse25hbWU6byxvcGVyYXRvcjphLGFyZ3M6aX09cztyZXR1cm4gbC5jb21wYXJlKE9iamVjdC5rZXlzKGUpLmxlbmd0aCxuLGEpP2U6dC5lcnJvcihcIm9iamVjdC5cIitvLHtsaW1pdDppLmxpbWl0LHZhbHVlOmV9KX0sYXJnczpbe25hbWU6XCJsaW1pdFwiLHJlZjohMCxhc3NlcnQ6bC5saW1pdCxtZXNzYWdlOlwibXVzdCBiZSBhIHBvc2l0aXZlIGludGVnZXJcIn1dfSxtYXg6e21ldGhvZChlKXtyZXR1cm4gdGhpcy4kX2FkZFJ1bGUoe25hbWU6XCJtYXhcIixtZXRob2Q6XCJsZW5ndGhcIixhcmdzOntsaW1pdDplfSxvcGVyYXRvcjpcIjw9XCJ9KX19LG1pbjp7bWV0aG9kKGUpe3JldHVybiB0aGlzLiRfYWRkUnVsZSh7bmFtZTpcIm1pblwiLG1ldGhvZDpcImxlbmd0aFwiLGFyZ3M6e2xpbWl0OmV9LG9wZXJhdG9yOlwiPj1cIn0pfX0sbmFuZDp7bWV0aG9kKCl7Zm9yKHZhciBlPWFyZ3VtZW50cy5sZW5ndGgsdD1uZXcgQXJyYXkoZSkscj0wO3I8ZTtyKyspdFtyXT1hcmd1bWVudHNbcl07cmV0dXJuIGwudmVyaWZ5RmxhdCh0LFwibmFuZFwiKSxtLmRlcGVuZGVuY3kodGhpcyxcIm5hbmRcIixudWxsLHQpfX0sb3I6e21ldGhvZCgpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLHQ9bmV3IEFycmF5KGUpLHI9MDtyPGU7cisrKXRbcl09YXJndW1lbnRzW3JdO3JldHVybiBsLnZlcmlmeUZsYXQodCxcIm9yXCIpLG0uZGVwZW5kZW5jeSh0aGlzLFwib3JcIixudWxsLHQpfX0sb3hvcjp7bWV0aG9kKCl7Zm9yKHZhciBlPWFyZ3VtZW50cy5sZW5ndGgsdD1uZXcgQXJyYXkoZSkscj0wO3I8ZTtyKyspdFtyXT1hcmd1bWVudHNbcl07cmV0dXJuIG0uZGVwZW5kZW5jeSh0aGlzLFwib3hvclwiLG51bGwsdCl9fSxwYXR0ZXJuOnttZXRob2QoZSx0KXtsZXQgcj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06e307Y29uc3Qgcz1lIGluc3RhbmNlb2YgUmVnRXhwO3N8fChlPXRoaXMuJF9jb21waWxlKGUse2FwcGVuZFBhdGg6ITB9KSksbih2b2lkIDAhPT10LFwiSW52YWxpZCBydWxlXCIpLGwuYXNzZXJ0T3B0aW9ucyhyLFtcImZhbGx0aHJvdWdoXCIsXCJtYXRjaGVzXCJdKSxzJiZuKCFlLmZsYWdzLmluY2x1ZGVzKFwiZ1wiKSYmIWUuZmxhZ3MuaW5jbHVkZXMoXCJ5XCIpLFwicGF0dGVybiBzaG91bGQgbm90IHVzZSBnbG9iYWwgb3Igc3RpY2t5IG1vZGVcIiksdD10aGlzLiRfY29tcGlsZSh0LHthcHBlbmRQYXRoOiEwfSk7Y29uc3Qgbz10aGlzLmNsb25lKCk7by4kX3Rlcm1zLnBhdHRlcm5zPW8uJF90ZXJtcy5wYXR0ZXJuc3x8W107Y29uc3QgYT17W3M/XCJyZWdleFwiOlwic2NoZW1hXCJdOmUscnVsZTp0fTtyZXR1cm4gci5tYXRjaGVzJiYoYS5tYXRjaGVzPXRoaXMuJF9jb21waWxlKHIubWF0Y2hlcyksXCJhcnJheVwiIT09YS5tYXRjaGVzLnR5cGUmJihhLm1hdGNoZXM9YS5tYXRjaGVzLiRfcm9vdC5hcnJheSgpLml0ZW1zKGEubWF0Y2hlcykpLG8uJF9tdXRhdGVSZWdpc3RlcihhLm1hdGNoZXMpLG8uJF9zZXRGbGFnKFwiX2hhc1BhdHRlcm5NYXRjaFwiLCEwLHtjbG9uZTohMX0pKSxyLmZhbGx0aHJvdWdoJiYoYS5mYWxsdGhyb3VnaD0hMCksby4kX3Rlcm1zLnBhdHRlcm5zLnB1c2goYSksby4kX211dGF0ZVJlZ2lzdGVyKHQpLG99fSxyZWY6e21ldGhvZCgpe3JldHVybiB0aGlzLiRfYWRkUnVsZShcInJlZlwiKX0sdmFsaWRhdGU6KGUsdCk9PmYuaXNSZWYoZSk/ZTp0LmVycm9yKFwib2JqZWN0LnJlZlR5cGVcIix7dmFsdWU6ZX0pfSxyZW5hbWU6e21ldGhvZChlLHQpe2xldCByPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTp7fTtuKFwic3RyaW5nXCI9PXR5cGVvZiBlfHxlIGluc3RhbmNlb2YgUmVnRXhwLFwiUmVuYW1lIG1pc3NpbmcgdGhlIGZyb20gYXJndW1lbnRcIiksbihcInN0cmluZ1wiPT10eXBlb2YgdHx8dCBpbnN0YW5jZW9mIGgsXCJJbnZhbGlkIHJlbmFtZSB0byBhcmd1bWVudFwiKSxuKHQhPT1lLFwiQ2Fubm90IHJlbmFtZSBrZXkgdG8gc2FtZSBuYW1lOlwiLGUpLGwuYXNzZXJ0T3B0aW9ucyhyLFtcImFsaWFzXCIsXCJpZ25vcmVVbmRlZmluZWRcIixcIm92ZXJyaWRlXCIsXCJtdWx0aXBsZVwiXSk7Y29uc3Qgbz10aGlzLmNsb25lKCk7by4kX3Rlcm1zLnJlbmFtZXM9by4kX3Rlcm1zLnJlbmFtZXN8fFtdO2Zvcihjb25zdCB0IG9mIG8uJF90ZXJtcy5yZW5hbWVzKW4odC5mcm9tIT09ZSxcIkNhbm5vdCByZW5hbWUgdGhlIHNhbWUga2V5IG11bHRpcGxlIHRpbWVzXCIpO3JldHVybiB0IGluc3RhbmNlb2YgaCYmby4kX211dGF0ZVJlZ2lzdGVyKHQpLG8uJF90ZXJtcy5yZW5hbWVzLnB1c2goe2Zyb206ZSx0bzp0LG9wdGlvbnM6cyhtLnJlbmFtZURlZmF1bHRzLHIpfSksb319LHNjaGVtYTp7bWV0aG9kKCl7bGV0IGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOlwiYW55XCI7cmV0dXJuIHRoaXMuJF9hZGRSdWxlKHtuYW1lOlwic2NoZW1hXCIsYXJnczp7dHlwZTplfX0pfSx2YWxpZGF0ZShlLHQscil7bGV0e3R5cGU6c309cjtyZXR1cm4hbC5pc1NjaGVtYShlKXx8XCJhbnlcIiE9PXMmJmUudHlwZSE9PXM/dC5lcnJvcihcIm9iamVjdC5zY2hlbWFcIix7dHlwZTpzfSk6ZX19LHVua25vd246e21ldGhvZChlKXtyZXR1cm4gdGhpcy4kX3NldEZsYWcoXCJ1bmtub3duXCIsITEhPT1lKX19LHdpdGg6e21ldGhvZChlLHQpe2xldCByPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTp7fTtyZXR1cm4gbS5kZXBlbmRlbmN5KHRoaXMsXCJ3aXRoXCIsZSx0LHIpfX0sd2l0aG91dDp7bWV0aG9kKGUsdCl7bGV0IHI9YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOnt9O3JldHVybiBtLmRlcGVuZGVuY3kodGhpcyxcIndpdGhvdXRcIixlLHQscil9fSx4b3I6e21ldGhvZCgpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLHQ9bmV3IEFycmF5KGUpLHI9MDtyPGU7cisrKXRbcl09YXJndW1lbnRzW3JdO3JldHVybiBsLnZlcmlmeUZsYXQodCxcInhvclwiKSxtLmRlcGVuZGVuY3kodGhpcyxcInhvclwiLG51bGwsdCl9fX0sb3ZlcnJpZGVzOntkZWZhdWx0KGUsdCl7cmV0dXJuIHZvaWQgMD09PWUmJihlPWwuc3ltYm9scy5kZWVwRGVmYXVsdCksdGhpcy4kX3N1cGVyLmRlZmF1bHQoZSx0KX19LHJlYnVpbGQoZSl7aWYoZS4kX3Rlcm1zLmtleXMpe2NvbnN0IHQ9bmV3IGE7Zm9yKGNvbnN0IHIgb2YgZS4kX3Rlcm1zLmtleXMpbC50cnlXaXRoUGF0aCgoKT0+dC5hZGQocix7YWZ0ZXI6ci5zY2hlbWEuJF9yb290UmVmZXJlbmNlcygpLGdyb3VwOnIua2V5fSksci5rZXkpO2UuJF90ZXJtcy5rZXlzPW5ldyBtLktleXMoLi4udC5ub2Rlcyl9fSxtYW5pZmVzdDp7YnVpbGQoZSx0KXtpZih0LmtleXMmJihlPWUua2V5cyh0LmtleXMpKSx0LmRlcGVuZGVuY2llcylmb3IoY29uc3QgciBvZiB0LmRlcGVuZGVuY2llcyl7Y29uc3R7cmVsOnQsa2V5OnM9bnVsbCxwZWVyczpuLG9wdGlvbnM6b309cjtlPW0uZGVwZW5kZW5jeShlLHQscyxuLG8pfWlmKHQucGF0dGVybnMpZm9yKGNvbnN0IHIgb2YgdC5wYXR0ZXJucyl7Y29uc3R7cmVnZXg6dCxzY2hlbWE6cyxydWxlOm4sZmFsbHRocm91Z2g6byxtYXRjaGVzOmF9PXI7ZT1lLnBhdHRlcm4odHx8cyxuLHtmYWxsdGhyb3VnaDpvLG1hdGNoZXM6YX0pfWlmKHQucmVuYW1lcylmb3IoY29uc3QgciBvZiB0LnJlbmFtZXMpe2NvbnN0e2Zyb206dCx0bzpzLG9wdGlvbnM6bn09cjtlPWUucmVuYW1lKHQscyxuKX1yZXR1cm4gZX19LG1lc3NhZ2VzOntcIm9iamVjdC5hbmRcIjonXCJ7eyNsYWJlbH19XCIgY29udGFpbnMge3sjcHJlc2VudFdpdGhMYWJlbHN9fSB3aXRob3V0IGl0cyByZXF1aXJlZCBwZWVycyB7eyNtaXNzaW5nV2l0aExhYmVsc319JyxcIm9iamVjdC5hc3NlcnRcIjonXCJ7eyNsYWJlbH19XCIgaXMgaW52YWxpZCBiZWNhdXNlIHtpZigjc3ViamVjdC5rZXksIGBcImAgKyAjc3ViamVjdC5rZXkgKyBgXCIgZmFpbGVkIHRvIGAgKyAoI21lc3NhZ2UgfHwgXCJwYXNzIHRoZSBhc3NlcnRpb24gdGVzdFwiKSwgI21lc3NhZ2UgfHwgXCJ0aGUgYXNzZXJ0aW9uIGZhaWxlZFwiKX0nLFwib2JqZWN0LmJhc2VcIjonXCJ7eyNsYWJlbH19XCIgbXVzdCBiZSBvZiB0eXBlIHt7I3R5cGV9fScsXCJvYmplY3QuaW5zdGFuY2VcIjonXCJ7eyNsYWJlbH19XCIgbXVzdCBiZSBhbiBpbnN0YW5jZSBvZiBcInt7I3R5cGV9fVwiJyxcIm9iamVjdC5sZW5ndGhcIjonXCJ7eyNsYWJlbH19XCIgbXVzdCBoYXZlIHt7I2xpbWl0fX0ga2V5e2lmKCNsaW1pdCA9PSAxLCBcIlwiLCBcInNcIil9JyxcIm9iamVjdC5tYXhcIjonXCJ7eyNsYWJlbH19XCIgbXVzdCBoYXZlIGxlc3MgdGhhbiBvciBlcXVhbCB0byB7eyNsaW1pdH19IGtleXtpZigjbGltaXQgPT0gMSwgXCJcIiwgXCJzXCIpfScsXCJvYmplY3QubWluXCI6J1wie3sjbGFiZWx9fVwiIG11c3QgaGF2ZSBhdCBsZWFzdCB7eyNsaW1pdH19IGtleXtpZigjbGltaXQgPT0gMSwgXCJcIiwgXCJzXCIpfScsXCJvYmplY3QubWlzc2luZ1wiOidcInt7I2xhYmVsfX1cIiBtdXN0IGNvbnRhaW4gYXQgbGVhc3Qgb25lIG9mIHt7I3BlZXJzV2l0aExhYmVsc319JyxcIm9iamVjdC5uYW5kXCI6J1wie3sjbWFpbldpdGhMYWJlbH19XCIgbXVzdCBub3QgZXhpc3Qgc2ltdWx0YW5lb3VzbHkgd2l0aCB7eyNwZWVyc1dpdGhMYWJlbHN9fScsXCJvYmplY3Qub3hvclwiOidcInt7I2xhYmVsfX1cIiBjb250YWlucyBhIGNvbmZsaWN0IGJldHdlZW4gb3B0aW9uYWwgZXhjbHVzaXZlIHBlZXJzIHt7I3BlZXJzV2l0aExhYmVsc319JyxcIm9iamVjdC5wYXR0ZXJuLm1hdGNoXCI6J1wie3sjbGFiZWx9fVwiIGtleXMgZmFpbGVkIHRvIG1hdGNoIHBhdHRlcm4gcmVxdWlyZW1lbnRzJyxcIm9iamVjdC5yZWZUeXBlXCI6J1wie3sjbGFiZWx9fVwiIG11c3QgYmUgYSBKb2kgcmVmZXJlbmNlJyxcIm9iamVjdC5yZW5hbWUubXVsdGlwbGVcIjonXCJ7eyNsYWJlbH19XCIgY2Fubm90IHJlbmFtZSBcInt7I2Zyb219fVwiIGJlY2F1c2UgbXVsdGlwbGUgcmVuYW1lcyBhcmUgZGlzYWJsZWQgYW5kIGFub3RoZXIga2V5IHdhcyBhbHJlYWR5IHJlbmFtZWQgdG8gXCJ7eyN0b319XCInLFwib2JqZWN0LnJlbmFtZS5vdmVycmlkZVwiOidcInt7I2xhYmVsfX1cIiBjYW5ub3QgcmVuYW1lIFwie3sjZnJvbX19XCIgYmVjYXVzZSBvdmVycmlkZSBpcyBkaXNhYmxlZCBhbmQgdGFyZ2V0IFwie3sjdG99fVwiIGV4aXN0cycsXCJvYmplY3Quc2NoZW1hXCI6J1wie3sjbGFiZWx9fVwiIG11c3QgYmUgYSBKb2kgc2NoZW1hIG9mIHt7I3R5cGV9fSB0eXBlJyxcIm9iamVjdC51bmtub3duXCI6J1wie3sjbGFiZWx9fVwiIGlzIG5vdCBhbGxvd2VkJyxcIm9iamVjdC53aXRoXCI6J1wie3sjbWFpbldpdGhMYWJlbH19XCIgbWlzc2luZyByZXF1aXJlZCBwZWVyIFwie3sjcGVlcldpdGhMYWJlbH19XCInLFwib2JqZWN0LndpdGhvdXRcIjonXCJ7eyNtYWluV2l0aExhYmVsfX1cIiBjb25mbGljdCB3aXRoIGZvcmJpZGRlbiBwZWVyIFwie3sjcGVlcldpdGhMYWJlbH19XCInLFwib2JqZWN0LnhvclwiOidcInt7I2xhYmVsfX1cIiBjb250YWlucyBhIGNvbmZsaWN0IGJldHdlZW4gZXhjbHVzaXZlIHBlZXJzIHt7I3BlZXJzV2l0aExhYmVsc319J319KSxtLmNsb25lPWZ1bmN0aW9uKGUsdCl7aWYoXCJvYmplY3RcIj09dHlwZW9mIGUpe2lmKHQubm9uRW51bWVyYWJsZXMpcmV0dXJuIG8oZSx7c2hhbGxvdzohMH0pO2NvbnN0IHI9T2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2YoZSkpO3JldHVybiBPYmplY3QuYXNzaWduKHIsZSkscn1jb25zdCByPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgscj1uZXcgQXJyYXkodCkscz0wO3M8dDtzKyspcltzXT1hcmd1bWVudHNbc107cmV0dXJuIGUuYXBwbHkodGhpcyxyKX07cmV0dXJuIHIucHJvdG90eXBlPW8oZS5wcm90b3R5cGUpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwibmFtZVwiLHt2YWx1ZTplLm5hbWUsd3JpdGFibGU6ITF9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkocixcImxlbmd0aFwiLHt2YWx1ZTplLmxlbmd0aCx3cml0YWJsZTohMX0pLE9iamVjdC5hc3NpZ24ocixlKSxyfSxtLmRlcGVuZGVuY3k9ZnVuY3Rpb24oZSx0LHIscyxvKXtuKG51bGw9PT1yfHxcInN0cmluZ1wiPT10eXBlb2Ygcix0LFwia2V5IG11c3QgYmUgYSBzdHJpbmdzXCIpLG98fChvPXMubGVuZ3RoPjEmJlwib2JqZWN0XCI9PXR5cGVvZiBzW3MubGVuZ3RoLTFdP3MucG9wKCk6e30pLGwuYXNzZXJ0T3B0aW9ucyhvLFtcInNlcGFyYXRvclwiXSkscz1bXS5jb25jYXQocyk7Y29uc3QgYT1sLmRlZmF1bHQoby5zZXBhcmF0b3IsXCIuXCIpLGk9W107Zm9yKGNvbnN0IGUgb2YgcyluKFwic3RyaW5nXCI9PXR5cGVvZiBlLHQsXCJwZWVycyBtdXN0IGJlIGEgc3RyaW5nIG9yIGEgcmVmZXJlbmNlXCIpLGkucHVzaChjLnJlZihlLHtzZXBhcmF0b3I6YSxhbmNlc3RvcjowLHByZWZpeDohMX0pKTtudWxsIT09ciYmKHI9Yy5yZWYocix7c2VwYXJhdG9yOmEsYW5jZXN0b3I6MCxwcmVmaXg6ITF9KSk7Y29uc3QgdT1lLmNsb25lKCk7cmV0dXJuIHUuJF90ZXJtcy5kZXBlbmRlbmNpZXM9dS4kX3Rlcm1zLmRlcGVuZGVuY2llc3x8W10sdS4kX3Rlcm1zLmRlcGVuZGVuY2llcy5wdXNoKG5ldyBtLkRlcGVuZGVuY3kodCxyLGkscykpLHV9LG0uZGVwZW5kZW5jaWVzPXthbmQoZSx0LHIscyxuKXtjb25zdCBvPVtdLGE9W10saT10LnBlZXJzLmxlbmd0aDtmb3IoY29uc3QgZSBvZiB0LnBlZXJzKXZvaWQgMD09PWUucmVzb2x2ZShyLHMsbixudWxsLHtzaGFkb3c6ITF9KT9vLnB1c2goZS5rZXkpOmEucHVzaChlLmtleSk7aWYoby5sZW5ndGghPT1pJiZhLmxlbmd0aCE9PWkpcmV0dXJue2NvZGU6XCJvYmplY3QuYW5kXCIsY29udGV4dDp7cHJlc2VudDphLHByZXNlbnRXaXRoTGFiZWxzOm0ua2V5c1RvTGFiZWxzKGUsYSksbWlzc2luZzpvLG1pc3NpbmdXaXRoTGFiZWxzOm0ua2V5c1RvTGFiZWxzKGUsbyl9fX0sbmFuZChlLHQscixzLG4pe2NvbnN0IG89W107Zm9yKGNvbnN0IGUgb2YgdC5wZWVycyl2b2lkIDAhPT1lLnJlc29sdmUocixzLG4sbnVsbCx7c2hhZG93OiExfSkmJm8ucHVzaChlLmtleSk7aWYoby5sZW5ndGghPT10LnBlZXJzLmxlbmd0aClyZXR1cm47Y29uc3QgYT10LnBhdGhzWzBdLGk9dC5wYXRocy5zbGljZSgxKTtyZXR1cm57Y29kZTpcIm9iamVjdC5uYW5kXCIsY29udGV4dDp7bWFpbjphLG1haW5XaXRoTGFiZWw6bS5rZXlzVG9MYWJlbHMoZSxhKSxwZWVyczppLHBlZXJzV2l0aExhYmVsczptLmtleXNUb0xhYmVscyhlLGkpfX19LG9yKGUsdCxyLHMsbil7Zm9yKGNvbnN0IGUgb2YgdC5wZWVycylpZih2b2lkIDAhPT1lLnJlc29sdmUocixzLG4sbnVsbCx7c2hhZG93OiExfSkpcmV0dXJuO3JldHVybntjb2RlOlwib2JqZWN0Lm1pc3NpbmdcIixjb250ZXh0OntwZWVyczp0LnBhdGhzLHBlZXJzV2l0aExhYmVsczptLmtleXNUb0xhYmVscyhlLHQucGF0aHMpfX19LG94b3IoZSx0LHIscyxuKXtjb25zdCBvPVtdO2Zvcihjb25zdCBlIG9mIHQucGVlcnMpdm9pZCAwIT09ZS5yZXNvbHZlKHIscyxuLG51bGwse3NoYWRvdzohMX0pJiZvLnB1c2goZS5rZXkpO2lmKCFvLmxlbmd0aHx8MT09PW8ubGVuZ3RoKXJldHVybjtjb25zdCBhPXtwZWVyczp0LnBhdGhzLHBlZXJzV2l0aExhYmVsczptLmtleXNUb0xhYmVscyhlLHQucGF0aHMpfTtyZXR1cm4gYS5wcmVzZW50PW8sYS5wcmVzZW50V2l0aExhYmVscz1tLmtleXNUb0xhYmVscyhlLG8pLHtjb2RlOlwib2JqZWN0Lm94b3JcIixjb250ZXh0OmF9fSx3aXRoKGUsdCxyLHMsbil7Zm9yKGNvbnN0IG8gb2YgdC5wZWVycylpZih2b2lkIDA9PT1vLnJlc29sdmUocixzLG4sbnVsbCx7c2hhZG93OiExfSkpcmV0dXJue2NvZGU6XCJvYmplY3Qud2l0aFwiLGNvbnRleHQ6e21haW46dC5rZXkua2V5LG1haW5XaXRoTGFiZWw6bS5rZXlzVG9MYWJlbHMoZSx0LmtleS5rZXkpLHBlZXI6by5rZXkscGVlcldpdGhMYWJlbDptLmtleXNUb0xhYmVscyhlLG8ua2V5KX19fSx3aXRob3V0KGUsdCxyLHMsbil7Zm9yKGNvbnN0IG8gb2YgdC5wZWVycylpZih2b2lkIDAhPT1vLnJlc29sdmUocixzLG4sbnVsbCx7c2hhZG93OiExfSkpcmV0dXJue2NvZGU6XCJvYmplY3Qud2l0aG91dFwiLGNvbnRleHQ6e21haW46dC5rZXkua2V5LG1haW5XaXRoTGFiZWw6bS5rZXlzVG9MYWJlbHMoZSx0LmtleS5rZXkpLHBlZXI6by5rZXkscGVlcldpdGhMYWJlbDptLmtleXNUb0xhYmVscyhlLG8ua2V5KX19fSx4b3IoZSx0LHIscyxuKXtjb25zdCBvPVtdO2Zvcihjb25zdCBlIG9mIHQucGVlcnMpdm9pZCAwIT09ZS5yZXNvbHZlKHIscyxuLG51bGwse3NoYWRvdzohMX0pJiZvLnB1c2goZS5rZXkpO2lmKDE9PT1vLmxlbmd0aClyZXR1cm47Y29uc3QgYT17cGVlcnM6dC5wYXRocyxwZWVyc1dpdGhMYWJlbHM6bS5rZXlzVG9MYWJlbHMoZSx0LnBhdGhzKX07cmV0dXJuIDA9PT1vLmxlbmd0aD97Y29kZTpcIm9iamVjdC5taXNzaW5nXCIsY29udGV4dDphfTooYS5wcmVzZW50PW8sYS5wcmVzZW50V2l0aExhYmVscz1tLmtleXNUb0xhYmVscyhlLG8pLHtjb2RlOlwib2JqZWN0LnhvclwiLGNvbnRleHQ6YX0pfX0sbS5rZXlzVG9MYWJlbHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gQXJyYXkuaXNBcnJheSh0KT90Lm1hcCh0PT5lLiRfbWFwTGFiZWxzKHQpKTplLiRfbWFwTGFiZWxzKHQpfSxtLnJlbmFtZT1mdW5jdGlvbihlLHQscixzLG4pe2NvbnN0IG89e307Zm9yKGNvbnN0IGEgb2YgZS4kX3Rlcm1zLnJlbmFtZXMpe2NvbnN0IGk9W10sbD1cInN0cmluZ1wiIT10eXBlb2YgYS5mcm9tO2lmKGwpZm9yKGNvbnN0IGUgaW4gdCl7aWYodm9pZCAwPT09dFtlXSYmYS5vcHRpb25zLmlnbm9yZVVuZGVmaW5lZCljb250aW51ZTtpZihlPT09YS50byljb250aW51ZTtjb25zdCByPWEuZnJvbS5leGVjKGUpO3ImJmkucHVzaCh7ZnJvbTplLHRvOmEudG8sbWF0Y2g6cn0pfWVsc2UhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsYS5mcm9tKXx8dm9pZCAwPT09dFthLmZyb21dJiZhLm9wdGlvbnMuaWdub3JlVW5kZWZpbmVkfHxpLnB1c2goYSk7Zm9yKGNvbnN0IGMgb2YgaSl7Y29uc3QgaT1jLmZyb207bGV0IHU9Yy50bztpZih1IGluc3RhbmNlb2YgaCYmKHU9dS5yZW5kZXIodCxyLHMsYy5tYXRjaCkpLGkhPT11KXtpZighYS5vcHRpb25zLm11bHRpcGxlJiZvW3VdJiYobi5wdXNoKGUuJF9jcmVhdGVFcnJvcihcIm9iamVjdC5yZW5hbWUubXVsdGlwbGVcIix0LHtmcm9tOmksdG86dSxwYXR0ZXJuOmx9LHIscykpLHMuYWJvcnRFYXJseSkpcmV0dXJuITE7aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsdSkmJiFhLm9wdGlvbnMub3ZlcnJpZGUmJiFvW3VdJiYobi5wdXNoKGUuJF9jcmVhdGVFcnJvcihcIm9iamVjdC5yZW5hbWUub3ZlcnJpZGVcIix0LHtmcm9tOmksdG86dSxwYXR0ZXJuOmx9LHIscykpLHMuYWJvcnRFYXJseSkpcmV0dXJuITE7dm9pZCAwPT09dFtpXT9kZWxldGUgdFt1XTp0W3VdPXRbaV0sb1t1XT0hMCxhLm9wdGlvbnMuYWxpYXN8fGRlbGV0ZSB0W2ldfX19cmV0dXJuITB9LG0udW5rbm93bj1mdW5jdGlvbihlLHQscixzLG4sbyl7aWYoZS4kX3Rlcm1zLnBhdHRlcm5zKXtsZXQgYT0hMTtjb25zdCBpPWUuJF90ZXJtcy5wYXR0ZXJucy5tYXAoZT0+e2lmKGUubWF0Y2hlcylyZXR1cm4gYT0hMCxbXX0pLGw9W3QsLi4ubi5hbmNlc3RvcnNdO2Zvcihjb25zdCBhIG9mIHIpe2NvbnN0IGM9dFthXSx1PVsuLi5uLnBhdGgsYV07Zm9yKGxldCBmPTA7ZjxlLiRfdGVybXMucGF0dGVybnMubGVuZ3RoOysrZil7Y29uc3QgaD1lLiRfdGVybXMucGF0dGVybnNbZl07aWYoaC5yZWdleCl7Y29uc3QgZT1oLnJlZ2V4LnRlc3QoYSk7aWYobi5tYWluc3RheS50cmFjZXIuZGVidWcobixcInJ1bGVcIixcInBhdHRlcm4uXCIuY29uY2F0KGYpLGU/XCJwYXNzXCI6XCJlcnJvclwiKSwhZSljb250aW51ZX1lbHNlIGlmKCFoLnNjaGVtYS4kX21hdGNoKGEsbi5uZXN0KGguc2NoZW1hLFwicGF0dGVybi5cIi5jb25jYXQoZikpLG8pKWNvbnRpbnVlO3IuZGVsZXRlKGEpO2NvbnN0IG09bi5sb2NhbGl6ZSh1LGwse3NjaGVtYTpoLnJ1bGUsa2V5OmF9KSxkPWgucnVsZS4kX3ZhbGlkYXRlKGMsbSxvKTtpZihkLmVycm9ycyl7aWYoby5hYm9ydEVhcmx5KXJldHVybnt2YWx1ZTp0LGVycm9yczpkLmVycm9yc307cy5wdXNoKC4uLmQuZXJyb3JzKX1pZihoLm1hdGNoZXMmJmlbZl0ucHVzaChhKSx0W2FdPWQudmFsdWUsIWguZmFsbHRocm91Z2gpYnJlYWt9fWlmKGEpZm9yKGxldCByPTA7cjxpLmxlbmd0aDsrK3Ipe2NvbnN0IGE9aVtyXTtpZighYSljb250aW51ZTtjb25zdCBjPWUuJF90ZXJtcy5wYXR0ZXJuc1tyXS5tYXRjaGVzLGY9bi5sb2NhbGl6ZShuLnBhdGgsbCxjKSxoPWMuJF92YWxpZGF0ZShhLGYsbyk7aWYoaC5lcnJvcnMpe2NvbnN0IHI9dS5kZXRhaWxzKGguZXJyb3JzLHtvdmVycmlkZTohMX0pO3IubWF0Y2hlcz1hO2NvbnN0IGk9ZS4kX2NyZWF0ZUVycm9yKFwib2JqZWN0LnBhdHRlcm4ubWF0Y2hcIix0LHIsbixvKTtpZihvLmFib3J0RWFybHkpcmV0dXJue3ZhbHVlOnQsZXJyb3JzOml9O3MucHVzaChpKX19fWlmKCFyLnNpemV8fCFlLiRfdGVybXMua2V5cyYmIWUuJF90ZXJtcy5wYXR0ZXJucylyZXR1cm47aWYoby5zdHJpcFVua25vd24mJiFlLl9mbGFncy51bmtub3dufHxvLnNraXBGdW5jdGlvbnMpe2NvbnN0IGU9ISFvLnN0cmlwVW5rbm93biYmKCEwPT09by5zdHJpcFVua25vd258fCEhby5zdHJpcFVua25vd24ub2JqZWN0cyk7Zm9yKGNvbnN0IHMgb2YgcillPyhkZWxldGUgdFtzXSxyLmRlbGV0ZShzKSk6XCJmdW5jdGlvblwiPT10eXBlb2YgdFtzXSYmci5kZWxldGUocyl9aWYoIWwuZGVmYXVsdChlLl9mbGFncy51bmtub3duLG8uYWxsb3dVbmtub3duKSlmb3IoY29uc3QgYSBvZiByKXtjb25zdCByPW4ubG9jYWxpemUoWy4uLm4ucGF0aCxhXSxbXSksaT1lLiRfY3JlYXRlRXJyb3IoXCJvYmplY3QudW5rbm93blwiLHRbYV0se2NoaWxkOmF9LHIsbyx7ZmxhZ3M6ITF9KTtpZihvLmFib3J0RWFybHkpcmV0dXJue3ZhbHVlOnQsZXJyb3JzOml9O3MucHVzaChpKX19LG0uRGVwZW5kZW5jeT1jbGFzc3tjb25zdHJ1Y3RvcihlLHQscixzKXt0aGlzLnJlbD1lLHRoaXMua2V5PXQsdGhpcy5wZWVycz1yLHRoaXMucGF0aHM9c31kZXNjcmliZSgpe2NvbnN0IGU9e3JlbDp0aGlzLnJlbCxwZWVyczp0aGlzLnBhdGhzfTtyZXR1cm4gbnVsbCE9PXRoaXMua2V5JiYoZS5rZXk9dGhpcy5rZXkua2V5KSxcIi5cIiE9PXRoaXMucGVlcnNbMF0uc2VwYXJhdG9yJiYoZS5vcHRpb25zPXtzZXBhcmF0b3I6dGhpcy5wZWVyc1swXS5zZXBhcmF0b3J9KSxlfX0sbS5LZXlzPWNsYXNzIGV4dGVuZHMgQXJyYXl7Y29uY2F0KGUpe2NvbnN0IHQ9dGhpcy5zbGljZSgpLHI9bmV3IE1hcDtmb3IobGV0IGU9MDtlPHQubGVuZ3RoOysrZSlyLnNldCh0W2VdLmtleSxlKTtmb3IoY29uc3QgcyBvZiBlKXtjb25zdCBlPXMua2V5LG49ci5nZXQoZSk7dm9pZCAwIT09bj90W25dPXtrZXk6ZSxzY2hlbWE6dFtuXS5zY2hlbWEuY29uY2F0KHMuc2NoZW1hKX06dC5wdXNoKHMpfXJldHVybiB0fX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtjb25zdCBzPXttaW5Eb21haW5TZWdtZW50czoyLG5vbkFzY2lpUng6L1teXFx4MDAtXFx4N2ZdLyxkb21haW5Db250cm9sUng6L1tcXHgwMC1cXHgyMEBcXDpcXC9dLyx0bGRTZWdtZW50Ung6L15bYS16QS1aXSg/OlthLXpBLVowLTlcXC1dKlthLXpBLVowLTldKT8kLyxkb21haW5TZWdtZW50Ung6L15bYS16QS1aMC05XSg/OlthLXpBLVowLTlcXC1dKlthLXpBLVowLTldKT8kLyxVUkw6cigyNCkuVVJMfHxVUkx9O3QuYW5hbHl6ZT1mdW5jdGlvbihlKXtsZXQgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06e307aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGUpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBpbnB1dDogZG9tYWluIG11c3QgYmUgYSBzdHJpbmdcIik7aWYoIWUpcmV0dXJue2Vycm9yOlwiRG9tYWluIG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nXCJ9O2lmKGUubGVuZ3RoPjI1NilyZXR1cm57ZXJyb3I6XCJEb21haW4gdG9vIGxvbmdcIn07Y29uc3Qgcj0hcy5ub25Bc2NpaVJ4LnRlc3QoZSk7aWYoIXIpe2lmKCExPT09dC5hbGxvd1VuaWNvZGUpcmV0dXJue2Vycm9yOlwiRG9tYWluIGNvbnRhaW5zIGZvcmJpZGRlbiBVbmljb2RlIGNoYXJhY3RlcnNcIn07ZT1lLm5vcm1hbGl6ZShcIk5GQ1wiKX1pZihzLmRvbWFpbkNvbnRyb2xSeC50ZXN0KGUpKXJldHVybntlcnJvcjpcIkRvbWFpbiBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlclwifTtlPXMucHVueWNvZGUoZSk7Y29uc3Qgbj10Lm1pbkRvbWFpblNlZ21lbnRzfHxzLm1pbkRvbWFpblNlZ21lbnRzLG89ZS5zcGxpdChcIi5cIik7aWYoby5sZW5ndGg8bilyZXR1cm57ZXJyb3I6XCJEb21haW4gbGFja3MgdGhlIG1pbmltdW0gcmVxdWlyZWQgbnVtYmVyIG9mIHNlZ21lbnRzXCJ9O2NvbnN0IGE9dC50bGRzO2lmKGEpe2NvbnN0IGU9b1tvLmxlbmd0aC0xXS50b0xvd2VyQ2FzZSgpO2lmKGEuZGVueSYmYS5kZW55LmhhcyhlKXx8YS5hbGxvdyYmIWEuYWxsb3cuaGFzKGUpKXJldHVybntlcnJvcjpcIkRvbWFpbiB1c2VzIGZvcmJpZGRlbiBUTERcIn19Zm9yKGxldCBlPTA7ZTxvLmxlbmd0aDsrK2Upe2NvbnN0IHQ9b1tlXTtpZighdC5sZW5ndGgpcmV0dXJue2Vycm9yOlwiRG9tYWluIGNvbnRhaW5zIGVtcHR5IGRvdC1zZXBhcmF0ZWQgc2VnbWVudFwifTtpZih0Lmxlbmd0aD42MylyZXR1cm57ZXJyb3I6XCJEb21haW4gY29udGFpbnMgZG90LXNlcGFyYXRlZCBzZWdtZW50IHRoYXQgaXMgdG9vIGxvbmdcIn07aWYoZTxvLmxlbmd0aC0xKXtpZighcy5kb21haW5TZWdtZW50UngudGVzdCh0KSlyZXR1cm57ZXJyb3I6XCJEb21haW4gY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJcIn19ZWxzZSBpZighcy50bGRTZWdtZW50UngudGVzdCh0KSlyZXR1cm57ZXJyb3I6XCJEb21haW4gY29udGFpbnMgaW52YWxpZCB0bGQgY2hhcmFjdGVyXCJ9fX0sdC5pc1ZhbGlkPWZ1bmN0aW9uKGUscil7cmV0dXJuIXQuYW5hbHl6ZShlLHIpfSxzLnB1bnljb2RlPWZ1bmN0aW9uKGUpe3RyeXtyZXR1cm4gbmV3IHMuVVJMKFwiaHR0cDovL1wiLmNvbmNhdChlKSkuaG9zdH1jYXRjaCh0KXtyZXR1cm4gZX19fSxmdW5jdGlvbihlLHQpe30sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKC9bXFxeXFwkXFwuXFwqXFwrXFwtXFw/XFw9XFwhXFw6XFx8XFxcXFxcL1xcKFxcKVxcW1xcXVxce1xcfVxcLF0vZyxcIlxcXFwkJlwiKX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtjb25zdCBzPXIoMCksbj1yKDI1KSxvPXtnZW5lcmF0ZTpmdW5jdGlvbigpe2NvbnN0IGU9e30sdD1cIiFcXFxcJCYnXFxcXChcXFxcKVxcXFwqXFxcXCssOz1cIixyPVwiXFxcXHctXFxcXC5+JVxcXFxkQS1GYS1mXCIrdCtcIjpAXCIscz1cIltcIityK1wiXVwiLG49XCIoPzowezAsMn1cXFxcZHwwP1sxLTldXFxcXGR8MVxcXFxkXFxcXGR8MlswLTRdXFxcXGR8MjVbMC01XSlcIjtlLmlwdjRhZGRyZXNzPVwiKD86XCIrbitcIlxcXFwuKXszfVwiK247Y29uc3Qgbz1cIltcXFxcZEEtRmEtZl17MSw0fVwiLGE9XCIoPzpcIitvK1wiOlwiK28rXCJ8XCIrZS5pcHY0YWRkcmVzcytcIilcIixpPVwiKD86XCIrbytcIjopezZ9XCIrYSxsPVwiOjooPzpcIitvK1wiOil7NX1cIithLGM9XCIoPzpcIitvK1wiKT86Oig/OlwiK28rXCI6KXs0fVwiK2EsdT1cIig/Oig/OlwiK28rXCI6KXswLDF9XCIrbytcIik/OjooPzpcIitvK1wiOil7M31cIithLGY9XCIoPzooPzpcIitvK1wiOil7MCwyfVwiK28rXCIpPzo6KD86XCIrbytcIjopezJ9XCIrYSxoPVwiKD86KD86XCIrbytcIjopezAsM31cIitvK1wiKT86OlwiK28rXCI6XCIrYSxtPVwiKD86KD86XCIrbytcIjopezAsNH1cIitvK1wiKT86OlwiK2E7ZS5pcHY0Q2lkcj1cIlxcXFxkfFsxLTJdXFxcXGR8M1swLTJdXCIsZS5pcHY2Q2lkcj1cIig/OjB7MCwyfVxcXFxkfDA/WzEtOV1cXFxcZHwxWzAxXVxcXFxkfDEyWzAtOF0pXCIsZS5pcHY2YWRkcmVzcz1cIig/OlwiK2krXCJ8XCIrbCtcInxcIitjK1wifFwiK3UrXCJ8XCIrZitcInxcIitoK1wifFwiK20rXCJ8KD86KD86W1xcXFxkQS1GYS1mXXsxLDR9Oil7MCw1fVtcXFxcZEEtRmEtZl17MSw0fSk/OjpbXFxcXGRBLUZhLWZdezEsNH18KD86KD86W1xcXFxkQS1GYS1mXXsxLDR9Oil7MCw2fVtcXFxcZEEtRmEtZl17MSw0fSk/OjopXCIsZS5pcHZGdXR1cmU9XCJ2W1xcXFxkQS1GYS1mXStcXFxcLltcXFxcdy1cXFxcLn5cIit0K1wiOl0rXCIsZS5zY2hlbWU9XCJbYS16QS1aXVthLXpBLVpcXFxcZCstXFxcXC5dKlwiLGUuc2NoZW1lUmVnZXg9bmV3IFJlZ0V4cChlLnNjaGVtZSk7Y29uc3QgZD1cIltcXFxcdy1cXFxcLn4lXFxcXGRBLUZhLWZcIit0K1wiOl0qXCIscD1cIig/OlwiKyhcIlxcXFxbKD86XCIrZS5pcHY2YWRkcmVzcytcInxcIitlLmlwdkZ1dHVyZStcIilcXFxcXVwiKStcInxcIitlLmlwdjRhZGRyZXNzK1wifFtcXFxcdy1cXFxcLn4lXFxcXGRBLUZhLWYhXFxcXCQmJ1xcXFwoXFxcXClcXFxcKlxcXFwrLDs9XXsxLDI1NX0pXCIsZz1cIig/OlwiK2QrXCJAKT9cIitwK1wiKD86OlxcXFxkKik/XCIseT1cIig/OlwiK2QrXCJAKT8oXCIrcCtcIikoPzo6XFxcXGQqKT9cIixiPXMrXCIqXCIsdj1zK1wiK1wiLF89XCIoPzpcXFxcL1wiK2IrXCIpKlwiLHc9XCJcXFxcLyg/OlwiK3YrXytcIik/XCIsJD12K187cmV0dXJuIGUuaGllclBhcnQ9XCIoPzooPzpcXFxcL1xcXFwvXCIrZytfK1wiKXxcIit3K1wifFwiKyQrXCJ8KD86XFxcXC9cXFxcL1xcXFwvW1xcXFx3LVxcXFwufiVcXFxcZEEtRmEtZiFcXFxcJCYnXFxcXChcXFxcKVxcXFwqXFxcXCssOz06QF0qKD86XFxcXC9bXFxcXHctXFxcXC5+JVxcXFxkQS1GYS1mIVxcXFwkJidcXFxcKFxcXFwpXFxcXCpcXFxcKyw7PTpAXSopKikpXCIsZS5oaWVyUGFydENhcHR1cmU9XCIoPzooPzpcXFxcL1xcXFwvXCIreStfK1wiKXxcIit3K1wifFwiKyQrXCIpXCIsZS5yZWxhdGl2ZVJlZj1cIig/Oig/OlxcXFwvXFxcXC9cIitnK18rXCIpfFwiK3crXCJ8W1xcXFx3LVxcXFwufiVcXFxcZEEtRmEtZiFcXFxcJCYnXFxcXChcXFxcKVxcXFwqXFxcXCssOz1AXSsoPzpcXFxcL1tcXFxcdy1cXFxcLn4lXFxcXGRBLUZhLWYhXFxcXCQmJ1xcXFwoXFxcXClcXFxcKlxcXFwrLDs9OkBdKikqfClcIixlLnF1ZXJ5PVwiW1wiK3IrXCJcXFxcL1xcXFw/XSooPz0jfCQpXCIsZS5xdWVyeVdpdGhTcXVhcmVCcmFja2V0cz1cIltcIityK1wiXFxcXFtcXFxcXVxcXFwvXFxcXD9dKig/PSN8JClcIixlLmZyYWdtZW50PVwiW1wiK3IrXCJcXFxcL1xcXFw/XSpcIixlfX07ZS5leHBvcnRzPXQ9by5yZmMzOTg2PW8uZ2VuZXJhdGUoKSxvLmNyZWF0ZVJlZ2V4PWZ1bmN0aW9uKGUpe2NvbnN0IHQ9by5yZmMzOTg2LHI9XCIoPzpcXFxcP1wiKyhlLmFsbG93UXVlcnlTcXVhcmVCcmFja2V0cz90LnF1ZXJ5V2l0aFNxdWFyZUJyYWNrZXRzOnQucXVlcnkpK1wiKT8oPzojXCIrdC5mcmFnbWVudCtcIik/JFwiO2lmKGUucmVsYXRpdmVPbmx5KXJldHVybiBuZXcgUmVnRXhwKFwiXlwiK3QucmVsYXRpdmVSZWYrcik7bGV0IGE9XCJcIjtpZihlLnNjaGVtZSl7cyhlLnNjaGVtZSBpbnN0YW5jZW9mIFJlZ0V4cHx8XCJzdHJpbmdcIj09dHlwZW9mIGUuc2NoZW1lfHxBcnJheS5pc0FycmF5KGUuc2NoZW1lKSxcInNjaGVtZSBtdXN0IGJlIGEgUmVnRXhwLCBTdHJpbmcsIG9yIEFycmF5XCIpO2NvbnN0IHI9W10uY29uY2F0KGUuc2NoZW1lKTtzKHIubGVuZ3RoPj0xLFwic2NoZW1lIG11c3QgaGF2ZSBhdCBsZWFzdCAxIHNjaGVtZSBzcGVjaWZpZWRcIik7Y29uc3Qgbz1bXTtmb3IobGV0IGU9MDtlPHIubGVuZ3RoOysrZSl7Y29uc3QgYT1yW2VdO3MoYSBpbnN0YW5jZW9mIFJlZ0V4cHx8XCJzdHJpbmdcIj09dHlwZW9mIGEsXCJzY2hlbWUgYXQgcG9zaXRpb24gXCIrZStcIiBtdXN0IGJlIGEgUmVnRXhwIG9yIFN0cmluZ1wiKSxhIGluc3RhbmNlb2YgUmVnRXhwP28ucHVzaChhLnNvdXJjZS50b1N0cmluZygpKToocyh0LnNjaGVtZVJlZ2V4LnRlc3QoYSksXCJzY2hlbWUgYXQgcG9zaXRpb24gXCIrZStcIiBtdXN0IGJlIGEgdmFsaWQgc2NoZW1lXCIpLG8ucHVzaChuKGEpKSl9YT1vLmpvaW4oXCJ8XCIpfWNvbnN0IGk9XCIoPzpcIisoYT9cIig/OlwiK2ErXCIpXCI6dC5zY2hlbWUpK1wiOlwiKyhlLmRvbWFpbj90LmhpZXJQYXJ0Q2FwdHVyZTp0LmhpZXJQYXJ0KStcIilcIixsPWUuYWxsb3dSZWxhdGl2ZT9cIig/OlwiK2krXCJ8XCIrdC5yZWxhdGl2ZVJlZitcIilcIjppLGM9bmV3IFJlZ0V4cChcIl5cIitsK3IpO3JldHVybiBjLnNjaGVtZT1hLGN9LG8udXJpUmVnZXg9by5jcmVhdGVSZWdleCh7fSksdC5jcmVhdGVSZWdleD1mdW5jdGlvbigpe2xldCBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp7fTtyZXR1cm4gZS5zY2hlbWV8fGUuYWxsb3dSZWxhdGl2ZXx8ZS5yZWxhdGl2ZU9ubHl8fGUuYWxsb3dRdWVyeVNxdWFyZUJyYWNrZXRzfHxlLmRvbWFpbj9vLmNyZWF0ZVJlZ2V4KGUpOm8udXJpUmVnZXh9fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ZS5leHBvcnRzPWZ1bmN0aW9uKCl7dHJ5e2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLHQ9bmV3IEFycmF5KGUpLHI9MDtyPGU7cisrKXRbcl09YXJndW1lbnRzW3JdO3JldHVybiBKU09OLnN0cmluZ2lmeS5hcHBseShudWxsLHQpfWNhdGNoKGUpe3JldHVyblwiW0Nhbm5vdCBkaXNwbGF5IG9iamVjdDogXCIrZS5tZXNzYWdlK1wiXVwifX19LGZ1bmN0aW9uKGUpe2UuZXhwb3J0cz1KU09OLnBhcnNlKCd7XCJ2ZXJzaW9uXCI6XCIxNi4xLjhcIn0nKX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2NvbnN0IHM9e307ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe2lmKCFlKXJldHVyblwiXCI7bGV0IHQ9XCJcIjtmb3IobGV0IHI9MDtyPGUubGVuZ3RoOysrcil7Y29uc3Qgbj1lLmNoYXJDb2RlQXQocik7cy5pc1NhZmUobik/dCs9ZVtyXTp0Kz1zLmVzY2FwZUh0bWxDaGFyKG4pfXJldHVybiB0fSxzLmVzY2FwZUh0bWxDaGFyPWZ1bmN0aW9uKGUpe2NvbnN0IHQ9cy5uYW1lZEh0bWxbZV07aWYodm9pZCAwIT09dClyZXR1cm4gdDtpZihlPj0yNTYpcmV0dXJuXCImI1wiK2UrXCI7XCI7Y29uc3Qgcj1lLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLFwiMFwiKTtyZXR1cm5cIiYjeFwiLmNvbmNhdChyLFwiO1wiKX0scy5pc1NhZmU9ZnVuY3Rpb24oZSl7cmV0dXJuIHZvaWQgMCE9PXMuc2FmZUNoYXJDb2Rlc1tlXX0scy5uYW1lZEh0bWw9ezM4OlwiJmFtcDtcIiw2MDpcIiZsdDtcIiw2MjpcIiZndDtcIiwzNDpcIiZxdW90O1wiLDE2MDpcIiZuYnNwO1wiLDE2MjpcIiZjZW50O1wiLDE2MzpcIiZwb3VuZDtcIiwxNjQ6XCImY3VycmVuO1wiLDE2OTpcIiZjb3B5O1wiLDE3NDpcIiZyZWc7XCJ9LHMuc2FmZUNoYXJDb2Rlcz1mdW5jdGlvbigpe2NvbnN0IGU9e307Zm9yKGxldCB0PTMyO3Q8MTIzOysrdCkodD49OTd8fHQ+PTY1JiZ0PD05MHx8dD49NDgmJnQ8PTU3fHwzMj09PXR8fDQ2PT09dHx8NDQ9PT10fHw0NT09PXR8fDU4PT09dHx8OTU9PT10KSYmKGVbdF09bnVsbCk7cmV0dXJuIGV9KCl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtjb25zdCBzPXtvcGVyYXRvcnM6W1wiIVwiLFwiXlwiLFwiKlwiLFwiL1wiLFwiJVwiLFwiK1wiLFwiLVwiLFwiPFwiLFwiPD1cIixcIj5cIixcIj49XCIsXCI9PVwiLFwiIT1cIixcIiYmXCIsXCJ8fFwiLFwiPz9cIl0sb3BlcmF0b3JDaGFyYWN0ZXJzOltcIiFcIixcIl5cIixcIipcIixcIi9cIixcIiVcIixcIitcIixcIi1cIixcIjxcIixcIj1cIixcIj5cIixcIiZcIixcInxcIixcIj9cIl0sb3BlcmF0b3JzT3JkZXI6W1tcIl5cIl0sW1wiKlwiLFwiL1wiLFwiJVwiXSxbXCIrXCIsXCItXCJdLFtcIjxcIixcIjw9XCIsXCI+XCIsXCI+PVwiXSxbXCI9PVwiLFwiIT1cIl0sW1wiJiZcIl0sW1wifHxcIixcIj8/XCJdXSxvcGVyYXRvcnNQcmVmaXg6W1wiIVwiLFwiblwiXSxsaXRlcmFsczp7J1wiJzonXCInLFwiYFwiOlwiYFwiLFwiJ1wiOlwiJ1wiLFwiW1wiOlwiXVwifSxudW1iZXJSeDovXig/OlswLTldKlxcLj9bMC05XSopezF9JC8sdG9rZW5SeDovXltcXHdcXCRcXCNcXC5cXEBcXDpcXHtcXH1dKyQvLHN5bWJvbDpTeW1ib2woXCJmb3JtdWxhXCIpLHNldHRpbmdzOlN5bWJvbChcInNldHRpbmdzXCIpfTtlLmV4cG9ydHM9cy5Gb3JtdWxhPWNsYXNze2NvbnN0cnVjdG9yKGUpe2xldCB0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp7fTtpZighdFtzLnNldHRpbmdzXSYmdC5jb25zdGFudHMpZm9yKGNvbnN0IGUgaW4gdC5jb25zdGFudHMpe2NvbnN0IHI9dC5jb25zdGFudHNbZV07aWYobnVsbCE9PXImJiFbXCJib29sZWFuXCIsXCJudW1iZXJcIixcInN0cmluZ1wiXS5pbmNsdWRlcyh0eXBlb2YgcikpdGhyb3cgbmV3IEVycm9yKFwiRm9ybXVsYSBjb25zdGFudCBcIi5jb25jYXQoZSxcIiBjb250YWlucyBpbnZhbGlkIFwiKS5jb25jYXQodHlwZW9mIHIsXCIgdmFsdWUgdHlwZVwiKSl9dGhpcy5zZXR0aW5ncz10W3Muc2V0dGluZ3NdP3Q6T2JqZWN0LmFzc2lnbih7W3Muc2V0dGluZ3NdOiEwLGNvbnN0YW50czp7fSxmdW5jdGlvbnM6e319LHQpLHRoaXMuc2luZ2xlPW51bGwsdGhpcy5fcGFydHM9bnVsbCx0aGlzLl9wYXJzZShlKX1fcGFyc2UoZSl7bGV0IHQ9W10scj1cIlwiLG49MCxvPSExO2NvbnN0IGE9ZT0+e2lmKG4pdGhyb3cgbmV3IEVycm9yKFwiRm9ybXVsYSBtaXNzaW5nIGNsb3NpbmcgcGFyZW50aGVzaXNcIik7Y29uc3QgYT10Lmxlbmd0aD90W3QubGVuZ3RoLTFdOm51bGw7aWYob3x8cnx8ZSl7aWYoYSYmXCJyZWZlcmVuY2VcIj09PWEudHlwZSYmXCIpXCI9PT1lKXJldHVybiBhLnR5cGU9XCJmdW5jdGlvblwiLGEudmFsdWU9dGhpcy5fc3ViRm9ybXVsYShyLGEudmFsdWUpLHZvaWQocj1cIlwiKTtpZihcIilcIj09PWUpe2NvbnN0IGU9bmV3IHMuRm9ybXVsYShyLHRoaXMuc2V0dGluZ3MpO3QucHVzaCh7dHlwZTpcInNlZ21lbnRcIix2YWx1ZTplfSl9ZWxzZSBpZihvKXtpZihcIl1cIj09PW8pcmV0dXJuIHQucHVzaCh7dHlwZTpcInJlZmVyZW5jZVwiLHZhbHVlOnJ9KSx2b2lkKHI9XCJcIik7dC5wdXNoKHt0eXBlOlwibGl0ZXJhbFwiLHZhbHVlOnJ9KX1lbHNlIGlmKHMub3BlcmF0b3JDaGFyYWN0ZXJzLmluY2x1ZGVzKHIpKWEmJlwib3BlcmF0b3JcIj09PWEudHlwZSYmcy5vcGVyYXRvcnMuaW5jbHVkZXMoYS52YWx1ZStyKT9hLnZhbHVlKz1yOnQucHVzaCh7dHlwZTpcIm9wZXJhdG9yXCIsdmFsdWU6cn0pO2Vsc2UgaWYoci5tYXRjaChzLm51bWJlclJ4KSl0LnB1c2goe3R5cGU6XCJjb25zdGFudFwiLHZhbHVlOnBhcnNlRmxvYXQocil9KTtlbHNlIGlmKHZvaWQgMCE9PXRoaXMuc2V0dGluZ3MuY29uc3RhbnRzW3JdKXQucHVzaCh7dHlwZTpcImNvbnN0YW50XCIsdmFsdWU6dGhpcy5zZXR0aW5ncy5jb25zdGFudHNbcl19KTtlbHNle2lmKCFyLm1hdGNoKHMudG9rZW5SeCkpdGhyb3cgbmV3IEVycm9yKFwiRm9ybXVsYSBjb250YWlucyBpbnZhbGlkIHRva2VuOiBcIi5jb25jYXQocikpO3QucHVzaCh7dHlwZTpcInJlZmVyZW5jZVwiLHZhbHVlOnJ9KX1yPVwiXCJ9fTtmb3IoY29uc3QgdCBvZiBlKW8/dD09PW8/KGEoKSxvPSExKTpyKz10Om4/XCIoXCI9PT10PyhyKz10LCsrbik6XCIpXCI9PT10Py0tbj9yKz10OmEodCk6cis9dDp0IGluIHMubGl0ZXJhbHM/bz1zLmxpdGVyYWxzW3RdOlwiKFwiPT09dD8oYSgpLCsrbik6cy5vcGVyYXRvckNoYXJhY3RlcnMuaW5jbHVkZXModCk/KGEoKSxyPXQsYSgpKTpcIiBcIiE9PXQ/cis9dDphKCk7YSgpLHQ9dC5tYXAoKGUscik9Plwib3BlcmF0b3JcIiE9PWUudHlwZXx8XCItXCIhPT1lLnZhbHVlfHxyJiZcIm9wZXJhdG9yXCIhPT10W3ItMV0udHlwZT9lOnt0eXBlOlwib3BlcmF0b3JcIix2YWx1ZTpcIm5cIn0pO2xldCBpPSExO2Zvcihjb25zdCBlIG9mIHQpe2lmKFwib3BlcmF0b3JcIj09PWUudHlwZSl7aWYocy5vcGVyYXRvcnNQcmVmaXguaW5jbHVkZXMoZS52YWx1ZSkpY29udGludWU7aWYoIWkpdGhyb3cgbmV3IEVycm9yKFwiRm9ybXVsYSBjb250YWlucyBhbiBvcGVyYXRvciBpbiBpbnZhbGlkIHBvc2l0aW9uXCIpO2lmKCFzLm9wZXJhdG9ycy5pbmNsdWRlcyhlLnZhbHVlKSl0aHJvdyBuZXcgRXJyb3IoXCJGb3JtdWxhIGNvbnRhaW5zIGFuIHVua25vd24gb3BlcmF0b3IgXCIuY29uY2F0KGUudmFsdWUpKX1lbHNlIGlmKGkpdGhyb3cgbmV3IEVycm9yKFwiRm9ybXVsYSBtaXNzaW5nIGV4cGVjdGVkIG9wZXJhdG9yXCIpO2k9IWl9aWYoIWkpdGhyb3cgbmV3IEVycm9yKFwiRm9ybXVsYSBjb250YWlucyBpbnZhbGlkIHRyYWlsaW5nIG9wZXJhdG9yXCIpOzE9PT10Lmxlbmd0aCYmW1wicmVmZXJlbmNlXCIsXCJsaXRlcmFsXCIsXCJjb25zdGFudFwiXS5pbmNsdWRlcyh0WzBdLnR5cGUpJiYodGhpcy5zaW5nbGU9e3R5cGU6XCJyZWZlcmVuY2VcIj09PXRbMF0udHlwZT9cInJlZmVyZW5jZVwiOlwidmFsdWVcIix2YWx1ZTp0WzBdLnZhbHVlfSksdGhpcy5fcGFydHM9dC5tYXAoZT0+e2lmKFwib3BlcmF0b3JcIj09PWUudHlwZSlyZXR1cm4gcy5vcGVyYXRvcnNQcmVmaXguaW5jbHVkZXMoZS52YWx1ZSk/ZTplLnZhbHVlO2lmKFwicmVmZXJlbmNlXCIhPT1lLnR5cGUpcmV0dXJuIGUudmFsdWU7aWYodGhpcy5zZXR0aW5ncy50b2tlblJ4JiYhdGhpcy5zZXR0aW5ncy50b2tlblJ4LnRlc3QoZS52YWx1ZSkpdGhyb3cgbmV3IEVycm9yKFwiRm9ybXVsYSBjb250YWlucyBpbnZhbGlkIHJlZmVyZW5jZSBcIi5jb25jYXQoZS52YWx1ZSkpO3JldHVybiB0aGlzLnNldHRpbmdzLnJlZmVyZW5jZT90aGlzLnNldHRpbmdzLnJlZmVyZW5jZShlLnZhbHVlKTpzLnJlZmVyZW5jZShlLnZhbHVlKX0pfV9zdWJGb3JtdWxhKGUsdCl7Y29uc3Qgcj10aGlzLnNldHRpbmdzLmZ1bmN0aW9uc1t0XTtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiByKXRocm93IG5ldyBFcnJvcihcIkZvcm11bGEgY29udGFpbnMgdW5rbm93biBmdW5jdGlvbiBcIi5jb25jYXQodCkpO2xldCBuPVtdO2lmKGUpe2xldCByPVwiXCIsbz0wLGE9ITE7Y29uc3QgaT0oKT0+e2lmKCFyKXRocm93IG5ldyBFcnJvcihcIkZvcm11bGEgY29udGFpbnMgZnVuY3Rpb24gXCIuY29uY2F0KHQsXCIgd2l0aCBpbnZhbGlkIGFyZ3VtZW50cyBcIikuY29uY2F0KGUpKTtuLnB1c2gocikscj1cIlwifTtmb3IobGV0IHQ9MDt0PGUubGVuZ3RoOysrdCl7Y29uc3Qgbj1lW3RdO2E/KHIrPW4sbj09PWEmJihhPSExKSk6biBpbiBzLmxpdGVyYWxzJiYhbz8ocis9bixhPXMubGl0ZXJhbHNbbl0pOlwiLFwiIT09bnx8bz8ocis9bixcIihcIj09PW4/KytvOlwiKVwiPT09biYmLS1vKTppKCl9aSgpfXJldHVybiBuPW4ubWFwKGU9Pm5ldyBzLkZvcm11bGEoZSx0aGlzLnNldHRpbmdzKSksZnVuY3Rpb24oZSl7Y29uc3QgdD1bXTtmb3IoY29uc3QgciBvZiBuKXQucHVzaChyLmV2YWx1YXRlKGUpKTtyZXR1cm4gci5jYWxsKGUsLi4udCl9fWV2YWx1YXRlKGUpe2NvbnN0IHQ9dGhpcy5fcGFydHMuc2xpY2UoKTtmb3IobGV0IHI9dC5sZW5ndGgtMjtyPj0wOy0tcil7Y29uc3Qgbj10W3JdO2lmKG4mJlwib3BlcmF0b3JcIj09PW4udHlwZSl7Y29uc3Qgbz10W3IrMV07dC5zcGxpY2UocisxLDEpO2NvbnN0IGE9cy5ldmFsdWF0ZShvLGUpO3Rbcl09cy5zaW5nbGUobi52YWx1ZSxhKX19cmV0dXJuIHMub3BlcmF0b3JzT3JkZXIuZm9yRWFjaChyPT57Zm9yKGxldCBuPTE7bjx0Lmxlbmd0aC0xOylpZihyLmluY2x1ZGVzKHRbbl0pKXtjb25zdCByPXRbbl0sbz1zLmV2YWx1YXRlKHRbbi0xXSxlKSxhPXMuZXZhbHVhdGUodFtuKzFdLGUpO3Quc3BsaWNlKG4sMik7Y29uc3QgaT1zLmNhbGN1bGF0ZShyLG8sYSk7dFtuLTFdPTA9PT1pPzA6aX1lbHNlIG4rPTJ9KSxzLmV2YWx1YXRlKHRbMF0sZSl9fSxzLkZvcm11bGEucHJvdG90eXBlW3Muc3ltYm9sXT0hMCxzLnJlZmVyZW5jZT1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCl7cmV0dXJuIHQmJnZvaWQgMCE9PXRbZV0/dFtlXTpudWxsfX0scy5ldmFsdWF0ZT1mdW5jdGlvbihlLHQpe3JldHVybiBudWxsPT09ZT9udWxsOlwiZnVuY3Rpb25cIj09dHlwZW9mIGU/ZSh0KTplW3Muc3ltYm9sXT9lLmV2YWx1YXRlKHQpOmV9LHMuc2luZ2xlPWZ1bmN0aW9uKGUsdCl7aWYoXCIhXCI9PT1lKXJldHVybiF0O2NvbnN0IHI9LXQ7cmV0dXJuIDA9PT1yPzA6cn0scy5jYWxjdWxhdGU9ZnVuY3Rpb24oZSx0LHIpe2lmKFwiPz9cIj09PWUpcmV0dXJuIHMuZXhpc3RzKHQpP3Q6cjtpZihcInN0cmluZ1wiPT10eXBlb2YgdHx8XCJzdHJpbmdcIj09dHlwZW9mIHIpe2lmKFwiK1wiPT09ZSlyZXR1cm4odD1zLmV4aXN0cyh0KT90OlwiXCIpKyhyPXMuZXhpc3RzKHIpP3I6XCJcIil9ZWxzZSBzd2l0Y2goZSl7Y2FzZVwiXlwiOnJldHVybiBNYXRoLnBvdyh0LHIpO2Nhc2VcIipcIjpyZXR1cm4gdCpyO2Nhc2VcIi9cIjpyZXR1cm4gdC9yO2Nhc2VcIiVcIjpyZXR1cm4gdCVyO2Nhc2VcIitcIjpyZXR1cm4gdCtyO2Nhc2VcIi1cIjpyZXR1cm4gdC1yfXN3aXRjaChlKXtjYXNlXCI8XCI6cmV0dXJuIHQ8cjtjYXNlXCI8PVwiOnJldHVybiB0PD1yO2Nhc2VcIj5cIjpyZXR1cm4gdD5yO2Nhc2VcIj49XCI6cmV0dXJuIHQ+PXI7Y2FzZVwiPT1cIjpyZXR1cm4gdD09PXI7Y2FzZVwiIT1cIjpyZXR1cm4gdCE9PXI7Y2FzZVwiJiZcIjpyZXR1cm4gdCYmcjtjYXNlXCJ8fFwiOnJldHVybiB0fHxyfXJldHVybiBudWxsfSxzLmV4aXN0cz1mdW5jdGlvbihlKXtyZXR1cm4gbnVsbCE9ZX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtjb25zdCBzPXIoMCksbj1yKDMpLG89cigxKSxhPXIoNyksaT1yKDQpLGw9cig1KSxjPXt9O2UuZXhwb3J0cz1uLmV4dGVuZCh7dHlwZTpcImFsdGVybmF0aXZlc1wiLGZsYWdzOnttYXRjaDp7ZGVmYXVsdDpcImFueVwifX0sdGVybXM6e21hdGNoZXM6e2luaXQ6W10scmVnaXN0ZXI6bC50b1NpYmxpbmd9fSxhcmdzKGUpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLHI9bmV3IEFycmF5KHQ+MT90LTE6MCkscz0xO3M8dDtzKyspcltzLTFdPWFyZ3VtZW50c1tzXTtyZXR1cm4gMT09PXIubGVuZ3RoJiZBcnJheS5pc0FycmF5KHJbMF0pP2UudHJ5KC4uLnJbMF0pOmUudHJ5KC4uLnIpfSx2YWxpZGF0ZShlLHQpe2NvbnN0e3NjaGVtYTpyLGVycm9yOnMsc3RhdGU6bixwcmVmczpvfT10O2lmKHIuX2ZsYWdzLm1hdGNoKXtsZXQgdCxhPTA7Zm9yKGxldCBzPTA7czxyLiRfdGVybXMubWF0Y2hlcy5sZW5ndGg7KytzKXtjb25zdCBpPXIuJF90ZXJtcy5tYXRjaGVzW3NdLGw9bi5uZXN0KGkuc2NoZW1hLFwibWF0Y2guXCIuY29uY2F0KHMpKTtsLnNuYXBzaG90KCk7Y29uc3QgYz1pLnNjaGVtYS4kX3ZhbGlkYXRlKGUsbCxvKTtjLmVycm9ycz9sLnJlc3RvcmUoKTooKythLHQ9Yy52YWx1ZSl9cmV0dXJuIGE/XCJvbmVcIj09PXIuX2ZsYWdzLm1hdGNoPzE9PT1hP3t2YWx1ZTp0fTp7ZXJyb3JzOnMoXCJhbHRlcm5hdGl2ZXMub25lXCIpfTphPT09ci4kX3Rlcm1zLm1hdGNoZXMubGVuZ3RoP3t2YWx1ZTplfTp7ZXJyb3JzOnMoXCJhbHRlcm5hdGl2ZXMuYWxsXCIpfTp7ZXJyb3JzOnMoXCJhbHRlcm5hdGl2ZXMuYW55XCIpfX1jb25zdCBhPVtdO2ZvcihsZXQgdD0wO3Q8ci4kX3Rlcm1zLm1hdGNoZXMubGVuZ3RoOysrdCl7Y29uc3Qgcz1yLiRfdGVybXMubWF0Y2hlc1t0XTtpZihzLnNjaGVtYSl7Y29uc3Qgcj1uLm5lc3Qocy5zY2hlbWEsXCJtYXRjaC5cIi5jb25jYXQodCkpO3Iuc25hcHNob3QoKTtjb25zdCBpPXMuc2NoZW1hLiRfdmFsaWRhdGUoZSxyLG8pO2lmKCFpLmVycm9ycylyZXR1cm4gaTtyLnJlc3RvcmUoKSxhLnB1c2goe3NjaGVtYTpzLnNjaGVtYSxyZXBvcnRzOmkuZXJyb3JzfSk7Y29udGludWV9Y29uc3QgaT1zLnJlZj9zLnJlZi5yZXNvbHZlKGUsbixvKTplLGw9cy5pcz9bc106cy5zd2l0Y2g7Zm9yKGxldCByPTA7cjxsLmxlbmd0aDsrK3Ipe2NvbnN0IGE9bFtyXSx7aXM6Yyx0aGVuOnUsb3RoZXJ3aXNlOmZ9PWEsaD1cIm1hdGNoLlwiLmNvbmNhdCh0KS5jb25jYXQocy5zd2l0Y2g/XCIuXCIrcjpcIlwiKTtpZihjLiRfbWF0Y2goaSxuLm5lc3QoYyxcIlwiLmNvbmNhdChoLFwiLmlzXCIpKSxvKSl7aWYodSlyZXR1cm4gdS4kX3ZhbGlkYXRlKGUsbi5uZXN0KHUsXCJcIi5jb25jYXQoaCxcIi50aGVuXCIpKSxvKX1lbHNlIGlmKGYpcmV0dXJuIGYuJF92YWxpZGF0ZShlLG4ubmVzdChmLFwiXCIuY29uY2F0KGgsXCIub3RoZXJ3aXNlXCIpKSxvKX19cmV0dXJuIGMuZXJyb3JzKGEsdCl9LHJ1bGVzOntjb25kaXRpb25hbDp7bWV0aG9kKGUsdCl7cyghdGhpcy5fZmxhZ3MuX2VuZGVkU3dpdGNoLFwiVW5yZWFjaGFibGUgY29uZGl0aW9uXCIpLHMoIXRoaXMuX2ZsYWdzLm1hdGNoLFwiQ2Fubm90IGNvbWJpbmUgbWF0Y2ggbW9kZVwiLHRoaXMuX2ZsYWdzLm1hdGNoLFwid2l0aCBjb25kaXRpb25hbCBydWxlXCIpLHModm9pZCAwPT09dC5icmVhayxcIkNhbm5vdCB1c2UgYnJlYWsgb3B0aW9uIHdpdGggYWx0ZXJuYXRpdmVzIGNvbmRpdGlvbmFsXCIpO2NvbnN0IHI9dGhpcy5jbG9uZSgpLG49YS53aGVuKHIsZSx0KSxvPW4uaXM/W25dOm4uc3dpdGNoO2Zvcihjb25zdCBlIG9mIG8paWYoZS50aGVuJiZlLm90aGVyd2lzZSl7ci4kX3NldEZsYWcoXCJfZW5kZWRTd2l0Y2hcIiwhMCx7Y2xvbmU6ITF9KTticmVha31yZXR1cm4gci4kX3Rlcm1zLm1hdGNoZXMucHVzaChuKSxyLiRfbXV0YXRlUmVidWlsZCgpfX0sbWF0Y2g6e21ldGhvZChlKXtpZihzKFtcImFueVwiLFwib25lXCIsXCJhbGxcIl0uaW5jbHVkZXMoZSksXCJJbnZhbGlkIGFsdGVybmF0aXZlcyBtYXRjaCBtb2RlXCIsZSksXCJhbnlcIiE9PWUpZm9yKGNvbnN0IHQgb2YgdGhpcy4kX3Rlcm1zLm1hdGNoZXMpcyh0LnNjaGVtYSxcIkNhbm5vdCBjb21iaW5lIG1hdGNoIG1vZGVcIixlLFwid2l0aCBjb25kaXRpb25hbCBydWxlc1wiKTtyZXR1cm4gdGhpcy4kX3NldEZsYWcoXCJtYXRjaFwiLGUpfX0sdHJ5OnttZXRob2QoKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aCx0PW5ldyBBcnJheShlKSxyPTA7cjxlO3IrKyl0W3JdPWFyZ3VtZW50c1tyXTtzKHQubGVuZ3RoLFwiTWlzc2luZyBhbHRlcm5hdGl2ZSBzY2hlbWFzXCIpLG8udmVyaWZ5RmxhdCh0LFwidHJ5XCIpLHMoIXRoaXMuX2ZsYWdzLl9lbmRlZFN3aXRjaCxcIlVucmVhY2hhYmxlIGNvbmRpdGlvblwiKTtjb25zdCBuPXRoaXMuY2xvbmUoKTtmb3IoY29uc3QgZSBvZiB0KW4uJF90ZXJtcy5tYXRjaGVzLnB1c2goe3NjaGVtYTpuLiRfY29tcGlsZShlKX0pO3JldHVybiBuLiRfbXV0YXRlUmVidWlsZCgpfX19LG92ZXJyaWRlczp7bGFiZWwoZSl7cmV0dXJuIHRoaXMuJF9zdXBlci5sYWJlbChlKS4kX21vZGlmeSh7ZWFjaDoodCxyKT0+XCJpc1wiIT09ci5wYXRoWzBdP3QubGFiZWwoZSk6dm9pZCAwLHJlZjohMX0pfX0scmVidWlsZChlKXtlLiRfbW9kaWZ5KHtlYWNoOnQ9PntvLmlzU2NoZW1hKHQpJiZcImFycmF5XCI9PT10LnR5cGUmJmUuJF9zZXRGbGFnKFwiX2FycmF5SXRlbXNcIiwhMCx7Y2xvbmU6ITF9KX19KX0sbWFuaWZlc3Q6e2J1aWxkKGUsdCl7aWYodC5tYXRjaGVzKWZvcihjb25zdCByIG9mIHQubWF0Y2hlcyl7Y29uc3R7c2NoZW1hOnQscmVmOnMsaXM6bixub3Q6byx0aGVuOmEsb3RoZXJ3aXNlOml9PXI7ZT10P2UudHJ5KHQpOnM/ZS5jb25kaXRpb25hbChzLHtpczpuLHRoZW46YSxub3Q6byxvdGhlcndpc2U6aSxzd2l0Y2g6ci5zd2l0Y2h9KTplLmNvbmRpdGlvbmFsKG4se3RoZW46YSxvdGhlcndpc2U6aX0pfXJldHVybiBlfX0sbWVzc2FnZXM6e1wiYWx0ZXJuYXRpdmVzLmFsbFwiOidcInt7I2xhYmVsfX1cIiBkb2VzIG5vdCBtYXRjaCBhbGwgb2YgdGhlIHJlcXVpcmVkIHR5cGVzJyxcImFsdGVybmF0aXZlcy5hbnlcIjonXCJ7eyNsYWJlbH19XCIgZG9lcyBub3QgbWF0Y2ggYW55IG9mIHRoZSBhbGxvd2VkIHR5cGVzJyxcImFsdGVybmF0aXZlcy5tYXRjaFwiOidcInt7I2xhYmVsfX1cIiBkb2VzIG5vdCBtYXRjaCBhbnkgb2YgdGhlIGFsbG93ZWQgdHlwZXMnLFwiYWx0ZXJuYXRpdmVzLm9uZVwiOidcInt7I2xhYmVsfX1cIiBtYXRjaGVzIG1vcmUgdGhhbiBvbmUgYWxsb3dlZCB0eXBlJyxcImFsdGVybmF0aXZlcy50eXBlc1wiOidcInt7I2xhYmVsfX1cIiBtdXN0IGJlIG9uZSBvZiB7eyN0eXBlc319J319KSxjLmVycm9ycz1mdW5jdGlvbihlLHQpe2xldHtlcnJvcjpyLHN0YXRlOnN9PXQ7aWYoIWUubGVuZ3RoKXJldHVybntlcnJvcnM6cihcImFsdGVybmF0aXZlcy5hbnlcIil9O2lmKDE9PT1lLmxlbmd0aClyZXR1cm57ZXJyb3JzOmVbMF0ucmVwb3J0c307Y29uc3Qgbj1uZXcgU2V0LG89W107Zm9yKGNvbnN0IHQgb2YgZSl7Y29uc3R7cmVwb3J0czphLHNjaGVtYTpsfT10O2lmKGEubGVuZ3RoPjEpcmV0dXJuIGMudW5tYXRjaGVkKGUscik7Y29uc3QgdT1hWzBdO2lmKHUgaW5zdGFuY2VvZiBpLlJlcG9ydD09ITEpcmV0dXJuIGMudW5tYXRjaGVkKGUscik7aWYodS5zdGF0ZS5wYXRoLmxlbmd0aCE9PXMucGF0aC5sZW5ndGgpe28ucHVzaCh7dHlwZTpsLnR5cGUscmVwb3J0OnV9KTtjb250aW51ZX1pZihcImFueS5vbmx5XCI9PT11LmNvZGUpe2Zvcihjb25zdCBlIG9mIHUubG9jYWwudmFsaWRzKW4uYWRkKGUpO2NvbnRpbnVlfWNvbnN0W2YsaF09dS5jb2RlLnNwbGl0KFwiLlwiKTtcImJhc2VcIj09PWg/bi5hZGQoZik6by5wdXNoKHt0eXBlOmwudHlwZSxyZXBvcnQ6dX0pfXJldHVybiBvLmxlbmd0aD8xPT09by5sZW5ndGg/e2Vycm9yczpvWzBdLnJlcG9ydH06Yy51bm1hdGNoZWQoZSxyKTp7ZXJyb3JzOnIoXCJhbHRlcm5hdGl2ZXMudHlwZXNcIix7dHlwZXM6Wy4uLm5dfSl9fSxjLnVubWF0Y2hlZD1mdW5jdGlvbihlLHQpe2NvbnN0IHI9W107Zm9yKGNvbnN0IHQgb2YgZSlyLnB1c2goLi4udC5yZXBvcnRzKTtyZXR1cm57ZXJyb3JzOnQoXCJhbHRlcm5hdGl2ZXMubWF0Y2hcIixpLmRldGFpbHMocix7b3ZlcnJpZGU6ITF9KSl9fX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2NvbnN0IHM9cigwKSxuPXIoMiksbz1yKDExKSxhPXIoMjApLGk9cigxNSksbD1yKDEpLGM9cig3KSx1PXIoNCksZj1yKDE3KSxoPXIoMTgpLG09cig5KSxkPXIoMzMpLHA9cig1KSxnPXIoMTkpLHk9cigzNCksYj1yKDIxKSx2PXtCYXNlOmNsYXNze2NvbnN0cnVjdG9yKGUpe3RoaXMudHlwZT1lLHRoaXMuJF9yb290PW51bGwsdGhpcy5fZGVmaW5pdGlvbj17fSx0aGlzLl9pZHM9bmV3IGQuSWRzLHRoaXMuX3ByZWZlcmVuY2VzPW51bGwsdGhpcy5fcmVmcz1uZXcgcC5NYW5hZ2VyLHRoaXMuX2NhY2hlPW51bGwsdGhpcy5fdmFsaWRzPW51bGwsdGhpcy5faW52YWxpZHM9bnVsbCx0aGlzLl9mbGFncz17fSx0aGlzLl9ydWxlcz1bXSx0aGlzLl9zaW5nbGVSdWxlcz1uZXcgTWFwLHRoaXMuJF90ZXJtcz17fSx0aGlzLiRfdGVtcD17cnVsZXNldDpudWxsLHdoZW5zOnt9fX1kZXNjcmliZSgpe3JldHVybiBzKFwiZnVuY3Rpb25cIj09dHlwZW9mIGguZGVzY3JpYmUsXCJNYW5pZmVzdCBmdW5jdGlvbmFsaXR5IGRpc2FibGVkXCIpLGguZGVzY3JpYmUodGhpcyl9YWxsb3coKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aCx0PW5ldyBBcnJheShlKSxyPTA7cjxlO3IrKyl0W3JdPWFyZ3VtZW50c1tyXTtyZXR1cm4gbC52ZXJpZnlGbGF0KHQsXCJhbGxvd1wiKSx0aGlzLl92YWx1ZXModCxcIl92YWxpZHNcIil9YWx0ZXIoZSl7cyhlJiZcIm9iamVjdFwiPT10eXBlb2YgZSYmIUFycmF5LmlzQXJyYXkoZSksXCJJbnZhbGlkIHRhcmdldHMgYXJndW1lbnRcIikscyghdGhpcy5faW5SdWxlc2V0KCksXCJDYW5ub3Qgc2V0IGFsdGVyYXRpb25zIGluc2lkZSBhIHJ1bGVzZXRcIik7Y29uc3QgdD10aGlzLmNsb25lKCk7dC4kX3Rlcm1zLmFsdGVyYXRpb25zPXQuJF90ZXJtcy5hbHRlcmF0aW9uc3x8W107Zm9yKGNvbnN0IHIgaW4gZSl7Y29uc3Qgbj1lW3JdO3MoXCJmdW5jdGlvblwiPT10eXBlb2YgbixcIkFsdGVyYXRpb24gYWRqdXN0ZXIgZm9yXCIscixcIm11c3QgYmUgYSBmdW5jdGlvblwiKSx0LiRfdGVybXMuYWx0ZXJhdGlvbnMucHVzaCh7dGFyZ2V0OnIsYWRqdXN0ZXI6bn0pfXJldHVybiB0LiRfdGVtcC5ydWxlc2V0PSExLHR9Y2FzdChlKXtyZXR1cm4gcyghMT09PWV8fFwic3RyaW5nXCI9PXR5cGVvZiBlLFwiSW52YWxpZCB0byB2YWx1ZVwiKSxzKCExPT09ZXx8dGhpcy5fZGVmaW5pdGlvbi5jYXN0W2VdLFwiVHlwZVwiLHRoaXMudHlwZSxcImRvZXMgbm90IHN1cHBvcnQgY2FzdGluZyB0b1wiLGUpLHRoaXMuJF9zZXRGbGFnKFwiY2FzdFwiLCExPT09ZT92b2lkIDA6ZSl9ZGVmYXVsdChlLHQpe3JldHVybiB0aGlzLl9kZWZhdWx0KFwiZGVmYXVsdFwiLGUsdCl9ZGVzY3JpcHRpb24oZSl7cmV0dXJuIHMoZSYmXCJzdHJpbmdcIj09dHlwZW9mIGUsXCJEZXNjcmlwdGlvbiBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZ1wiKSx0aGlzLiRfc2V0RmxhZyhcImRlc2NyaXB0aW9uXCIsZSl9ZW1wdHkoZSl7Y29uc3QgdD10aGlzLmNsb25lKCk7cmV0dXJuIHZvaWQgMCE9PWUmJihlPXQuJF9jb21waWxlKGUse292ZXJyaWRlOiExfSkpLHQuJF9zZXRGbGFnKFwiZW1wdHlcIixlLHtjbG9uZTohMX0pfWVycm9yKGUpe3JldHVybiBzKGUsXCJNaXNzaW5nIGVycm9yXCIpLHMoZSBpbnN0YW5jZW9mIEVycm9yfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLFwiTXVzdCBwcm92aWRlIGEgdmFsaWQgRXJyb3Igb2JqZWN0IG9yIGEgZnVuY3Rpb25cIiksdGhpcy4kX3NldEZsYWcoXCJlcnJvclwiLGUpfWV4YW1wbGUoZSl7bGV0IHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnt9O3JldHVybiBzKHZvaWQgMCE9PWUsXCJNaXNzaW5nIGV4YW1wbGVcIiksbC5hc3NlcnRPcHRpb25zKHQsW1wib3ZlcnJpZGVcIl0pLHRoaXMuX2lubmVyKFwiZXhhbXBsZXNcIixlLHtzaW5nbGU6ITAsb3ZlcnJpZGU6dC5vdmVycmlkZX0pfWV4dGVybmFsKGUsdCl7cmV0dXJuXCJvYmplY3RcIj09dHlwZW9mIGUmJihzKCF0LFwiQ2Fubm90IGNvbWJpbmUgb3B0aW9ucyB3aXRoIGRlc2NyaXB0aW9uXCIpLHQ9ZS5kZXNjcmlwdGlvbixlPWUubWV0aG9kKSxzKFwiZnVuY3Rpb25cIj09dHlwZW9mIGUsXCJNZXRob2QgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpLHModm9pZCAwPT09dHx8dCYmXCJzdHJpbmdcIj09dHlwZW9mIHQsXCJEZXNjcmlwdGlvbiBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZ1wiKSx0aGlzLl9pbm5lcihcImV4dGVybmFsc1wiLHttZXRob2Q6ZSxkZXNjcmlwdGlvbjp0fSx7c2luZ2xlOiEwfSl9ZmFpbG92ZXIoZSx0KXtyZXR1cm4gdGhpcy5fZGVmYXVsdChcImZhaWxvdmVyXCIsZSx0KX1mb3JiaWRkZW4oKXtyZXR1cm4gdGhpcy5wcmVzZW5jZShcImZvcmJpZGRlblwiKX1pZChlKXtyZXR1cm4gZT8ocyhcInN0cmluZ1wiPT10eXBlb2YgZSxcImlkIG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nXCIpLHMoL15bXlxcLl0rJC8udGVzdChlKSxcImlkIGNhbm5vdCBjb250YWluIHBlcmlvZCBjaGFyYWN0ZXJcIiksdGhpcy4kX3NldEZsYWcoXCJpZFwiLGUpKTp0aGlzLiRfc2V0RmxhZyhcImlkXCIsdm9pZCAwKX1pbnZhbGlkKCl7Zm9yKHZhciBlPWFyZ3VtZW50cy5sZW5ndGgsdD1uZXcgQXJyYXkoZSkscj0wO3I8ZTtyKyspdFtyXT1hcmd1bWVudHNbcl07cmV0dXJuIHRoaXMuX3ZhbHVlcyh0LFwiX2ludmFsaWRzXCIpfWxhYmVsKGUpe3JldHVybiBzKGUmJlwic3RyaW5nXCI9PXR5cGVvZiBlLFwiTGFiZWwgbmFtZSBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZ1wiKSx0aGlzLiRfc2V0RmxhZyhcImxhYmVsXCIsZSl9bWV0YShlKXtyZXR1cm4gcyh2b2lkIDAhPT1lLFwiTWV0YSBjYW5ub3QgYmUgdW5kZWZpbmVkXCIpLHRoaXMuX2lubmVyKFwibWV0YXNcIixlLHtzaW5nbGU6ITB9KX1ub3RlKCl7Zm9yKHZhciBlPWFyZ3VtZW50cy5sZW5ndGgsdD1uZXcgQXJyYXkoZSkscj0wO3I8ZTtyKyspdFtyXT1hcmd1bWVudHNbcl07cyh0Lmxlbmd0aCxcIk1pc3Npbmcgbm90ZXNcIik7Zm9yKGNvbnN0IGUgb2YgdClzKGUmJlwic3RyaW5nXCI9PXR5cGVvZiBlLFwiTm90ZXMgbXVzdCBiZSBub24tZW1wdHkgc3RyaW5nc1wiKTtyZXR1cm4gdGhpcy5faW5uZXIoXCJub3Rlc1wiLHQpfW9ubHkoKXtsZXQgZT0hKGFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdKXx8YXJndW1lbnRzWzBdO3JldHVybiBzKFwiYm9vbGVhblwiPT10eXBlb2YgZSxcIkludmFsaWQgbW9kZTpcIixlKSx0aGlzLiRfc2V0RmxhZyhcIm9ubHlcIixlKX1vcHRpb25hbCgpe3JldHVybiB0aGlzLnByZXNlbmNlKFwib3B0aW9uYWxcIil9cHJlZnMoZSl7cyhlLFwiTWlzc2luZyBwcmVmZXJlbmNlc1wiKSxzKHZvaWQgMD09PWUuY29udGV4dCxcIkNhbm5vdCBvdmVycmlkZSBjb250ZXh0XCIpLHModm9pZCAwPT09ZS5leHRlcm5hbHMsXCJDYW5ub3Qgb3ZlcnJpZGUgZXh0ZXJuYWxzXCIpLHModm9pZCAwPT09ZS53YXJuaW5ncyxcIkNhbm5vdCBvdmVycmlkZSB3YXJuaW5nc1wiKSxzKHZvaWQgMD09PWUuZGVidWcsXCJDYW5ub3Qgb3ZlcnJpZGUgZGVidWdcIiksbC5jaGVja1ByZWZlcmVuY2VzKGUpO2NvbnN0IHQ9dGhpcy5jbG9uZSgpO3JldHVybiB0Ll9wcmVmZXJlbmNlcz1sLnByZWZlcmVuY2VzKHQuX3ByZWZlcmVuY2VzLGUpLHR9cHJlc2VuY2UoZSl7cmV0dXJuIHMoW1wib3B0aW9uYWxcIixcInJlcXVpcmVkXCIsXCJmb3JiaWRkZW5cIl0uaW5jbHVkZXMoZSksXCJVbmtub3duIHByZXNlbmNlIG1vZGVcIixlKSx0aGlzLiRfc2V0RmxhZyhcInByZXNlbmNlXCIsZSl9cmF3KCl7bGV0IGU9IShhcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXSl8fGFyZ3VtZW50c1swXTtyZXR1cm4gdGhpcy4kX3NldEZsYWcoXCJyZXN1bHRcIixlP1wicmF3XCI6dm9pZCAwKX1yZXN1bHQoZSl7cmV0dXJuIHMoW1wicmF3XCIsXCJzdHJpcFwiXS5pbmNsdWRlcyhlKSxcIlVua25vd24gcmVzdWx0IG1vZGVcIixlKSx0aGlzLiRfc2V0RmxhZyhcInJlc3VsdFwiLGUpfXJlcXVpcmVkKCl7cmV0dXJuIHRoaXMucHJlc2VuY2UoXCJyZXF1aXJlZFwiKX1zdHJpY3QoZSl7Y29uc3QgdD10aGlzLmNsb25lKCkscj12b2lkIDAhPT1lJiYhZTtyZXR1cm4gdC5fcHJlZmVyZW5jZXM9bC5wcmVmZXJlbmNlcyh0Ll9wcmVmZXJlbmNlcyx7Y29udmVydDpyfSksdH1zdHJpcCgpe2xldCBlPSEoYXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0pfHxhcmd1bWVudHNbMF07cmV0dXJuIHRoaXMuJF9zZXRGbGFnKFwicmVzdWx0XCIsZT9cInN0cmlwXCI6dm9pZCAwKX10YWcoKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aCx0PW5ldyBBcnJheShlKSxyPTA7cjxlO3IrKyl0W3JdPWFyZ3VtZW50c1tyXTtzKHQubGVuZ3RoLFwiTWlzc2luZyB0YWdzXCIpO2Zvcihjb25zdCBlIG9mIHQpcyhlJiZcInN0cmluZ1wiPT10eXBlb2YgZSxcIlRhZ3MgbXVzdCBiZSBub24tZW1wdHkgc3RyaW5nc1wiKTtyZXR1cm4gdGhpcy5faW5uZXIoXCJ0YWdzXCIsdCl9dW5pdChlKXtyZXR1cm4gcyhlJiZcInN0cmluZ1wiPT10eXBlb2YgZSxcIlVuaXQgbmFtZSBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZ1wiKSx0aGlzLiRfc2V0RmxhZyhcInVuaXRcIixlKX12YWxpZCgpe2NvbnN0IGU9dGhpcy5hbGxvdyguLi5hcmd1bWVudHMpO3JldHVybiBlLiRfc2V0RmxhZyhcIm9ubHlcIiwhIWUuX3ZhbGlkcyx7Y2xvbmU6ITF9KSxlfXdoZW4oZSx0KXtjb25zdCByPXRoaXMuY2xvbmUoKTtyLiRfdGVybXMud2hlbnN8fChyLiRfdGVybXMud2hlbnM9W10pO2NvbnN0IG49Yy53aGVuKHIsZSx0KTtpZighW1wiYW55XCIsXCJsaW5rXCJdLmluY2x1ZGVzKHIudHlwZSkpe2NvbnN0IGU9bi5pcz9bbl06bi5zd2l0Y2g7Zm9yKGNvbnN0IHQgb2YgZSlzKCF0LnRoZW58fFwiYW55XCI9PT10LnRoZW4udHlwZXx8dC50aGVuLnR5cGU9PT1yLnR5cGUsXCJDYW5ub3QgY29tYmluZVwiLHIudHlwZSxcIndpdGhcIix0LnRoZW4mJnQudGhlbi50eXBlKSxzKCF0Lm90aGVyd2lzZXx8XCJhbnlcIj09PXQub3RoZXJ3aXNlLnR5cGV8fHQub3RoZXJ3aXNlLnR5cGU9PT1yLnR5cGUsXCJDYW5ub3QgY29tYmluZVwiLHIudHlwZSxcIndpdGhcIix0Lm90aGVyd2lzZSYmdC5vdGhlcndpc2UudHlwZSl9cmV0dXJuIHIuJF90ZXJtcy53aGVucy5wdXNoKG4pLHIuJF9tdXRhdGVSZWJ1aWxkKCl9Y2FjaGUoZSl7cyghdGhpcy5faW5SdWxlc2V0KCksXCJDYW5ub3Qgc2V0IGNhY2hpbmcgaW5zaWRlIGEgcnVsZXNldFwiKSxzKCF0aGlzLl9jYWNoZSxcIkNhbm5vdCBvdmVycmlkZSBzY2hlbWEgY2FjaGVcIik7Y29uc3QgdD10aGlzLmNsb25lKCk7cmV0dXJuIHQuX2NhY2hlPWV8fGkucHJvdmlkZXIucHJvdmlzaW9uKCksdC4kX3RlbXAucnVsZXNldD0hMSx0fWNsb25lKCl7Y29uc3QgZT1PYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKSk7cmV0dXJuIHRoaXMuX2Fzc2lnbihlKX1jb25jYXQoZSl7cyhsLmlzU2NoZW1hKGUpLFwiSW52YWxpZCBzY2hlbWEgb2JqZWN0XCIpLHMoXCJhbnlcIj09PXRoaXMudHlwZXx8XCJhbnlcIj09PWUudHlwZXx8ZS50eXBlPT09dGhpcy50eXBlLFwiQ2Fubm90IG1lcmdlIHR5cGVcIix0aGlzLnR5cGUsXCJ3aXRoIGFub3RoZXIgdHlwZTpcIixlLnR5cGUpLHMoIXRoaXMuX2luUnVsZXNldCgpLFwiQ2Fubm90IGNvbmNhdGVuYXRlIG9udG8gYSBzY2hlbWEgd2l0aCBvcGVuIHJ1bGVzZXRcIikscyghZS5faW5SdWxlc2V0KCksXCJDYW5ub3QgY29uY2F0ZW5hdGUgYSBzY2hlbWEgd2l0aCBvcGVuIHJ1bGVzZXRcIik7bGV0IHQ9dGhpcy5jbG9uZSgpO2lmKFwiYW55XCI9PT10aGlzLnR5cGUmJlwiYW55XCIhPT1lLnR5cGUpe2NvbnN0IHI9ZS5jbG9uZSgpO2Zvcihjb25zdCBlIG9mIE9iamVjdC5rZXlzKHQpKVwidHlwZVwiIT09ZSYmKHJbZV09dFtlXSk7dD1yfXQuX2lkcy5jb25jYXQoZS5faWRzKSx0Ll9yZWZzLnJlZ2lzdGVyKGUscC50b1NpYmxpbmcpLHQuX3ByZWZlcmVuY2VzPXQuX3ByZWZlcmVuY2VzP2wucHJlZmVyZW5jZXModC5fcHJlZmVyZW5jZXMsZS5fcHJlZmVyZW5jZXMpOmUuX3ByZWZlcmVuY2VzLHQuX3ZhbGlkcz1iLm1lcmdlKHQuX3ZhbGlkcyxlLl92YWxpZHMsZS5faW52YWxpZHMpLHQuX2ludmFsaWRzPWIubWVyZ2UodC5faW52YWxpZHMsZS5faW52YWxpZHMsZS5fdmFsaWRzKTtmb3IoY29uc3QgciBvZiBlLl9zaW5nbGVSdWxlcy5rZXlzKCkpdC5fc2luZ2xlUnVsZXMuaGFzKHIpJiYodC5fcnVsZXM9dC5fcnVsZXMuZmlsdGVyKGU9PmUua2VlcHx8ZS5uYW1lIT09ciksdC5fc2luZ2xlUnVsZXMuZGVsZXRlKHIpKTtmb3IoY29uc3QgciBvZiBlLl9ydWxlcyllLl9kZWZpbml0aW9uLnJ1bGVzW3IubWV0aG9kXS5tdWx0aXx8dC5fc2luZ2xlUnVsZXMuc2V0KHIubmFtZSxyKSx0Ll9ydWxlcy5wdXNoKHIpO2lmKHQuX2ZsYWdzLmVtcHR5JiZlLl9mbGFncy5lbXB0eSl7dC5fZmxhZ3MuZW1wdHk9dC5fZmxhZ3MuZW1wdHkuY29uY2F0KGUuX2ZsYWdzLmVtcHR5KTtjb25zdCByPU9iamVjdC5hc3NpZ24oe30sZS5fZmxhZ3MpO2RlbGV0ZSByLmVtcHR5LGEodC5fZmxhZ3Mscil9ZWxzZSBpZihlLl9mbGFncy5lbXB0eSl7dC5fZmxhZ3MuZW1wdHk9ZS5fZmxhZ3MuZW1wdHk7Y29uc3Qgcj1PYmplY3QuYXNzaWduKHt9LGUuX2ZsYWdzKTtkZWxldGUgci5lbXB0eSxhKHQuX2ZsYWdzLHIpfWVsc2UgYSh0Ll9mbGFncyxlLl9mbGFncyk7Zm9yKGNvbnN0IHIgaW4gZS4kX3Rlcm1zKXtjb25zdCBzPWUuJF90ZXJtc1tyXTtzP3QuJF90ZXJtc1tyXT90LiRfdGVybXNbcl09dC4kX3Rlcm1zW3JdLmNvbmNhdChzKTp0LiRfdGVybXNbcl09cy5zbGljZSgpOnQuJF90ZXJtc1tyXXx8KHQuJF90ZXJtc1tyXT1zKX1yZXR1cm4gdGhpcy4kX3Jvb3QuX3RyYWNlciYmdGhpcy4kX3Jvb3QuX3RyYWNlci5fY29tYmluZSh0LFt0aGlzLGVdKSx0LiRfbXV0YXRlUmVidWlsZCgpfWV4dGVuZChlKXtyZXR1cm4gcyghZS5iYXNlLFwiQ2Fubm90IGV4dGVuZCB0eXBlIHdpdGggYW5vdGhlciBiYXNlXCIpLGYudHlwZSh0aGlzLGUpfWV4dHJhY3QoZSl7cmV0dXJuIGU9QXJyYXkuaXNBcnJheShlKT9lOmUuc3BsaXQoXCIuXCIpLHRoaXMuX2lkcy5yZWFjaChlKX1mb3JrKGUsdCl7cyghdGhpcy5faW5SdWxlc2V0KCksXCJDYW5ub3QgZm9yayBpbnNpZGUgYSBydWxlc2V0XCIpO2xldCByPXRoaXM7Zm9yKGxldCBzIG9mW10uY29uY2F0KGUpKXM9QXJyYXkuaXNBcnJheShzKT9zOnMuc3BsaXQoXCIuXCIpLHI9ci5faWRzLmZvcmsocyx0LHIpO3JldHVybiByLiRfdGVtcC5ydWxlc2V0PSExLHJ9cnVsZShlKXtjb25zdCB0PXRoaXMuX2RlZmluaXRpb247bC5hc3NlcnRPcHRpb25zKGUsT2JqZWN0LmtleXModC5tb2RpZmllcnMpKSxzKCExIT09dGhpcy4kX3RlbXAucnVsZXNldCxcIkNhbm5vdCBhcHBseSBydWxlcyB0byBlbXB0eSBydWxlc2V0IG9yIHRoZSBsYXN0IHJ1bGUgYWRkZWQgZG9lcyBub3Qgc3VwcG9ydCBydWxlIHByb3BlcnRpZXNcIik7Y29uc3Qgcj1udWxsPT09dGhpcy4kX3RlbXAucnVsZXNldD90aGlzLl9ydWxlcy5sZW5ndGgtMTp0aGlzLiRfdGVtcC5ydWxlc2V0O3Mocj49MCYmcjx0aGlzLl9ydWxlcy5sZW5ndGgsXCJDYW5ub3QgYXBwbHkgcnVsZXMgdG8gZW1wdHkgcnVsZXNldFwiKTtjb25zdCBvPXRoaXMuY2xvbmUoKTtmb3IobGV0IGE9cjthPG8uX3J1bGVzLmxlbmd0aDsrK2Epe2NvbnN0IHI9by5fcnVsZXNbYV0saT1uKHIpO2Zvcihjb25zdCBuIGluIGUpdC5tb2RpZmllcnNbbl0oaSxlW25dKSxzKGkubmFtZT09PXIubmFtZSxcIkNhbm5vdCBjaGFuZ2UgcnVsZSBuYW1lXCIpO28uX3J1bGVzW2FdPWksby5fc2luZ2xlUnVsZXMuZ2V0KGkubmFtZSk9PT1yJiZvLl9zaW5nbGVSdWxlcy5zZXQoaS5uYW1lLGkpfXJldHVybiBvLiRfdGVtcC5ydWxlc2V0PSExLG8uJF9tdXRhdGVSZWJ1aWxkKCl9Z2V0IHJ1bGVzZXQoKXtzKCF0aGlzLl9pblJ1bGVzZXQoKSxcIkNhbm5vdCBzdGFydCBhIG5ldyBydWxlc2V0IHdpdGhvdXQgY2xvc2luZyB0aGUgcHJldmlvdXMgb25lXCIpO2NvbnN0IGU9dGhpcy5jbG9uZSgpO3JldHVybiBlLiRfdGVtcC5ydWxlc2V0PWUuX3J1bGVzLmxlbmd0aCxlfWdldCAkKCl7cmV0dXJuIHRoaXMucnVsZXNldH10YWlsb3IoZSl7ZT1bXS5jb25jYXQoZSkscyghdGhpcy5faW5SdWxlc2V0KCksXCJDYW5ub3QgdGFpbG9yIGluc2lkZSBhIHJ1bGVzZXRcIik7bGV0IHQ9dGhpcztpZih0aGlzLiRfdGVybXMuYWx0ZXJhdGlvbnMpZm9yKGNvbnN0IHIgb2YgdGhpcy4kX3Rlcm1zLmFsdGVyYXRpb25zKXtjb25zdHt0YXJnZXQ6bixhZGp1c3RlcjpvfT1yO2UuaW5jbHVkZXMobikmJih0PW8odCkscyhsLmlzU2NoZW1hKHQpLFwiQWx0ZXJhdGlvbiBhZGp1c3RlciBmb3JcIixuLFwiZmFpbGVkIHRvIHJldHVybiBhIHNjaGVtYSBvYmplY3RcIikpfXJldHVybih0PXQuJF9tb2RpZnkoe2VhY2g6dD0+dC50YWlsb3IoZSkscmVmOiExfSkpLiRfdGVtcC5ydWxlc2V0PSExLHQuJF9tdXRhdGVSZWJ1aWxkKCl9dHJhY2VyKCl7cmV0dXJuIGcubG9jYXRpb24/Zy5sb2NhdGlvbih0aGlzKTp0aGlzfXZhbGlkYXRlKGUsdCl7cmV0dXJuIHkuZW50cnkoZSx0aGlzLHQpfXZhbGlkYXRlQXN5bmMoZSx0KXtyZXR1cm4geS5lbnRyeUFzeW5jKGUsdGhpcyx0KX0kX2FkZFJ1bGUoZSl7XCJzdHJpbmdcIj09dHlwZW9mIGUmJihlPXtuYW1lOmV9KSxzKGUmJlwib2JqZWN0XCI9PXR5cGVvZiBlLFwiSW52YWxpZCBvcHRpb25zXCIpLHMoZS5uYW1lJiZcInN0cmluZ1wiPT10eXBlb2YgZS5uYW1lLFwiSW52YWxpZCBydWxlIG5hbWVcIik7Zm9yKGNvbnN0IHQgaW4gZSlzKFwiX1wiIT09dFswXSxcIkNhbm5vdCBzZXQgcHJpdmF0ZSBydWxlIHByb3BlcnRpZXNcIik7Y29uc3QgdD1PYmplY3QuYXNzaWduKHt9LGUpO3QuX3Jlc29sdmU9W10sdC5tZXRob2Q9dC5tZXRob2R8fHQubmFtZTtjb25zdCByPXRoaXMuX2RlZmluaXRpb24ucnVsZXNbdC5tZXRob2RdLG49dC5hcmdzO3MocixcIlVua25vd24gcnVsZVwiLHQubWV0aG9kKTtjb25zdCBvPXRoaXMuY2xvbmUoKTtpZihuKXtzKDE9PT1PYmplY3Qua2V5cyhuKS5sZW5ndGh8fE9iamVjdC5rZXlzKG4pLmxlbmd0aD09PXRoaXMuX2RlZmluaXRpb24ucnVsZXNbdC5uYW1lXS5hcmdzLmxlbmd0aCxcIkludmFsaWQgcnVsZSBkZWZpbml0aW9uIGZvclwiLHRoaXMudHlwZSx0Lm5hbWUpO2Zvcihjb25zdCBlIGluIG4pe2xldCBhPW5bZV07aWYodm9pZCAwIT09YSl7aWYoci5hcmdzQnlOYW1lKXtjb25zdCBpPXIuYXJnc0J5TmFtZS5nZXQoZSk7aWYoaS5yZWYmJmwuaXNSZXNvbHZhYmxlKGEpKXQuX3Jlc29sdmUucHVzaChlKSxvLiRfbXV0YXRlUmVnaXN0ZXIoYSk7ZWxzZSBpZihpLm5vcm1hbGl6ZSYmKGE9aS5ub3JtYWxpemUoYSksbltlXT1hKSxpLmFzc2VydCl7Y29uc3QgdD1sLnZhbGlkYXRlQXJnKGEsZSxpKTtzKCF0LHQsXCJvciByZWZlcmVuY2VcIil9fW5bZV09YX1lbHNlIGRlbGV0ZSBuW2VdfX1yZXR1cm4gci5tdWx0aXx8KG8uX3J1bGVSZW1vdmUodC5uYW1lLHtjbG9uZTohMX0pLG8uX3NpbmdsZVJ1bGVzLnNldCh0Lm5hbWUsdCkpLCExPT09by4kX3RlbXAucnVsZXNldCYmKG8uJF90ZW1wLnJ1bGVzZXQ9bnVsbCksci5wcmlvcml0eT9vLl9ydWxlcy51bnNoaWZ0KHQpOm8uX3J1bGVzLnB1c2godCksb30kX2NvbXBpbGUoZSx0KXtyZXR1cm4gYy5zY2hlbWEodGhpcy4kX3Jvb3QsZSx0KX0kX2NyZWF0ZUVycm9yKGUsdCxyLHMsbil7bGV0IG89YXJndW1lbnRzLmxlbmd0aD41JiZ2b2lkIDAhPT1hcmd1bWVudHNbNV0/YXJndW1lbnRzWzVdOnt9O2NvbnN0IGE9ITEhPT1vLmZsYWdzP3RoaXMuX2ZsYWdzOnt9LGk9by5tZXNzYWdlcz9tLm1lcmdlKHRoaXMuX2RlZmluaXRpb24ubWVzc2FnZXMsby5tZXNzYWdlcyk6dGhpcy5fZGVmaW5pdGlvbi5tZXNzYWdlcztyZXR1cm4gbmV3IHUuUmVwb3J0KGUsdCxyLGEsaSxzLG4pfSRfZ2V0RmxhZyhlKXtyZXR1cm4gdGhpcy5fZmxhZ3NbZV19JF9nZXRSdWxlKGUpe3JldHVybiB0aGlzLl9zaW5nbGVSdWxlcy5nZXQoZSl9JF9tYXBMYWJlbHMoZSl7cmV0dXJuIGU9QXJyYXkuaXNBcnJheShlKT9lOmUuc3BsaXQoXCIuXCIpLHRoaXMuX2lkcy5sYWJlbHMoZSl9JF9tYXRjaChlLHQscixzKXsocj1PYmplY3QuYXNzaWduKHt9LHIpKS5hYm9ydEVhcmx5PSEwLHIuX2V4dGVybmFscz0hMSx0LnNuYXBzaG90KCk7Y29uc3Qgbj0heS52YWxpZGF0ZShlLHRoaXMsdCxyLHMpLmVycm9ycztyZXR1cm4gdC5yZXN0b3JlKCksbn0kX21vZGlmeShlKXtyZXR1cm4gbC5hc3NlcnRPcHRpb25zKGUsW1wiZWFjaFwiLFwib25jZVwiLFwicmVmXCIsXCJzY2hlbWFcIl0pLGQuc2NoZW1hKHRoaXMsZSl8fHRoaXN9JF9tdXRhdGVSZWJ1aWxkKCl7cyghdGhpcy5faW5SdWxlc2V0KCksXCJDYW5ub3QgYWRkIHRoaXMgcnVsZSBpbnNpZGUgYSBydWxlc2V0XCIpLHRoaXMuX3JlZnMucmVzZXQoKSx0aGlzLl9pZHMucmVzZXQoKTtyZXR1cm4gdGhpcy4kX21vZGlmeSh7ZWFjaDooZSx0KT0+e2xldHtzb3VyY2U6cixuYW1lOnMscGF0aDpuLGtleTpvfT10O2NvbnN0IGE9dGhpcy5fZGVmaW5pdGlvbltyXVtzXSYmdGhpcy5fZGVmaW5pdGlvbltyXVtzXS5yZWdpc3RlcjshMSE9PWEmJnRoaXMuJF9tdXRhdGVSZWdpc3RlcihlLHtmYW1pbHk6YSxrZXk6b30pfX0pLHRoaXMuX2RlZmluaXRpb24ucmVidWlsZCYmdGhpcy5fZGVmaW5pdGlvbi5yZWJ1aWxkKHRoaXMpLHRoaXMuJF90ZW1wLnJ1bGVzZXQ9ITEsdGhpc30kX211dGF0ZVJlZ2lzdGVyKGUpe2xldHtmYW1pbHk6dCxrZXk6cn09YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnt9O3RoaXMuX3JlZnMucmVnaXN0ZXIoZSx0KSx0aGlzLl9pZHMucmVnaXN0ZXIoZSx7a2V5OnJ9KX0kX3Byb3BlcnR5KGUpe3JldHVybiB0aGlzLl9kZWZpbml0aW9uLnByb3BlcnRpZXNbZV19JF9yZWFjaChlKXtyZXR1cm4gdGhpcy5faWRzLnJlYWNoKGUpfSRfcm9vdFJlZmVyZW5jZXMoKXtyZXR1cm4gdGhpcy5fcmVmcy5yb290cygpfSRfc2V0RmxhZyhlLHQpe2xldCByPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTp7fTtzKFwiX1wiPT09ZVswXXx8IXRoaXMuX2luUnVsZXNldCgpLFwiQ2Fubm90IHNldCBmbGFnIGluc2lkZSBhIHJ1bGVzZXRcIik7Y29uc3Qgbj10aGlzLl9kZWZpbml0aW9uLmZsYWdzW2VdfHx7fTtpZihvKHQsbi5kZWZhdWx0KSYmKHQ9dm9pZCAwKSxvKHQsdGhpcy5fZmxhZ3NbZV0pKXJldHVybiB0aGlzO2NvbnN0IGE9ITEhPT1yLmNsb25lP3RoaXMuY2xvbmUoKTp0aGlzO3JldHVybiB2b2lkIDAhPT10PyhhLl9mbGFnc1tlXT10LGEuJF9tdXRhdGVSZWdpc3Rlcih0KSk6ZGVsZXRlIGEuX2ZsYWdzW2VdLFwiX1wiIT09ZVswXSYmKGEuJF90ZW1wLnJ1bGVzZXQ9ITEpLGF9JF92YWxpZGF0ZShlLHQscil7cmV0dXJuIHkudmFsaWRhdGUoZSx0aGlzLHQscil9X2Fzc2lnbihlKXtlLnR5cGU9dGhpcy50eXBlLGUuJF9yb290PXRoaXMuJF9yb290LGUuJF90ZW1wPU9iamVjdC5hc3NpZ24oe30sdGhpcy4kX3RlbXApLGUuJF90ZW1wLndoZW5zPXt9LGUuX2lkcz10aGlzLl9pZHMuY2xvbmUoKSxlLl9wcmVmZXJlbmNlcz10aGlzLl9wcmVmZXJlbmNlcyxlLl92YWxpZHM9dGhpcy5fdmFsaWRzJiZ0aGlzLl92YWxpZHMuY2xvbmUoKSxlLl9pbnZhbGlkcz10aGlzLl9pbnZhbGlkcyYmdGhpcy5faW52YWxpZHMuY2xvbmUoKSxlLl9ydWxlcz10aGlzLl9ydWxlcy5zbGljZSgpLGUuX3NpbmdsZVJ1bGVzPW4odGhpcy5fc2luZ2xlUnVsZXMse3NoYWxsb3c6ITB9KSxlLl9yZWZzPXRoaXMuX3JlZnMuY2xvbmUoKSxlLl9mbGFncz1PYmplY3QuYXNzaWduKHt9LHRoaXMuX2ZsYWdzKSxlLl9jYWNoZT1udWxsLGUuJF90ZXJtcz17fTtmb3IoY29uc3QgdCBpbiB0aGlzLiRfdGVybXMpZS4kX3Rlcm1zW3RdPXRoaXMuJF90ZXJtc1t0XT90aGlzLiRfdGVybXNbdF0uc2xpY2UoKTpudWxsO2UuJF9zdXBlcj17fTtmb3IoY29uc3QgdCBpbiB0aGlzLiRfc3VwZXIpZS4kX3N1cGVyW3RdPXRoaXMuX3N1cGVyW3RdLmJpbmQoZSk7cmV0dXJuIGV9X2RlZmF1bHQoZSx0KXtsZXQgcj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06e307cmV0dXJuIGwuYXNzZXJ0T3B0aW9ucyhyLFwibGl0ZXJhbFwiKSxzKHZvaWQgMCE9PXQsXCJNaXNzaW5nXCIsZSxcInZhbHVlXCIpLHMoXCJmdW5jdGlvblwiPT10eXBlb2YgdHx8IXIubGl0ZXJhbCxcIk9ubHkgZnVuY3Rpb24gdmFsdWUgc3VwcG9ydHMgbGl0ZXJhbCBvcHRpb25cIiksXCJmdW5jdGlvblwiPT10eXBlb2YgdCYmci5saXRlcmFsJiYodD17W2wuc3ltYm9scy5saXRlcmFsXTohMCxsaXRlcmFsOnR9KSx0aGlzLiRfc2V0RmxhZyhlLHQpfV9nZW5lcmF0ZShlLHQscil7aWYoIXRoaXMuJF90ZXJtcy53aGVucylyZXR1cm57c2NoZW1hOnRoaXN9O2NvbnN0IHM9W10sbj1bXTtmb3IobGV0IG89MDtvPHRoaXMuJF90ZXJtcy53aGVucy5sZW5ndGg7KytvKXtjb25zdCBhPXRoaXMuJF90ZXJtcy53aGVuc1tvXTtpZihhLmNvbmNhdCl7cy5wdXNoKGEuY29uY2F0KSxuLnB1c2goXCJcIi5jb25jYXQobyxcIi5jb25jYXRcIikpO2NvbnRpbnVlfWNvbnN0IGk9YS5yZWY/YS5yZWYucmVzb2x2ZShlLHQscik6ZSxsPWEuaXM/W2FdOmEuc3dpdGNoLGM9bi5sZW5ndGg7Zm9yKGxldCBjPTA7YzxsLmxlbmd0aDsrK2Mpe2NvbnN0e2lzOnUsdGhlbjpmLG90aGVyd2lzZTpofT1sW2NdLG09XCJcIi5jb25jYXQobykuY29uY2F0KGEuc3dpdGNoP1wiLlwiK2M6XCJcIik7aWYodS4kX21hdGNoKGksdC5uZXN0KHUsXCJcIi5jb25jYXQobSxcIi5pc1wiKSkscikpe2lmKGYpe2NvbnN0IG89dC5sb2NhbGl6ZShbLi4udC5wYXRoLFwiXCIuY29uY2F0KG0sXCIudGhlblwiKV0sdC5hbmNlc3RvcnMsdC5zY2hlbWFzKSx7c2NoZW1hOmEsaWQ6aX09Zi5fZ2VuZXJhdGUoZSxvLHIpO3MucHVzaChhKSxuLnB1c2goXCJcIi5jb25jYXQobSxcIi50aGVuXCIpLmNvbmNhdChpP1wiKFwiLmNvbmNhdChpLFwiKVwiKTpcIlwiKSk7YnJlYWt9fWVsc2UgaWYoaCl7Y29uc3Qgbz10LmxvY2FsaXplKFsuLi50LnBhdGgsXCJcIi5jb25jYXQobSxcIi5vdGhlcndpc2VcIildLHQuYW5jZXN0b3JzLHQuc2NoZW1hcykse3NjaGVtYTphLGlkOml9PWguX2dlbmVyYXRlKGUsbyxyKTtzLnB1c2goYSksbi5wdXNoKFwiXCIuY29uY2F0KG0sXCIub3RoZXJ3aXNlXCIpLmNvbmNhdChpP1wiKFwiLmNvbmNhdChpLFwiKVwiKTpcIlwiKSk7YnJlYWt9fWlmKGEuYnJlYWsmJm4ubGVuZ3RoPmMpYnJlYWt9Y29uc3Qgbz1uLmpvaW4oXCIsIFwiKTtpZih0Lm1haW5zdGF5LnRyYWNlci5kZWJ1Zyh0LFwicnVsZVwiLFwid2hlblwiLG8pLCFvKXJldHVybntzY2hlbWE6dGhpc307aWYoIXQubWFpbnN0YXkudHJhY2VyLmFjdGl2ZSYmdGhpcy4kX3RlbXAud2hlbnNbb10pcmV0dXJue3NjaGVtYTp0aGlzLiRfdGVtcC53aGVuc1tvXSxpZDpvfTtsZXQgYT10aGlzO3RoaXMuX2RlZmluaXRpb24uZ2VuZXJhdGUmJihhPXRoaXMuX2RlZmluaXRpb24uZ2VuZXJhdGUodGhpcyxlLHQscikpO2Zvcihjb25zdCBlIG9mIHMpYT1hLmNvbmNhdChlKTtyZXR1cm4gdGhpcy4kX3Jvb3QuX3RyYWNlciYmdGhpcy4kX3Jvb3QuX3RyYWNlci5fY29tYmluZShhLFt0aGlzLC4uLnNdKSx0aGlzLiRfdGVtcC53aGVuc1tvXT1hLHtzY2hlbWE6YSxpZDpvfX1faW5uZXIoZSx0KXtsZXQgcj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06e307cyghdGhpcy5faW5SdWxlc2V0KCksXCJDYW5ub3Qgc2V0IFwiLmNvbmNhdChlLFwiIGluc2lkZSBhIHJ1bGVzZXRcIikpO2NvbnN0IG49dGhpcy5jbG9uZSgpO3JldHVybiBuLiRfdGVybXNbZV0mJiFyLm92ZXJyaWRlfHwobi4kX3Rlcm1zW2VdPVtdKSxyLnNpbmdsZT9uLiRfdGVybXNbZV0ucHVzaCh0KTpuLiRfdGVybXNbZV0ucHVzaCguLi50KSxuLiRfdGVtcC5ydWxlc2V0PSExLG59X2luUnVsZXNldCgpe3JldHVybiBudWxsIT09dGhpcy4kX3RlbXAucnVsZXNldCYmITEhPT10aGlzLiRfdGVtcC5ydWxlc2V0fV9ydWxlUmVtb3ZlKGUpe2xldCB0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp7fTtpZighdGhpcy5fc2luZ2xlUnVsZXMuaGFzKGUpKXJldHVybiB0aGlzO2NvbnN0IHI9ITEhPT10LmNsb25lP3RoaXMuY2xvbmUoKTp0aGlzO3IuX3NpbmdsZVJ1bGVzLmRlbGV0ZShlKTtjb25zdCBzPVtdO2ZvcihsZXQgdD0wO3Q8ci5fcnVsZXMubGVuZ3RoOysrdCl7Y29uc3Qgbj1yLl9ydWxlc1t0XTtuLm5hbWUhPT1lfHxuLmtlZXA/cy5wdXNoKG4pOnIuX2luUnVsZXNldCgpJiZ0PHIuJF90ZW1wLnJ1bGVzZXQmJi0tci4kX3RlbXAucnVsZXNldH1yZXR1cm4gci5fcnVsZXM9cyxyfV92YWx1ZXMoZSx0KXtsLnZlcmlmeUZsYXQoZSx0LnNsaWNlKDEsLTEpKTtjb25zdCByPXRoaXMuY2xvbmUoKSxuPWVbMF09PT1sLnN5bWJvbHMub3ZlcnJpZGU7aWYobiYmKGU9ZS5zbGljZSgxKSksIXJbdF0mJmUubGVuZ3RoP3JbdF09bmV3IGI6biYmKHJbdF09ZS5sZW5ndGg/bmV3IGI6bnVsbCxyLiRfbXV0YXRlUmVidWlsZCgpKSwhclt0XSlyZXR1cm4gcjtuJiZyW3RdLm92ZXJyaWRlKCk7Zm9yKGNvbnN0IG4gb2YgZSl7cyh2b2lkIDAhPT1uLFwiQ2Fubm90IGNhbGwgYWxsb3cvdmFsaWQvaW52YWxpZCB3aXRoIHVuZGVmaW5lZFwiKSxzKG4hPT1sLnN5bWJvbHMub3ZlcnJpZGUsXCJPdmVycmlkZSBtdXN0IGJlIHRoZSBmaXJzdCB2YWx1ZVwiKTtjb25zdCBlPVwiX2ludmFsaWRzXCI9PT10P1wiX3ZhbGlkc1wiOlwiX2ludmFsaWRzXCI7cltlXSYmKHJbZV0ucmVtb3ZlKG4pLHJbZV0ubGVuZ3RofHwocyhcIl92YWxpZHNcIj09PXR8fCFyLl9mbGFncy5vbmx5LFwiU2V0dGluZyBpbnZhbGlkIHZhbHVlXCIsbixcImxlYXZlcyBzY2hlbWEgcmVqZWN0aW5nIGFsbCB2YWx1ZXMgZHVlIHRvIHByZXZpb3VzIHZhbGlkIHJ1bGVcIikscltlXT1udWxsKSksclt0XS5hZGQobixyLl9yZWZzKX1yZXR1cm4gcn19fTt2LkJhc2UucHJvdG90eXBlLmlzSW1tdXRhYmxlPSEwLHYuQmFzZS5wcm90b3R5cGVbbC5zeW1ib2xzLmFueV09e3ZlcnNpb246bC52ZXJzaW9uLGNvbXBpbGU6Yy5jb21waWxlLHJvb3Q6XCIkX3Jvb3RcIn0sdi5CYXNlLnByb3RvdHlwZS5kZW55PXYuQmFzZS5wcm90b3R5cGUuaW52YWxpZCx2LkJhc2UucHJvdG90eXBlLmRpc2FsbG93PXYuQmFzZS5wcm90b3R5cGUuaW52YWxpZCx2LkJhc2UucHJvdG90eXBlLmVxdWFsPXYuQmFzZS5wcm90b3R5cGUudmFsaWQsdi5CYXNlLnByb3RvdHlwZS5leGlzdD12LkJhc2UucHJvdG90eXBlLnJlcXVpcmVkLHYuQmFzZS5wcm90b3R5cGUubm90PXYuQmFzZS5wcm90b3R5cGUuaW52YWxpZCx2LkJhc2UucHJvdG90eXBlLm9wdGlvbnM9di5CYXNlLnByb3RvdHlwZS5wcmVmcyx2LkJhc2UucHJvdG90eXBlLnByZWZlcmVuY2VzPXYuQmFzZS5wcm90b3R5cGUucHJlZnMsZS5leHBvcnRzPW5ldyB2LkJhc2V9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBzKGUsdCl7dmFyIHI9T2JqZWN0LmtleXMoZSk7aWYoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyl7dmFyIHM9T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhlKTt0JiYocz1zLmZpbHRlcigoZnVuY3Rpb24odCl7cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSx0KS5lbnVtZXJhYmxlfSkpKSxyLnB1c2guYXBwbHkocixzKX1yZXR1cm4gcn1mdW5jdGlvbiBuKGUsdCxyKXtyZXR1cm4gdCBpbiBlP09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse3ZhbHVlOnIsZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITB9KTplW3RdPXIsZX1jb25zdCBvPXIoMCksYT1yKDEpLGk9cig1KSxsPXt9O3QuSWRzPWwuSWRzPWNsYXNze2NvbnN0cnVjdG9yKCl7dGhpcy5fYnlJZD1uZXcgTWFwLHRoaXMuX2J5S2V5PW5ldyBNYXAsdGhpcy5fc2NoZW1hQ2hhaW49ITF9Y2xvbmUoKXtjb25zdCBlPW5ldyBsLklkcztyZXR1cm4gZS5fYnlJZD1uZXcgTWFwKHRoaXMuX2J5SWQpLGUuX2J5S2V5PW5ldyBNYXAodGhpcy5fYnlLZXkpLGUuX3NjaGVtYUNoYWluPXRoaXMuX3NjaGVtYUNoYWluLGV9Y29uY2F0KGUpe2UuX3NjaGVtYUNoYWluJiYodGhpcy5fc2NoZW1hQ2hhaW49ITApO2Zvcihjb25zdFt0LHJdb2YgZS5fYnlJZC5lbnRyaWVzKCkpbyghdGhpcy5fYnlLZXkuaGFzKHQpLFwiU2NoZW1hIGlkIGNvbmZsaWN0cyB3aXRoIGV4aXN0aW5nIGtleTpcIix0KSx0aGlzLl9ieUlkLnNldCh0LHIpO2Zvcihjb25zdFt0LHJdb2YgZS5fYnlLZXkuZW50cmllcygpKW8oIXRoaXMuX2J5SWQuaGFzKHQpLFwiU2NoZW1hIGtleSBjb25mbGljdHMgd2l0aCBleGlzdGluZyBpZDpcIix0KSx0aGlzLl9ieUtleS5zZXQodCxyKX1mb3JrKGUsdCxyKXtjb25zdCBzPXRoaXMuX2NvbGxlY3QoZSk7cy5wdXNoKHtzY2hlbWE6cn0pO2NvbnN0IG49cy5zaGlmdCgpO2xldCBpPXtpZDpuLmlkLHNjaGVtYTp0KG4uc2NoZW1hKX07byhhLmlzU2NoZW1hKGkuc2NoZW1hKSxcImFkanVzdGVyIGZ1bmN0aW9uIGZhaWxlZCB0byByZXR1cm4gYSBqb2kgc2NoZW1hIHR5cGVcIik7Zm9yKGNvbnN0IGUgb2YgcylpPXtpZDplLmlkLHNjaGVtYTpsLmZvcmsoZS5zY2hlbWEsaS5pZCxpLnNjaGVtYSl9O3JldHVybiBpLnNjaGVtYX1sYWJlbHMoZSl7bGV0IHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOltdO2NvbnN0IHI9ZVswXSxzPXRoaXMuX2dldChyKTtpZighcylyZXR1cm5bLi4udCwuLi5lXS5qb2luKFwiLlwiKTtjb25zdCBuPWUuc2xpY2UoMSk7cmV0dXJuIHQ9Wy4uLnQscy5zY2hlbWEuX2ZsYWdzLmxhYmVsfHxyXSxuLmxlbmd0aD9zLnNjaGVtYS5faWRzLmxhYmVscyhuLHQpOnQuam9pbihcIi5cIil9cmVhY2goZSl7bGV0IHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOltdO2NvbnN0IHI9ZVswXSxzPXRoaXMuX2dldChyKTtvKHMsXCJTY2hlbWEgZG9lcyBub3QgY29udGFpbiBwYXRoXCIsWy4uLnQsLi4uZV0uam9pbihcIi5cIikpO2NvbnN0IG49ZS5zbGljZSgxKTtyZXR1cm4gbi5sZW5ndGg/cy5zY2hlbWEuX2lkcy5yZWFjaChuLFsuLi50LHJdKTpzLnNjaGVtYX1yZWdpc3RlcihlKXtsZXR7a2V5OnR9PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp7fTtpZighZXx8IWEuaXNTY2hlbWEoZSkpcmV0dXJuOyhlLiRfcHJvcGVydHkoXCJzY2hlbWFDaGFpblwiKXx8ZS5faWRzLl9zY2hlbWFDaGFpbikmJih0aGlzLl9zY2hlbWFDaGFpbj0hMCk7Y29uc3Qgcj1lLl9mbGFncy5pZDtpZihyKXtjb25zdCB0PXRoaXMuX2J5SWQuZ2V0KHIpO28oIXR8fHQuc2NoZW1hPT09ZSxcIkNhbm5vdCBhZGQgZGlmZmVyZW50IHNjaGVtYXMgd2l0aCB0aGUgc2FtZSBpZDpcIixyKSxvKCF0aGlzLl9ieUtleS5oYXMociksXCJTY2hlbWEgaWQgY29uZmxpY3RzIHdpdGggZXhpc3Rpbmcga2V5OlwiLHIpLHRoaXMuX2J5SWQuc2V0KHIse3NjaGVtYTplLGlkOnJ9KX10JiYobyghdGhpcy5fYnlLZXkuaGFzKHQpLFwiU2NoZW1hIGFscmVhZHkgY29udGFpbnMga2V5OlwiLHQpLG8oIXRoaXMuX2J5SWQuaGFzKHQpLFwiU2NoZW1hIGtleSBjb25mbGljdHMgd2l0aCBleGlzdGluZyBpZDpcIix0KSx0aGlzLl9ieUtleS5zZXQodCx7c2NoZW1hOmUsaWQ6dH0pKX1yZXNldCgpe3RoaXMuX2J5SWQ9bmV3IE1hcCx0aGlzLl9ieUtleT1uZXcgTWFwLHRoaXMuX3NjaGVtYUNoYWluPSExfV9jb2xsZWN0KGUpe2xldCB0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpbXSxyPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpbXTtjb25zdCBzPWVbMF0sbj10aGlzLl9nZXQocyk7byhuLFwiU2NoZW1hIGRvZXMgbm90IGNvbnRhaW4gcGF0aFwiLFsuLi50LC4uLmVdLmpvaW4oXCIuXCIpKSxyPVtuLC4uLnJdO2NvbnN0IGE9ZS5zbGljZSgxKTtyZXR1cm4gYS5sZW5ndGg/bi5zY2hlbWEuX2lkcy5fY29sbGVjdChhLFsuLi50LHNdLHIpOnJ9X2dldChlKXtyZXR1cm4gdGhpcy5fYnlJZC5nZXQoZSl8fHRoaXMuX2J5S2V5LmdldChlKX19LGwuZm9yaz1mdW5jdGlvbihlLHIscyl7cmV0dXJuIHQuc2NoZW1hKGUse2VhY2g6KGUsdCk9PntsZXR7a2V5Om59PXQ7aWYocj09PShlLl9mbGFncy5pZHx8bikpcmV0dXJuIHN9LHJlZjohMX0pLiRfbXV0YXRlUmVidWlsZCgpfSx0LnNjaGVtYT1mdW5jdGlvbihlLHQpe2xldCByO2Zvcihjb25zdCBzIGluIGUuX2ZsYWdzKXtpZihcIl9cIj09PXNbMF0pY29udGludWU7Y29uc3Qgbj1sLnNjYW4oZS5fZmxhZ3Nbc10se3NvdXJjZTpcImZsYWdzXCIsbmFtZTpzfSx0KTt2b2lkIDAhPT1uJiYoKHI9cnx8ZS5jbG9uZSgpKS5fZmxhZ3Nbc109bil9Zm9yKGxldCBzPTA7czxlLl9ydWxlcy5sZW5ndGg7KytzKXtjb25zdCBuPWUuX3J1bGVzW3NdLG89bC5zY2FuKG4uYXJncyx7c291cmNlOlwicnVsZXNcIixuYW1lOm4ubmFtZX0sdCk7aWYodm9pZCAwIT09byl7cj1yfHxlLmNsb25lKCk7Y29uc3QgdD1PYmplY3QuYXNzaWduKHt9LG4pO3QuYXJncz1vLHIuX3J1bGVzW3NdPXQsci5fc2luZ2xlUnVsZXMuZ2V0KG4ubmFtZSk9PT1uJiZyLl9zaW5nbGVSdWxlcy5zZXQobi5uYW1lLHQpfX1mb3IoY29uc3QgcyBpbiBlLiRfdGVybXMpe2lmKFwiX1wiPT09c1swXSljb250aW51ZTtjb25zdCBuPWwuc2NhbihlLiRfdGVybXNbc10se3NvdXJjZTpcInRlcm1zXCIsbmFtZTpzfSx0KTt2b2lkIDAhPT1uJiYoKHI9cnx8ZS5jbG9uZSgpKS4kX3Rlcm1zW3NdPW4pfXJldHVybiByfSxsLnNjYW49ZnVuY3Rpb24oZSx0LHIsbyxjKXtjb25zdCB1PW98fFtdO2lmKG51bGw9PT1lfHxcIm9iamVjdFwiIT10eXBlb2YgZSlyZXR1cm47bGV0IGY7aWYoQXJyYXkuaXNBcnJheShlKSl7Zm9yKGxldCBzPTA7czxlLmxlbmd0aDsrK3Mpe2NvbnN0IG49XCJ0ZXJtc1wiPT09dC5zb3VyY2UmJlwia2V5c1wiPT09dC5uYW1lJiZlW3NdLmtleSxvPWwuc2NhbihlW3NdLHQscixbcywuLi51XSxuKTt2b2lkIDAhPT1vJiYoKGY9Znx8ZS5zbGljZSgpKVtzXT1vKX1yZXR1cm4gZn1pZighMSE9PXIuc2NoZW1hJiZhLmlzU2NoZW1hKGUpfHwhMSE9PXIucmVmJiZpLmlzUmVmKGUpKXtjb25zdCBvPXIuZWFjaChlLGZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0xO3Q8YXJndW1lbnRzLmxlbmd0aDt0Kyspe3ZhciByPW51bGwhPWFyZ3VtZW50c1t0XT9hcmd1bWVudHNbdF06e307dCUyP3MociwhMCkuZm9yRWFjaCgoZnVuY3Rpb24odCl7bihlLHQsclt0XSl9KSk6T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnM/T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZSxPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhyKSk6cyhyKS5mb3JFYWNoKChmdW5jdGlvbih0KXtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iocix0KSl9KSl9cmV0dXJuIGV9KHt9LHQse3BhdGg6dSxrZXk6Y30pKTtpZihvPT09ZSlyZXR1cm47cmV0dXJuIG99Zm9yKGNvbnN0IHMgaW4gZSl7aWYoXCJfXCI9PT1zWzBdKWNvbnRpbnVlO2NvbnN0IG49bC5zY2FuKGVbc10sdCxyLFtzLC4uLnVdLGMpO3ZvaWQgMCE9PW4mJigoZj1mfHxPYmplY3QuYXNzaWduKHt9LGUpKVtzXT1uKX1yZXR1cm4gZn19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtjb25zdCBzPXIoMCksbj1yKDIpLG89cigzNSksYT1yKDgpLGk9cigxKSxsPXIoNCksYz1yKDM2KSx1PXtyZXN1bHQ6U3ltYm9sKFwicmVzdWx0XCIpfTt0LmVudHJ5PWZ1bmN0aW9uKGUsdCxyKXtsZXQgbj1pLmRlZmF1bHRzO3ImJihzKHZvaWQgMD09PXIud2FybmluZ3MsXCJDYW5ub3Qgb3ZlcnJpZGUgd2FybmluZ3MgcHJlZmVyZW5jZSBpbiBzeW5jaHJvbm91cyB2YWxpZGF0aW9uXCIpLG49aS5wcmVmZXJlbmNlcyhpLmRlZmF1bHRzLHIpKTtjb25zdCBvPXUuZW50cnkoZSx0LG4pO3MoIW8ubWFpbnN0YXkuZXh0ZXJuYWxzLmxlbmd0aCxcIlNjaGVtYSB3aXRoIGV4dGVybmFsIHJ1bGVzIG11c3QgdXNlIHZhbGlkYXRlQXN5bmMoKVwiKTtjb25zdCBhPXt2YWx1ZTpvLnZhbHVlfTtyZXR1cm4gby5lcnJvciYmKGEuZXJyb3I9by5lcnJvciksby5tYWluc3RheS53YXJuaW5ncy5sZW5ndGgmJihhLndhcm5pbmc9bC5kZXRhaWxzKG8ubWFpbnN0YXkud2FybmluZ3MpKSxvLm1haW5zdGF5LmRlYnVnJiYoYS5kZWJ1Zz1vLm1haW5zdGF5LmRlYnVnKSxhfSx0LmVudHJ5QXN5bmM9YXN5bmMgZnVuY3Rpb24oZSx0LHIpe2xldCBzPWkuZGVmYXVsdHM7ciYmKHM9aS5wcmVmZXJlbmNlcyhpLmRlZmF1bHRzLHIpKTtjb25zdCBuPXUuZW50cnkoZSx0LHMpLG89bi5tYWluc3RheTtpZihuLmVycm9yKXRocm93IG8uZGVidWcmJihuLmVycm9yLmRlYnVnPW8uZGVidWcpLG4uZXJyb3I7aWYoby5leHRlcm5hbHMubGVuZ3RoKXtsZXQgZT1uLnZhbHVlO2Zvcihjb25zdCB0IG9mIG8uZXh0ZXJuYWxzKXtjb25zdHttZXRob2Q6cixwYXRoOnMsbGFiZWw6bn09dDtsZXQgbyxpLGw9ZTtzLmxlbmd0aCYmKG89c1tzLmxlbmd0aC0xXSxsPShpPWEoZSxzLnNsaWNlKDAsLTEpKSlbb10pO3RyeXtjb25zdCB0PWF3YWl0IHIobCk7aWYodm9pZCAwPT09dHx8dD09PWwpY29udGludWU7aT9pW29dPXQ6ZT10fWNhdGNoKGUpe3Rocm93IGUubWVzc2FnZSs9XCIgKFwiLmNvbmNhdChuLFwiKVwiKSxlfX1uLnZhbHVlPWV9aWYoIXMud2FybmluZ3MmJiFzLmRlYnVnKXJldHVybiBuLnZhbHVlO2NvbnN0IGM9e3ZhbHVlOm4udmFsdWV9O3JldHVybiBvLndhcm5pbmdzLmxlbmd0aCYmKGMud2FybmluZz1sLmRldGFpbHMoby53YXJuaW5ncykpLG8uZGVidWcmJihjLmRlYnVnPW8uZGVidWcpLGN9LHUuZW50cnk9ZnVuY3Rpb24oZSxyLHMpe2NvbnN0e3RyYWNlcjpuLGNsZWFudXA6b309dS50cmFjZXIocixzKSxhPXtleHRlcm5hbHM6W10sd2FybmluZ3M6W10sdHJhY2VyOm4sZGVidWc6cy5kZWJ1Zz9bXTpudWxsLGxpbmtzOnIuX2lkcy5fc2NoZW1hQ2hhaW4/bmV3IE1hcDpudWxsfSxpPXIuX2lkcy5fc2NoZW1hQ2hhaW4/W3tzY2hlbWE6cn1dOm51bGwsZj1uZXcgYyhbXSxbXSx7bWFpbnN0YXk6YSxzY2hlbWFzOml9KSxoPXQudmFsaWRhdGUoZSxyLGYscyk7byYmci4kX3Jvb3QudW50cmFjZSgpO2NvbnN0IG09bC5wcm9jZXNzKGguZXJyb3JzLGUscyk7cmV0dXJue3ZhbHVlOmgudmFsdWUsZXJyb3I6bSxtYWluc3RheTphfX0sdS50cmFjZXI9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS4kX3Jvb3QuX3RyYWNlcj97dHJhY2VyOmUuJF9yb290Ll90cmFjZXIuX3JlZ2lzdGVyKGUpfTp0LmRlYnVnPyhzKGUuJF9yb290LnRyYWNlLFwiRGVidWcgbW9kZSBub3Qgc3VwcG9ydGVkXCIpLHt0cmFjZXI6ZS4kX3Jvb3QudHJhY2UoKS5fcmVnaXN0ZXIoZSksY2xlYW51cDohMH0pOnt0cmFjZXI6dS5pZ25vcmV9fSx0LnZhbGlkYXRlPWZ1bmN0aW9uKGUsdCxyLHMpe2xldCBuPWFyZ3VtZW50cy5sZW5ndGg+NCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XTp7fTtpZih0LiRfdGVybXMud2hlbnMmJih0PXQuX2dlbmVyYXRlKGUscixzKS5zY2hlbWEpLHQuX3ByZWZlcmVuY2VzJiYocz11LnByZWZzKHQscykpLHQuX2NhY2hlJiZzLmNhY2hlKXtjb25zdCBzPXQuX2NhY2hlLmdldChlKTtpZihyLm1haW5zdGF5LnRyYWNlci5kZWJ1ZyhyLFwidmFsaWRhdGVcIixcImNhY2hlZFwiLCEhcykscylyZXR1cm4gc31jb25zdCBvPShuLG8sYSk9PnQuJF9jcmVhdGVFcnJvcihuLGUsbyxhfHxyLHMpLGE9e29yaWdpbmFsOmUscHJlZnM6cyxzY2hlbWE6dCxzdGF0ZTpyLGVycm9yOm8sd2FybjooZSx0LHMpPT5yLm1haW5zdGF5Lndhcm5pbmdzLnB1c2gobyhlLHQscykpLG1lc3NhZ2U6KG4sbyk9PnQuJF9jcmVhdGVFcnJvcihcImN1c3RvbVwiLGUsbyxyLHMse21lc3NhZ2VzOm59KX07ci5tYWluc3RheS50cmFjZXIuZW50cnkodCxyKTtjb25zdCBsPXQuX2RlZmluaXRpb247aWYobC5wcmVwYXJlJiZ2b2lkIDAhPT1lJiZzLmNvbnZlcnQpe2NvbnN0IHQ9bC5wcmVwYXJlKGUsYSk7aWYodCl7aWYoci5tYWluc3RheS50cmFjZXIudmFsdWUocixcInByZXBhcmVcIixlLHQudmFsdWUpLHQuZXJyb3JzKXJldHVybiB1LmZpbmFsaXplKHQudmFsdWUsW10uY29uY2F0KHQuZXJyb3JzKSxhKTtlPXQudmFsdWV9fWlmKGwuY29lcmNlJiZ2b2lkIDAhPT1lJiZzLmNvbnZlcnQmJighbC5jb2VyY2UuZnJvbXx8bC5jb2VyY2UuZnJvbS5pbmNsdWRlcyh0eXBlb2YgZSkpKXtjb25zdCB0PWwuY29lcmNlLm1ldGhvZChlLGEpO2lmKHQpe2lmKHIubWFpbnN0YXkudHJhY2VyLnZhbHVlKHIsXCJjb2VyY2VkXCIsZSx0LnZhbHVlKSx0LmVycm9ycylyZXR1cm4gdS5maW5hbGl6ZSh0LnZhbHVlLFtdLmNvbmNhdCh0LmVycm9ycyksYSk7ZT10LnZhbHVlfX1jb25zdCBjPXQuX2ZsYWdzLmVtcHR5O2MmJmMuJF9tYXRjaCh1LnRyaW0oZSx0KSxyLm5lc3QoYyksaS5kZWZhdWx0cykmJihyLm1haW5zdGF5LnRyYWNlci52YWx1ZShyLFwiZW1wdHlcIixlLHZvaWQgMCksZT12b2lkIDApO2NvbnN0IGY9bi5wcmVzZW5jZXx8dC5fZmxhZ3MucHJlc2VuY2V8fCh0Ll9mbGFncy5fZW5kZWRTd2l0Y2g/XCJpZ25vcmVcIjpzLnByZXNlbmNlKTtpZih2b2lkIDA9PT1lKXtpZihcImZvcmJpZGRlblwiPT09ZilyZXR1cm4gdS5maW5hbGl6ZShlLG51bGwsYSk7aWYoXCJyZXF1aXJlZFwiPT09ZilyZXR1cm4gdS5maW5hbGl6ZShlLFt0LiRfY3JlYXRlRXJyb3IoXCJhbnkucmVxdWlyZWRcIixlLG51bGwscixzKV0sYSk7aWYoXCJvcHRpb25hbFwiPT09Zil7aWYodC5fZmxhZ3MuZGVmYXVsdCE9PWkuc3ltYm9scy5kZWVwRGVmYXVsdClyZXR1cm4gdS5maW5hbGl6ZShlLG51bGwsYSk7ci5tYWluc3RheS50cmFjZXIudmFsdWUocixcImRlZmF1bHRcIixlLHt9KSxlPXt9fX1lbHNlIGlmKFwiZm9yYmlkZGVuXCI9PT1mKXJldHVybiB1LmZpbmFsaXplKGUsW3QuJF9jcmVhdGVFcnJvcihcImFueS51bmtub3duXCIsZSxudWxsLHIscyldLGEpO2NvbnN0IGg9W107aWYodC5fdmFsaWRzKXtjb25zdCBuPXQuX3ZhbGlkcy5nZXQoZSxyLHMsdC5fZmxhZ3MuaW5zZW5zaXRpdmUpO2lmKG4pcmV0dXJuIHMuY29udmVydCYmKHIubWFpbnN0YXkudHJhY2VyLnZhbHVlKHIsXCJ2YWxpZHNcIixlLG4udmFsdWUpLGU9bi52YWx1ZSksci5tYWluc3RheS50cmFjZXIuZmlsdGVyKHQscixcInZhbGlkXCIsbiksdS5maW5hbGl6ZShlLG51bGwsYSk7aWYodC5fZmxhZ3Mub25seSl7Y29uc3Qgbj10LiRfY3JlYXRlRXJyb3IoXCJhbnkub25seVwiLGUse3ZhbGlkczp0Ll92YWxpZHMudmFsdWVzKHtkaXNwbGF5OiEwfSl9LHIscyk7aWYocy5hYm9ydEVhcmx5KXJldHVybiB1LmZpbmFsaXplKGUsW25dLGEpO2gucHVzaChuKX19aWYodC5faW52YWxpZHMpe2NvbnN0IG49dC5faW52YWxpZHMuZ2V0KGUscixzLHQuX2ZsYWdzLmluc2Vuc2l0aXZlKTtpZihuKXtyLm1haW5zdGF5LnRyYWNlci5maWx0ZXIodCxyLFwiaW52YWxpZFwiLG4pO2NvbnN0IG89dC4kX2NyZWF0ZUVycm9yKFwiYW55LmludmFsaWRcIixlLHtpbnZhbGlkczp0Ll9pbnZhbGlkcy52YWx1ZXMoe2Rpc3BsYXk6ITB9KX0scixzKTtpZihzLmFib3J0RWFybHkpcmV0dXJuIHUuZmluYWxpemUoZSxbb10sYSk7aC5wdXNoKG8pfX1pZihsLnZhbGlkYXRlKXtjb25zdCB0PWwudmFsaWRhdGUoZSxhKTtpZih0JiYoci5tYWluc3RheS50cmFjZXIudmFsdWUocixcImJhc2VcIixlLHQudmFsdWUpLGU9dC52YWx1ZSx0LmVycm9ycykpe2lmKCFBcnJheS5pc0FycmF5KHQuZXJyb3JzKSlyZXR1cm4gaC5wdXNoKHQuZXJyb3JzKSx1LmZpbmFsaXplKGUsaCxhKTtpZih0LmVycm9ycy5sZW5ndGgpcmV0dXJuIGgucHVzaCguLi50LmVycm9ycyksdS5maW5hbGl6ZShlLGgsYSl9fXJldHVybiB0Ll9ydWxlcy5sZW5ndGg/dS5ydWxlcyhlLGgsYSk6dS5maW5hbGl6ZShlLGgsYSl9LHUucnVsZXM9ZnVuY3Rpb24oZSx0LHIpe2NvbnN0e3NjaGVtYTpzLHN0YXRlOm4scHJlZnM6b309cjtmb3IoY29uc3QgYSBvZiBzLl9ydWxlcyl7Y29uc3QgbD1zLl9kZWZpbml0aW9uLnJ1bGVzW2EubWV0aG9kXTtpZihsLmNvbnZlcnQmJm8uY29udmVydCl7bi5tYWluc3RheS50cmFjZXIubG9nKHMsbixcInJ1bGVcIixhLm5hbWUsXCJmdWxsXCIpO2NvbnRpbnVlfWxldCBjLGY9YS5hcmdzO2lmKGEuX3Jlc29sdmUubGVuZ3RoKXtmPU9iamVjdC5hc3NpZ24oe30sZik7Zm9yKGNvbnN0IHQgb2YgYS5fcmVzb2x2ZSl7Y29uc3Qgcj1sLmFyZ3NCeU5hbWUuZ2V0KHQpLGE9Zlt0XS5yZXNvbHZlKGUsbixvKSx1PXIubm9ybWFsaXplP3Iubm9ybWFsaXplKGEpOmEsaD1pLnZhbGlkYXRlQXJnKHUsbnVsbCxyKTtpZihoKXtjPXMuJF9jcmVhdGVFcnJvcihcImFueS5yZWZcIixhLHthcmc6dCxyZWY6Zlt0XSxyZWFzb246aH0sbixvKTticmVha31mW3RdPXV9fWM9Y3x8bC52YWxpZGF0ZShlLHIsZixhKTtjb25zdCBoPXUucnVsZShjLGEpO2lmKGguZXJyb3JzKXtpZihuLm1haW5zdGF5LnRyYWNlci5sb2cocyxuLFwicnVsZVwiLGEubmFtZSxcImVycm9yXCIpLGEud2Fybil7bi5tYWluc3RheS53YXJuaW5ncy5wdXNoKC4uLmguZXJyb3JzKTtjb250aW51ZX1pZihvLmFib3J0RWFybHkpcmV0dXJuIHUuZmluYWxpemUoZSxoLmVycm9ycyxyKTt0LnB1c2goLi4uaC5lcnJvcnMpfWVsc2Ugbi5tYWluc3RheS50cmFjZXIubG9nKHMsbixcInJ1bGVcIixhLm5hbWUsXCJwYXNzXCIpLG4ubWFpbnN0YXkudHJhY2VyLnZhbHVlKG4sXCJydWxlXCIsZSxoLnZhbHVlLGEubmFtZSksZT1oLnZhbHVlfXJldHVybiB1LmZpbmFsaXplKGUsdCxyKX0sdS5ydWxlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUgaW5zdGFuY2VvZiBsLlJlcG9ydD8odS5lcnJvcihlLHQpLHtlcnJvcnM6W2VdLHZhbHVlOm51bGx9KTpBcnJheS5pc0FycmF5KGUpJiYoZVswXWluc3RhbmNlb2YgbC5SZXBvcnR8fGVbMF1pbnN0YW5jZW9mIEVycm9yKT8oZS5mb3JFYWNoKGU9PnUuZXJyb3IoZSx0KSkse2Vycm9yczplLHZhbHVlOm51bGx9KTp7ZXJyb3JzOm51bGwsdmFsdWU6ZX19LHUuZXJyb3I9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdC5tZXNzYWdlJiZlLl9zZXRUZW1wbGF0ZSh0Lm1lc3NhZ2UpLGV9LHUuZmluYWxpemU9ZnVuY3Rpb24oZSx0LHIpe3Q9dHx8W107Y29uc3R7c2NoZW1hOm4sc3RhdGU6byxwcmVmczphfT1yO2lmKHQubGVuZ3RoKXtjb25zdCBzPXUuZGVmYXVsdChcImZhaWxvdmVyXCIsdm9pZCAwLHQscik7dm9pZCAwIT09cyYmKG8ubWFpbnN0YXkudHJhY2VyLnZhbHVlKG8sXCJmYWlsb3ZlclwiLGUscyksZT1zLHQ9W10pfWlmKHQubGVuZ3RoJiZuLl9mbGFncy5lcnJvcilpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBuLl9mbGFncy5lcnJvcil7dD1uLl9mbGFncy5lcnJvcih0KSxBcnJheS5pc0FycmF5KHQpfHwodD1bdF0pO2Zvcihjb25zdCBlIG9mIHQpcyhlIGluc3RhbmNlb2YgRXJyb3J8fGUgaW5zdGFuY2VvZiBsLlJlcG9ydCxcImVycm9yKCkgbXVzdCByZXR1cm4gYW4gRXJyb3Igb2JqZWN0XCIpfWVsc2UgdD1bbi5fZmxhZ3MuZXJyb3JdO2lmKHZvaWQgMD09PWUpe2NvbnN0IHM9dS5kZWZhdWx0KFwiZGVmYXVsdFwiLGUsdCxyKTtvLm1haW5zdGF5LnRyYWNlci52YWx1ZShvLFwiZGVmYXVsdFwiLGUscyksZT1zfWlmKG4uX2ZsYWdzLmNhc3QmJnZvaWQgMCE9PWUpe2NvbnN0IHQ9bi5fZGVmaW5pdGlvbi5jYXN0W24uX2ZsYWdzLmNhc3RdO2lmKHQuZnJvbShlKSl7Y29uc3Qgcz10LnRvKGUscik7by5tYWluc3RheS50cmFjZXIudmFsdWUobyxcImNhc3RcIixlLHMsbi5fZmxhZ3MuY2FzdCksZT1zfX1pZihuLiRfdGVybXMuZXh0ZXJuYWxzJiZhLmV4dGVybmFscyYmITEhPT1hLl9leHRlcm5hbHMpZm9yKGNvbnN0IGUgb2Ygbi4kX3Rlcm1zLmV4dGVybmFscyl7Y29uc3R7bWV0aG9kOnR9PWU7by5tYWluc3RheS5leHRlcm5hbHMucHVzaCh7bWV0aG9kOnQscGF0aDpvLnBhdGgsbGFiZWw6bC5sYWJlbChuLl9mbGFncyxvLGEpfSl9Y29uc3QgaT17dmFsdWU6ZSxlcnJvcnM6dC5sZW5ndGg/dDpudWxsfTtyZXR1cm4gbi5fZmxhZ3MucmVzdWx0JiYoaS52YWx1ZT1cInN0cmlwXCI9PT1uLl9mbGFncy5yZXN1bHQ/dm9pZCAwOnIub3JpZ2luYWwsby5tYWluc3RheS50cmFjZXIudmFsdWUobyxuLl9mbGFncy5yZXN1bHQsZSxpLnZhbHVlKSxvLnNoYWRvdyhlLG4uX2ZsYWdzLnJlc3VsdCkpLG4uX2NhY2hlJiYhMSE9PWEuY2FjaGUmJiFuLl9yZWZzLmxlbmd0aCYmbi5fY2FjaGUuc2V0KHIub3JpZ2luYWwsaSksaX0sdS5wcmVmcz1mdW5jdGlvbihlLHQpe2NvbnN0IHI9dD09PWkuZGVmYXVsdHM7cmV0dXJuIHImJmUuX3ByZWZlcmVuY2VzW2kuc3ltYm9scy5wcmVmc10/ZS5fcHJlZmVyZW5jZXNbaS5zeW1ib2xzLnByZWZzXToodD1pLnByZWZlcmVuY2VzKHQsZS5fcHJlZmVyZW5jZXMpLHImJihlLl9wcmVmZXJlbmNlc1tpLnN5bWJvbHMucHJlZnNdPXQpLHQpfSx1LmRlZmF1bHQ9ZnVuY3Rpb24oZSx0LHIscyl7bGV0e3NjaGVtYTpvLHN0YXRlOmEscHJlZnM6bH09cztjb25zdCBjPW8uX2ZsYWdzW2VdO2lmKGwubm9EZWZhdWx0c3x8dm9pZCAwPT09YylyZXR1cm4gdDtpZihhLm1haW5zdGF5LnRyYWNlci5sb2cobyxhLFwicnVsZVwiLGUsXCJmdWxsXCIpLCFjKXJldHVybiBjO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGMpe2NvbnN0IHQ9Yy5sZW5ndGg+MD9bbihhLmFuY2VzdG9yc1swXSksbF06W107dHJ5e3JldHVybiBjKC4uLnQpfWNhdGNoKHQpe3JldHVybiB2b2lkIHIucHVzaChvLiRfY3JlYXRlRXJyb3IoXCJhbnkuXCIuY29uY2F0KGUpLG51bGwse2Vycm9yOnR9LGEsbCkpfX1yZXR1cm5cIm9iamVjdFwiIT10eXBlb2YgYz9jOmNbaS5zeW1ib2xzLmxpdGVyYWxdP2MubGl0ZXJhbDppLmlzUmVzb2x2YWJsZShjKT9jLnJlc29sdmUodCxhLGwpOm4oYyl9LHUudHJpbT1mdW5jdGlvbihlLHQpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlKXJldHVybiBlO2NvbnN0IHI9dC4kX2dldFJ1bGUoXCJ0cmltXCIpO3JldHVybiByJiZyLmFyZ3MuZW5hYmxlZD9lLnRyaW0oKTplfSx1Lmlnbm9yZT17YWN0aXZlOiExLGRlYnVnOm8sZW50cnk6byxmaWx0ZXI6byxsb2c6byxyZXNvbHZlOm8sdmFsdWU6b319LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9ZnVuY3Rpb24oKXt9fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7Y29uc3Qgcz1yKDIpLG49cig4KSxvPXIoMSksYT17dmFsdWU6U3ltYm9sKFwidmFsdWVcIil9O2UuZXhwb3J0cz1hLlN0YXRlPWNsYXNze2NvbnN0cnVjdG9yKGUsdCxyKXt0aGlzLnBhdGg9ZSx0aGlzLmFuY2VzdG9ycz10LHRoaXMubWFpbnN0YXk9ci5tYWluc3RheSx0aGlzLnNjaGVtYXM9ci5zY2hlbWFzLHRoaXMuZGVidWc9bnVsbH1sb2NhbGl6ZShlKXtsZXQgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06bnVsbCxyPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2NvbnN0IHM9bmV3IGEuU3RhdGUoZSx0LHRoaXMpO3JldHVybiByJiZzLnNjaGVtYXMmJihzLnNjaGVtYXM9W2Euc2NoZW1hcyhyKSwuLi5zLnNjaGVtYXNdKSxzfW5lc3QoZSx0KXtjb25zdCByPW5ldyBhLlN0YXRlKHRoaXMucGF0aCx0aGlzLmFuY2VzdG9ycyx0aGlzKTtyZXR1cm4gci5zY2hlbWFzPXIuc2NoZW1hcyYmW2Euc2NoZW1hcyhlKSwuLi5yLnNjaGVtYXNdLHIuZGVidWc9dCxyfXNoYWRvdyhlLHQpe3RoaXMubWFpbnN0YXkuc2hhZG93PXRoaXMubWFpbnN0YXkuc2hhZG93fHxuZXcgYS5TaGFkb3csdGhpcy5tYWluc3RheS5zaGFkb3cuc2V0KHRoaXMucGF0aCxlLHQpfXNuYXBzaG90KCl7dGhpcy5tYWluc3RheS5zaGFkb3cmJih0aGlzLl9zbmFwc2hvdD1zKHRoaXMubWFpbnN0YXkuc2hhZG93Lm5vZGUodGhpcy5wYXRoKSkpfXJlc3RvcmUoKXt0aGlzLm1haW5zdGF5LnNoYWRvdyYmKHRoaXMubWFpbnN0YXkuc2hhZG93Lm92ZXJyaWRlKHRoaXMucGF0aCx0aGlzLl9zbmFwc2hvdCksdGhpcy5fc25hcHNob3Q9dm9pZCAwKX19LGEuc2NoZW1hcz1mdW5jdGlvbihlKXtyZXR1cm4gby5pc1NjaGVtYShlKT97c2NoZW1hOmV9OmV9LGEuU2hhZG93PWNsYXNze2NvbnN0cnVjdG9yKCl7dGhpcy5fdmFsdWVzPW51bGx9c2V0KGUsdCxyKXtpZighZS5sZW5ndGgpcmV0dXJuO2lmKFwic3RyaXBcIj09PXImJlwibnVtYmVyXCI9PXR5cGVvZiBlW2UubGVuZ3RoLTFdKXJldHVybjt0aGlzLl92YWx1ZXM9dGhpcy5fdmFsdWVzfHxuZXcgTWFwO2xldCBzPXRoaXMuX3ZhbHVlcztmb3IobGV0IHQ9MDt0PGUubGVuZ3RoOysrdCl7Y29uc3Qgcj1lW3RdO2xldCBuPXMuZ2V0KHIpO258fChuPW5ldyBNYXAscy5zZXQocixuKSkscz1ufXNbYS52YWx1ZV09dH1nZXQoZSl7Y29uc3QgdD10aGlzLm5vZGUoZSk7aWYodClyZXR1cm4gdFthLnZhbHVlXX1ub2RlKGUpe2lmKHRoaXMuX3ZhbHVlcylyZXR1cm4gbih0aGlzLl92YWx1ZXMsZSx7aXRlcmFibGVzOiEwfSl9b3ZlcnJpZGUoZSx0KXtpZighdGhpcy5fdmFsdWVzKXJldHVybjtjb25zdCByPWUuc2xpY2UoMCwtMSkscz1lW2UubGVuZ3RoLTFdLG89bih0aGlzLl92YWx1ZXMscix7aXRlcmFibGVzOiEwfSk7dD9vLnNldChzLHQpOm8mJm8uZGVsZXRlKHMpfX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtjb25zdCBzPXIoMCksbj1yKDExKSxvPXIoOCksYT1yKDMpLGk9cigxKSxsPXIoNyksYz17fTtlLmV4cG9ydHM9YS5leHRlbmQoe3R5cGU6XCJhcnJheVwiLGZsYWdzOntzaW5nbGU6e2RlZmF1bHQ6ITF9LHNwYXJzZTp7ZGVmYXVsdDohMX19LHRlcm1zOntpdGVtczp7aW5pdDpbXSxtYW5pZmVzdDpcInNjaGVtYVwifSxvcmRlcmVkOntpbml0OltdLG1hbmlmZXN0Olwic2NoZW1hXCJ9LF9leGNsdXNpb25zOntpbml0OltdfSxfaW5jbHVzaW9uczp7aW5pdDpbXX0sX3JlcXVpcmVkczp7aW5pdDpbXX19LGNvZXJjZTp7ZnJvbTpcIm9iamVjdFwiLG1ldGhvZChlLHQpe2xldHtzY2hlbWE6cixzdGF0ZTpzLHByZWZzOm59PXQ7aWYoIUFycmF5LmlzQXJyYXkoZSkpcmV0dXJuO2NvbnN0IG89ci4kX2dldFJ1bGUoXCJzb3J0XCIpO3JldHVybiBvP2Muc29ydChyLGUsby5hcmdzLm9wdGlvbnMscyxuKTp2b2lkIDB9fSx2YWxpZGF0ZShlLHQpe2xldHtzY2hlbWE6cixlcnJvcjpzfT10O2lmKCFBcnJheS5pc0FycmF5KGUpKXtpZihyLl9mbGFncy5zaW5nbGUpe2NvbnN0IHQ9W2VdO3JldHVybiB0W2kuc3ltYm9scy5hcnJheVNpbmdsZV09ITAse3ZhbHVlOnR9fXJldHVybntlcnJvcnM6cyhcImFycmF5LmJhc2VcIil9fWlmKHIuJF9nZXRSdWxlKFwiaXRlbXNcIil8fHIuJF90ZXJtcy5leHRlcm5hbHMpcmV0dXJue3ZhbHVlOmUuc2xpY2UoKX19LHJ1bGVzOntoYXM6e21ldGhvZChlKXtlPXRoaXMuJF9jb21waWxlKGUse2FwcGVuZFBhdGg6ITB9KTtjb25zdCB0PXRoaXMuJF9hZGRSdWxlKHtuYW1lOlwiaGFzXCIsYXJnczp7c2NoZW1hOmV9fSk7cmV0dXJuIHQuJF9tdXRhdGVSZWdpc3RlcihlKSx0fSx2YWxpZGF0ZShlLHQscil7bGV0e3N0YXRlOnMscHJlZnM6bixlcnJvcjpvfT10LHtzY2hlbWE6YX09cjtjb25zdCBpPVtlLC4uLnMuYW5jZXN0b3JzXTtmb3IobGV0IHQ9MDt0PGUubGVuZ3RoOysrdCl7Y29uc3Qgcj1zLmxvY2FsaXplKFsuLi5zLnBhdGgsdF0saSxhKTtpZihhLiRfbWF0Y2goZVt0XSxyLG4pKXJldHVybiBlfWNvbnN0IGw9YS5fZmxhZ3MubGFiZWw7cmV0dXJuIGw/byhcImFycmF5Lmhhc0tub3duXCIse3BhdHRlcm5MYWJlbDpsfSk6byhcImFycmF5Lmhhc1Vua25vd25cIixudWxsKX0sbXVsdGk6ITB9LGl0ZW1zOnttZXRob2QoKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aCx0PW5ldyBBcnJheShlKSxyPTA7cjxlO3IrKyl0W3JdPWFyZ3VtZW50c1tyXTtpLnZlcmlmeUZsYXQodCxcIml0ZW1zXCIpO2NvbnN0IHM9dGhpcy4kX2FkZFJ1bGUoXCJpdGVtc1wiKTtmb3IobGV0IGU9MDtlPHQubGVuZ3RoOysrZSl7Y29uc3Qgcj1pLnRyeVdpdGhQYXRoKCgpPT50aGlzLiRfY29tcGlsZSh0W2VdKSxlLHthcHBlbmQ6ITB9KTtzLiRfdGVybXMuaXRlbXMucHVzaChyKX1yZXR1cm4gcy4kX211dGF0ZVJlYnVpbGQoKX0sdmFsaWRhdGUoZSx0KXtsZXR7c2NoZW1hOnIsZXJyb3I6cyxzdGF0ZTpuLHByZWZzOm99PXQ7Y29uc3QgYT1yLiRfdGVybXMuX3JlcXVpcmVkcy5zbGljZSgpLGw9ci4kX3Rlcm1zLm9yZGVyZWQuc2xpY2UoKSx1PVsuLi5yLiRfdGVybXMuX2luY2x1c2lvbnMsLi4uYV0sZj0hZVtpLnN5bWJvbHMuYXJyYXlTaW5nbGVdO2RlbGV0ZSBlW2kuc3ltYm9scy5hcnJheVNpbmdsZV07Y29uc3QgaD1bXTtsZXQgbT1lLmxlbmd0aDtmb3IobGV0IHQ9MDt0PG07Kyt0KXtjb25zdCBpPWVbdF07bGV0IGQ9ITEscD0hMTtjb25zdCBnPWY/dDpuZXcgTnVtYmVyKHQpLHk9Wy4uLm4ucGF0aCxnXTtpZighci5fZmxhZ3Muc3BhcnNlJiZ2b2lkIDA9PT1pKXtpZihoLnB1c2gocyhcImFycmF5LnNwYXJzZVwiLHtrZXk6ZyxwYXRoOnkscG9zOnQsdmFsdWU6dm9pZCAwfSxuLmxvY2FsaXplKHkpKSksby5hYm9ydEVhcmx5KXJldHVybiBoO2wuc2hpZnQoKTtjb250aW51ZX1jb25zdCBiPVtlLC4uLm4uYW5jZXN0b3JzXTtmb3IoY29uc3QgZSBvZiByLiRfdGVybXMuX2V4Y2x1c2lvbnMpaWYoZS4kX21hdGNoKGksbi5sb2NhbGl6ZSh5LGIsZSksbyx7cHJlc2VuY2U6XCJpZ25vcmVcIn0pKXtpZihoLnB1c2gocyhcImFycmF5LmV4Y2x1ZGVzXCIse3Bvczp0LHZhbHVlOml9LG4ubG9jYWxpemUoeSkpKSxvLmFib3J0RWFybHkpcmV0dXJuIGg7ZD0hMCxsLnNoaWZ0KCk7YnJlYWt9aWYoZCljb250aW51ZTtpZihyLiRfdGVybXMub3JkZXJlZC5sZW5ndGgpe2lmKGwubGVuZ3RoKXtjb25zdCBhPWwuc2hpZnQoKSx1PWEuJF92YWxpZGF0ZShpLG4ubG9jYWxpemUoeSxiLGEpLG8pO2lmKHUuZXJyb3JzKXtpZihoLnB1c2goLi4udS5lcnJvcnMpLG8uYWJvcnRFYXJseSlyZXR1cm4gaH1lbHNlIGlmKFwic3RyaXBcIj09PWEuX2ZsYWdzLnJlc3VsdCljLmZhc3RTcGxpY2UoZSx0KSwtLXQsLS1tO2Vsc2V7aWYoIXIuX2ZsYWdzLnNwYXJzZSYmdm9pZCAwPT09dS52YWx1ZSl7aWYoaC5wdXNoKHMoXCJhcnJheS5zcGFyc2VcIix7a2V5OmcscGF0aDp5LHBvczp0LHZhbHVlOnZvaWQgMH0sbi5sb2NhbGl6ZSh5KSkpLG8uYWJvcnRFYXJseSlyZXR1cm4gaDtjb250aW51ZX1lW3RdPXUudmFsdWV9Y29udGludWV9aWYoIXIuJF90ZXJtcy5pdGVtcy5sZW5ndGgpe2lmKGgucHVzaChzKFwiYXJyYXkub3JkZXJlZExlbmd0aFwiLHtwb3M6dCxsaW1pdDpyLiRfdGVybXMub3JkZXJlZC5sZW5ndGh9KSksby5hYm9ydEVhcmx5KXJldHVybiBoO2JyZWFrfX1jb25zdCB2PVtdO2xldCBfPWEubGVuZ3RoO2ZvcihsZXQgbD0wO2w8XzsrK2wpe2NvbnN0IHU9bi5sb2NhbGl6ZSh5LGIsYVtsXSk7dS5zbmFwc2hvdCgpO2NvbnN0IGY9YVtsXS4kX3ZhbGlkYXRlKGksdSxvKTtpZih2W2xdPWYsIWYuZXJyb3JzKXtpZihlW3RdPWYudmFsdWUscD0hMCxjLmZhc3RTcGxpY2UoYSxsKSwtLWwsLS1fLCFyLl9mbGFncy5zcGFyc2UmJnZvaWQgMD09PWYudmFsdWUmJihoLnB1c2gocyhcImFycmF5LnNwYXJzZVwiLHtrZXk6ZyxwYXRoOnkscG9zOnQsdmFsdWU6dm9pZCAwfSxuLmxvY2FsaXplKHkpKSksby5hYm9ydEVhcmx5KSlyZXR1cm4gaDticmVha311LnJlc3RvcmUoKX1pZihwKWNvbnRpbnVlO2NvbnN0IHc9by5zdHJpcFVua25vd24mJiEhby5zdHJpcFVua25vd24uYXJyYXlzfHwhMTtfPXUubGVuZ3RoO2Zvcihjb25zdCBsIG9mIHUpe2xldCB1O2NvbnN0IGY9YS5pbmRleE9mKGwpO2lmKC0xIT09Zil1PXZbZl07ZWxzZXtjb25zdCBhPW4ubG9jYWxpemUoeSxiLGwpO2lmKGEuc25hcHNob3QoKSwhKHU9bC4kX3ZhbGlkYXRlKGksYSxvKSkuZXJyb3JzKXtcInN0cmlwXCI9PT1sLl9mbGFncy5yZXN1bHQ/KGMuZmFzdFNwbGljZShlLHQpLC0tdCwtLW0pOnIuX2ZsYWdzLnNwYXJzZXx8dm9pZCAwIT09dS52YWx1ZT9lW3RdPXUudmFsdWU6KGgucHVzaChzKFwiYXJyYXkuc3BhcnNlXCIse2tleTpnLHBhdGg6eSxwb3M6dCx2YWx1ZTp2b2lkIDB9LG4ubG9jYWxpemUoeSkpKSxkPSEwKSxwPSEwO2JyZWFrfWEucmVzdG9yZSgpfWlmKDE9PT1fKXtpZih3KXtjLmZhc3RTcGxpY2UoZSx0KSwtLXQsLS1tLHA9ITA7YnJlYWt9aWYoaC5wdXNoKC4uLnUuZXJyb3JzKSxvLmFib3J0RWFybHkpcmV0dXJuIGg7ZD0hMDticmVha319aWYoIWQmJihyLiRfdGVybXMuX2luY2x1c2lvbnMubGVuZ3RoJiYhcCkpe2lmKHcpe2MuZmFzdFNwbGljZShlLHQpLC0tdCwtLW07Y29udGludWV9aWYoaC5wdXNoKHMoXCJhcnJheS5pbmNsdWRlc1wiLHtwb3M6dCx2YWx1ZTppfSxuLmxvY2FsaXplKHkpKSksby5hYm9ydEVhcmx5KXJldHVybiBofX1yZXR1cm4gYS5sZW5ndGgmJmMuZmlsbE1pc3NlZEVycm9ycyhyLGgsYSxlLG4sbyksbC5sZW5ndGgmJmMuZmlsbE9yZGVyZWRFcnJvcnMocixoLGwsZSxuLG8pLGgubGVuZ3RoP2g6ZX0scHJpb3JpdHk6ITAsbWFuaWZlc3Q6ITF9LGxlbmd0aDp7bWV0aG9kKGUpe3JldHVybiB0aGlzLiRfYWRkUnVsZSh7bmFtZTpcImxlbmd0aFwiLGFyZ3M6e2xpbWl0OmV9LG9wZXJhdG9yOlwiPVwifSl9LHZhbGlkYXRlKGUsdCxyLHMpe2xldHtsaW1pdDpufT1yLHtuYW1lOm8sb3BlcmF0b3I6YSxhcmdzOmx9PXM7cmV0dXJuIGkuY29tcGFyZShlLmxlbmd0aCxuLGEpP2U6dC5lcnJvcihcImFycmF5LlwiK28se2xpbWl0OmwubGltaXQsdmFsdWU6ZX0pfSxhcmdzOlt7bmFtZTpcImxpbWl0XCIscmVmOiEwLGFzc2VydDppLmxpbWl0LG1lc3NhZ2U6XCJtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlclwifV19LG1heDp7bWV0aG9kKGUpe3JldHVybiB0aGlzLiRfYWRkUnVsZSh7bmFtZTpcIm1heFwiLG1ldGhvZDpcImxlbmd0aFwiLGFyZ3M6e2xpbWl0OmV9LG9wZXJhdG9yOlwiPD1cIn0pfX0sbWluOnttZXRob2QoZSl7cmV0dXJuIHRoaXMuJF9hZGRSdWxlKHtuYW1lOlwibWluXCIsbWV0aG9kOlwibGVuZ3RoXCIsYXJnczp7bGltaXQ6ZX0sb3BlcmF0b3I6XCI+PVwifSl9fSxvcmRlcmVkOnttZXRob2QoKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aCx0PW5ldyBBcnJheShlKSxyPTA7cjxlO3IrKyl0W3JdPWFyZ3VtZW50c1tyXTtpLnZlcmlmeUZsYXQodCxcIm9yZGVyZWRcIik7Y29uc3Qgcz10aGlzLiRfYWRkUnVsZShcIml0ZW1zXCIpO2ZvcihsZXQgZT0wO2U8dC5sZW5ndGg7KytlKXtjb25zdCByPWkudHJ5V2l0aFBhdGgoKCk9PnRoaXMuJF9jb21waWxlKHRbZV0pLGUse2FwcGVuZDohMH0pO2MudmFsaWRhdGVTaW5nbGUocixzKSxzLiRfbXV0YXRlUmVnaXN0ZXIocikscy4kX3Rlcm1zLm9yZGVyZWQucHVzaChyKX1yZXR1cm4gcy4kX211dGF0ZVJlYnVpbGQoKX19LHNpbmdsZTp7bWV0aG9kKGUpe2NvbnN0IHQ9dm9pZCAwPT09ZXx8ISFlO3JldHVybiBzKCF0fHwhdGhpcy5fZmxhZ3MuX2FycmF5SXRlbXMsXCJDYW5ub3Qgc3BlY2lmeSBzaW5nbGUgcnVsZSB3aGVuIGFycmF5IGhhcyBhcnJheSBpdGVtc1wiKSx0aGlzLiRfc2V0RmxhZyhcInNpbmdsZVwiLHQpfX0sc29ydDp7bWV0aG9kKCl7bGV0IGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9O2kuYXNzZXJ0T3B0aW9ucyhlLFtcImJ5XCIsXCJvcmRlclwiXSk7Y29uc3QgdD17b3JkZXI6ZS5vcmRlcnx8XCJhc2NlbmRpbmdcIn07cmV0dXJuIGUuYnkmJih0LmJ5PWwucmVmKGUuYnkse2FuY2VzdG9yOjB9KSxzKCF0LmJ5LmFuY2VzdG9yLFwiQ2Fubm90IHNvcnQgYnkgYW5jZXN0b3JcIikpLHRoaXMuJF9hZGRSdWxlKHtuYW1lOlwic29ydFwiLGFyZ3M6e29wdGlvbnM6dH19KX0sdmFsaWRhdGUoZSx0LHIpe2xldHtlcnJvcjpzLHN0YXRlOm4scHJlZnM6byxzY2hlbWE6YX09dCx7b3B0aW9uczppfT1yO2NvbnN0e3ZhbHVlOmwsZXJyb3JzOnV9PWMuc29ydChhLGUsaSxuLG8pO2lmKHUpcmV0dXJuIHU7Zm9yKGxldCB0PTA7dDxlLmxlbmd0aDsrK3QpaWYoZVt0XSE9PWxbdF0pcmV0dXJuIHMoXCJhcnJheS5zb3J0XCIse29yZGVyOmkub3JkZXIsYnk6aS5ieT9pLmJ5LmtleTpcInZhbHVlXCJ9KTtyZXR1cm4gZX0sY29udmVydDohMH0sc3BhcnNlOnttZXRob2QoZSl7Y29uc3QgdD12b2lkIDA9PT1lfHwhIWU7cmV0dXJuIHRoaXMuX2ZsYWdzLnNwYXJzZT09PXQ/dGhpczoodD90aGlzLmNsb25lKCk6dGhpcy4kX2FkZFJ1bGUoXCJpdGVtc1wiKSkuJF9zZXRGbGFnKFwic3BhcnNlXCIsdCx7Y2xvbmU6ITF9KX19LHVuaXF1ZTp7bWV0aG9kKGUpe2xldCB0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp7fTtzKCFlfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlfHxcInN0cmluZ1wiPT10eXBlb2YgZSxcImNvbXBhcmF0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uIG9yIGEgc3RyaW5nXCIpLGkuYXNzZXJ0T3B0aW9ucyh0LFtcImlnbm9yZVVuZGVmaW5lZFwiLFwic2VwYXJhdG9yXCJdKTtjb25zdCByPXtuYW1lOlwidW5pcXVlXCIsYXJnczp7b3B0aW9uczp0LGNvbXBhcmF0b3I6ZX19O2lmKGUpaWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpe2NvbnN0IHM9aS5kZWZhdWx0KHQuc2VwYXJhdG9yLFwiLlwiKTtyLnBhdGg9cz9lLnNwbGl0KHMpOltlXX1lbHNlIHIuY29tcGFyYXRvcj1lO3JldHVybiB0aGlzLiRfYWRkUnVsZShyKX0sdmFsaWRhdGUoZSx0LHIsYSl7bGV0e3N0YXRlOmksZXJyb3I6bCxzY2hlbWE6Y309dCx7Y29tcGFyYXRvcjp1LG9wdGlvbnM6Zn09cix7Y29tcGFyYXRvcjpoLHBhdGg6bX09YTtjb25zdCBkPXtzdHJpbmc6T2JqZWN0LmNyZWF0ZShudWxsKSxudW1iZXI6T2JqZWN0LmNyZWF0ZShudWxsKSx1bmRlZmluZWQ6T2JqZWN0LmNyZWF0ZShudWxsKSxib29sZWFuOk9iamVjdC5jcmVhdGUobnVsbCksb2JqZWN0Om5ldyBNYXAsZnVuY3Rpb246bmV3IE1hcCxjdXN0b206bmV3IE1hcH0scD1ofHxuLGc9Zi5pZ25vcmVVbmRlZmluZWQ7Zm9yKGxldCB0PTA7dDxlLmxlbmd0aDsrK3Qpe2NvbnN0IHI9bT9vKGVbdF0sbSk6ZVt0XSxuPWg/ZC5jdXN0b206ZFt0eXBlb2Ygcl07aWYocyhuLFwiRmFpbGVkIHRvIGZpbmQgdW5pcXVlIG1hcCBjb250YWluZXIgZm9yIHR5cGVcIix0eXBlb2YgciksbiBpbnN0YW5jZW9mIE1hcCl7Y29uc3Qgcz1uLmVudHJpZXMoKTtsZXQgbztmb3IoOyEobz1zLm5leHQoKSkuZG9uZTspaWYocChvLnZhbHVlWzBdLHIpKXtjb25zdCByPWkubG9jYWxpemUoWy4uLmkucGF0aCx0XSxbZSwuLi5pLmFuY2VzdG9yc10pLHM9e3Bvczp0LHZhbHVlOmVbdF0sZHVwZVBvczpvLnZhbHVlWzFdLGR1cGVWYWx1ZTplW28udmFsdWVbMV1dfTtyZXR1cm4gbSYmKHMucGF0aD11KSxsKFwiYXJyYXkudW5pcXVlXCIscyxyKX1uLnNldChyLHQpfWVsc2V7aWYoKCFnfHx2b2lkIDAhPT1yKSYmdm9pZCAwIT09bltyXSl7Y29uc3Qgcz17cG9zOnQsdmFsdWU6ZVt0XSxkdXBlUG9zOm5bcl0sZHVwZVZhbHVlOmVbbltyXV19O3JldHVybiBtJiYocy5wYXRoPXUpLGwoXCJhcnJheS51bmlxdWVcIixzLGkubG9jYWxpemUoWy4uLmkucGF0aCx0XSxbZSwuLi5pLmFuY2VzdG9yc10pKX1uW3JdPXR9fXJldHVybiBlfSxhcmdzOltcImNvbXBhcmF0b3JcIixcIm9wdGlvbnNcIl0sbXVsdGk6ITB9fSxjYXN0OntzZXQ6e2Zyb206QXJyYXkuaXNBcnJheSx0bzooZSx0KT0+bmV3IFNldChlKX19LHJlYnVpbGQoZSl7ZS4kX3Rlcm1zLl9pbmNsdXNpb25zPVtdLGUuJF90ZXJtcy5fZXhjbHVzaW9ucz1bXSxlLiRfdGVybXMuX3JlcXVpcmVkcz1bXTtmb3IoY29uc3QgdCBvZiBlLiRfdGVybXMuaXRlbXMpYy52YWxpZGF0ZVNpbmdsZSh0LGUpLFwicmVxdWlyZWRcIj09PXQuX2ZsYWdzLnByZXNlbmNlP2UuJF90ZXJtcy5fcmVxdWlyZWRzLnB1c2godCk6XCJmb3JiaWRkZW5cIj09PXQuX2ZsYWdzLnByZXNlbmNlP2UuJF90ZXJtcy5fZXhjbHVzaW9ucy5wdXNoKHQpOmUuJF90ZXJtcy5faW5jbHVzaW9ucy5wdXNoKHQpO2Zvcihjb25zdCB0IG9mIGUuJF90ZXJtcy5vcmRlcmVkKWMudmFsaWRhdGVTaW5nbGUodCxlKX0sbWFuaWZlc3Q6e2J1aWxkOihlLHQpPT4odC5pdGVtcyYmKGU9ZS5pdGVtcyguLi50Lml0ZW1zKSksdC5vcmRlcmVkJiYoZT1lLm9yZGVyZWQoLi4udC5vcmRlcmVkKSksZSl9LG1lc3NhZ2VzOntcImFycmF5LmJhc2VcIjonXCJ7eyNsYWJlbH19XCIgbXVzdCBiZSBhbiBhcnJheScsXCJhcnJheS5leGNsdWRlc1wiOidcInt7I2xhYmVsfX1cIiBjb250YWlucyBhbiBleGNsdWRlZCB2YWx1ZScsXCJhcnJheS5oYXNLbm93blwiOidcInt7I2xhYmVsfX1cIiBkb2VzIG5vdCBjb250YWluIGF0IGxlYXN0IG9uZSByZXF1aXJlZCBtYXRjaCBmb3IgdHlwZSBcInsjcGF0dGVybkxhYmVsfVwiJyxcImFycmF5Lmhhc1Vua25vd25cIjonXCJ7eyNsYWJlbH19XCIgZG9lcyBub3QgY29udGFpbiBhdCBsZWFzdCBvbmUgcmVxdWlyZWQgbWF0Y2gnLFwiYXJyYXkuaW5jbHVkZXNcIjonXCJ7eyNsYWJlbH19XCIgZG9lcyBub3QgbWF0Y2ggYW55IG9mIHRoZSBhbGxvd2VkIHR5cGVzJyxcImFycmF5LmluY2x1ZGVzUmVxdWlyZWRCb3RoXCI6J1wie3sjbGFiZWx9fVwiIGRvZXMgbm90IGNvbnRhaW4ge3sja25vd25NaXNzZXN9fSBhbmQge3sjdW5rbm93bk1pc3Nlc319IG90aGVyIHJlcXVpcmVkIHZhbHVlKHMpJyxcImFycmF5LmluY2x1ZGVzUmVxdWlyZWRLbm93bnNcIjonXCJ7eyNsYWJlbH19XCIgZG9lcyBub3QgY29udGFpbiB7eyNrbm93bk1pc3Nlc319JyxcImFycmF5LmluY2x1ZGVzUmVxdWlyZWRVbmtub3duc1wiOidcInt7I2xhYmVsfX1cIiBkb2VzIG5vdCBjb250YWluIHt7I3Vua25vd25NaXNzZXN9fSByZXF1aXJlZCB2YWx1ZShzKScsXCJhcnJheS5sZW5ndGhcIjonXCJ7eyNsYWJlbH19XCIgbXVzdCBjb250YWluIHt7I2xpbWl0fX0gaXRlbXMnLFwiYXJyYXkubWF4XCI6J1wie3sjbGFiZWx9fVwiIG11c3QgY29udGFpbiBsZXNzIHRoYW4gb3IgZXF1YWwgdG8ge3sjbGltaXR9fSBpdGVtcycsXCJhcnJheS5taW5cIjonXCJ7eyNsYWJlbH19XCIgbXVzdCBjb250YWluIGF0IGxlYXN0IHt7I2xpbWl0fX0gaXRlbXMnLFwiYXJyYXkub3JkZXJlZExlbmd0aFwiOidcInt7I2xhYmVsfX1cIiBtdXN0IGNvbnRhaW4gYXQgbW9zdCB7eyNsaW1pdH19IGl0ZW1zJyxcImFycmF5LnNvcnRcIjonXCJ7eyNsYWJlbH19XCIgbXVzdCBiZSBzb3J0ZWQgaW4geyNvcmRlcn0gb3JkZXIgYnkge3sjYnl9fScsXCJhcnJheS5zb3J0Lm1pc21hdGNoaW5nXCI6J1wie3sjbGFiZWx9fVwiIGNhbm5vdCBiZSBzb3J0ZWQgZHVlIHRvIG1pc21hdGNoaW5nIHR5cGVzJyxcImFycmF5LnNvcnQudW5zdXBwb3J0ZWRcIjonXCJ7eyNsYWJlbH19XCIgY2Fubm90IGJlIHNvcnRlZCBkdWUgdG8gdW5zdXBwb3J0ZWQgdHlwZSB7I3R5cGV9JyxcImFycmF5LnNwYXJzZVwiOidcInt7I2xhYmVsfX1cIiBtdXN0IG5vdCBiZSBhIHNwYXJzZSBhcnJheSBpdGVtJyxcImFycmF5LnVuaXF1ZVwiOidcInt7I2xhYmVsfX1cIiBjb250YWlucyBhIGR1cGxpY2F0ZSB2YWx1ZSd9fSksYy5maWxsTWlzc2VkRXJyb3JzPWZ1bmN0aW9uKGUsdCxyLHMsbixvKXtjb25zdCBhPVtdO2xldCBpPTA7Zm9yKGNvbnN0IGUgb2Ygcil7Y29uc3QgdD1lLl9mbGFncy5sYWJlbDt0P2EucHVzaCh0KTorK2l9YS5sZW5ndGg/aT90LnB1c2goZS4kX2NyZWF0ZUVycm9yKFwiYXJyYXkuaW5jbHVkZXNSZXF1aXJlZEJvdGhcIixzLHtrbm93bk1pc3NlczphLHVua25vd25NaXNzZXM6aX0sbixvKSk6dC5wdXNoKGUuJF9jcmVhdGVFcnJvcihcImFycmF5LmluY2x1ZGVzUmVxdWlyZWRLbm93bnNcIixzLHtrbm93bk1pc3NlczphfSxuLG8pKTp0LnB1c2goZS4kX2NyZWF0ZUVycm9yKFwiYXJyYXkuaW5jbHVkZXNSZXF1aXJlZFVua25vd25zXCIscyx7dW5rbm93bk1pc3NlczppfSxuLG8pKX0sYy5maWxsT3JkZXJlZEVycm9ycz1mdW5jdGlvbihlLHQscixzLG4sbyl7Y29uc3QgYT1bXTtmb3IoY29uc3QgZSBvZiByKVwicmVxdWlyZWRcIj09PWUuX2ZsYWdzLnByZXNlbmNlJiZhLnB1c2goZSk7YS5sZW5ndGgmJmMuZmlsbE1pc3NlZEVycm9ycyhlLHQsYSxzLG4sbyl9LGMuZmFzdFNwbGljZT1mdW5jdGlvbihlLHQpe2xldCByPXQ7Zm9yKDtyPGUubGVuZ3RoOyllW3IrK109ZVtyXTstLWUubGVuZ3RofSxjLnZhbGlkYXRlU2luZ2xlPWZ1bmN0aW9uKGUsdCl7KFwiYXJyYXlcIj09PWUudHlwZXx8ZS5fZmxhZ3MuX2FycmF5SXRlbXMpJiYocyghdC5fZmxhZ3Muc2luZ2xlLFwiQ2Fubm90IHNwZWNpZnkgYXJyYXkgaXRlbSB3aXRoIHNpbmdsZSBydWxlIGVuYWJsZWRcIiksdC4kX3NldEZsYWcoXCJfYXJyYXlJdGVtc1wiLCEwLHtjbG9uZTohMX0pKX0sYy5zb3J0PWZ1bmN0aW9uKGUsdCxyLHMsbil7Y29uc3Qgbz1cImFzY2VuZGluZ1wiPT09ci5vcmRlcj8xOi0xLGE9LTEqbyxpPW8sbD0obCx1KT0+e2xldCBmPWMuY29tcGFyZShsLHUsYSxpKTtpZihudWxsIT09ZilyZXR1cm4gZjtpZihyLmJ5JiYobD1yLmJ5LnJlc29sdmUobCxzLG4pLHU9ci5ieS5yZXNvbHZlKHUscyxuKSksbnVsbCE9PShmPWMuY29tcGFyZShsLHUsYSxpKSkpcmV0dXJuIGY7Y29uc3QgaD10eXBlb2YgbDtpZihoIT09dHlwZW9mIHUpdGhyb3cgZS4kX2NyZWF0ZUVycm9yKFwiYXJyYXkuc29ydC5taXNtYXRjaGluZ1wiLHQsbnVsbCxzLG4pO2lmKFwibnVtYmVyXCIhPT1oJiZcInN0cmluZ1wiIT09aCl0aHJvdyBlLiRfY3JlYXRlRXJyb3IoXCJhcnJheS5zb3J0LnVuc3VwcG9ydGVkXCIsdCx7dHlwZTpofSxzLG4pO3JldHVyblwibnVtYmVyXCI9PT1oPyhsLXUpKm86bDx1P2E6aX07dHJ5e3JldHVybnt2YWx1ZTp0LnNsaWNlKCkuc29ydChsKX19Y2F0Y2goZSl7cmV0dXJue2Vycm9yczplfX19LGMuY29tcGFyZT1mdW5jdGlvbihlLHQscixzKXtyZXR1cm4gZT09PXQ/MDp2b2lkIDA9PT1lPzE6dm9pZCAwPT09dD8tMTpudWxsPT09ZT9zOm51bGw9PT10P3I6bnVsbH19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtjb25zdCBzPXIoMCksbj1yKDMpLG89cigxKSxhPXIoMjEpLGk9e2lzQm9vbDpmdW5jdGlvbihlKXtyZXR1cm5cImJvb2xlYW5cIj09dHlwZW9mIGV9fTtlLmV4cG9ydHM9bi5leHRlbmQoe3R5cGU6XCJib29sZWFuXCIsZmxhZ3M6e3NlbnNpdGl2ZTp7ZGVmYXVsdDohMX19LHRlcm1zOntmYWxzeTp7aW5pdDpudWxsLG1hbmlmZXN0OlwidmFsdWVzXCJ9LHRydXRoeTp7aW5pdDpudWxsLG1hbmlmZXN0OlwidmFsdWVzXCJ9fSxjb2VyY2UoZSx0KXtsZXR7c2NoZW1hOnJ9PXQ7aWYoXCJib29sZWFuXCIhPXR5cGVvZiBlKXtpZihcInN0cmluZ1wiPT10eXBlb2YgZSl7Y29uc3QgdD1yLl9mbGFncy5zZW5zaXRpdmU/ZTplLnRvTG93ZXJDYXNlKCk7ZT1cInRydWVcIj09PXR8fFwiZmFsc2VcIiE9PXQmJmV9cmV0dXJuXCJib29sZWFuXCIhPXR5cGVvZiBlJiYoZT1yLiRfdGVybXMudHJ1dGh5JiZyLiRfdGVybXMudHJ1dGh5LmhhcyhlLG51bGwsbnVsbCwhci5fZmxhZ3Muc2Vuc2l0aXZlKXx8KCFyLiRfdGVybXMuZmFsc3l8fCFyLiRfdGVybXMuZmFsc3kuaGFzKGUsbnVsbCxudWxsLCFyLl9mbGFncy5zZW5zaXRpdmUpKSYmZSkse3ZhbHVlOmV9fX0sdmFsaWRhdGUoZSx0KXtsZXR7ZXJyb3I6cn09dDtpZihcImJvb2xlYW5cIiE9dHlwZW9mIGUpcmV0dXJue3ZhbHVlOmUsZXJyb3JzOnIoXCJib29sZWFuLmJhc2VcIil9fSxydWxlczp7dHJ1dGh5OnttZXRob2QoKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aCx0PW5ldyBBcnJheShlKSxyPTA7cjxlO3IrKyl0W3JdPWFyZ3VtZW50c1tyXTtvLnZlcmlmeUZsYXQodCxcInRydXRoeVwiKTtjb25zdCBuPXRoaXMuY2xvbmUoKTtuLiRfdGVybXMudHJ1dGh5PW4uJF90ZXJtcy50cnV0aHl8fG5ldyBhO2ZvcihsZXQgZT0wO2U8dC5sZW5ndGg7KytlKXtjb25zdCByPXRbZV07cyh2b2lkIDAhPT1yLFwiQ2Fubm90IGNhbGwgdHJ1dGh5IHdpdGggdW5kZWZpbmVkXCIpLG4uJF90ZXJtcy50cnV0aHkuYWRkKHIpfXJldHVybiBufX0sZmFsc3k6e21ldGhvZCgpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLHQ9bmV3IEFycmF5KGUpLHI9MDtyPGU7cisrKXRbcl09YXJndW1lbnRzW3JdO28udmVyaWZ5RmxhdCh0LFwiZmFsc3lcIik7Y29uc3Qgbj10aGlzLmNsb25lKCk7bi4kX3Rlcm1zLmZhbHN5PW4uJF90ZXJtcy5mYWxzeXx8bmV3IGE7Zm9yKGxldCBlPTA7ZTx0Lmxlbmd0aDsrK2Upe2NvbnN0IHI9dFtlXTtzKHZvaWQgMCE9PXIsXCJDYW5ub3QgY2FsbCBmYWxzeSB3aXRoIHVuZGVmaW5lZFwiKSxuLiRfdGVybXMuZmFsc3kuYWRkKHIpfXJldHVybiBufX0sc2Vuc2l0aXZlOnttZXRob2QoKXtsZXQgZT0hKGFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdKXx8YXJndW1lbnRzWzBdO3JldHVybiB0aGlzLiRfc2V0RmxhZyhcInNlbnNpdGl2ZVwiLGUpfX19LGNhc3Q6e251bWJlcjp7ZnJvbTppLmlzQm9vbCx0bzooZSx0KT0+ZT8xOjB9LHN0cmluZzp7ZnJvbTppLmlzQm9vbCx0bzooZSx0KT0+ZT9cInRydWVcIjpcImZhbHNlXCJ9fSxtYW5pZmVzdDp7YnVpbGQ6KGUsdCk9Pih0LnRydXRoeSYmKGU9ZS50cnV0aHkoLi4udC50cnV0aHkpKSx0LmZhbHN5JiYoZT1lLmZhbHN5KC4uLnQuZmFsc3kpKSxlKX0sbWVzc2FnZXM6e1wiYm9vbGVhbi5iYXNlXCI6J1wie3sjbGFiZWx9fVwiIG11c3QgYmUgYSBib29sZWFuJ319KX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2NvbnN0IHM9cigwKSxuPXIoMyksbz1yKDEpLGE9cig2KSxpPXtpc0RhdGU6ZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBEYXRlfX07ZS5leHBvcnRzPW4uZXh0ZW5kKHt0eXBlOlwiZGF0ZVwiLGNvZXJjZTp7ZnJvbTpbXCJudW1iZXJcIixcInN0cmluZ1wiXSxtZXRob2QoZSx0KXtsZXR7c2NoZW1hOnJ9PXQ7cmV0dXJue3ZhbHVlOmkucGFyc2UoZSxyLl9mbGFncy5mb3JtYXQpfHxlfX19LHZhbGlkYXRlKGUsdCl7bGV0e3NjaGVtYTpyLGVycm9yOnMscHJlZnM6bn09dDtpZihlIGluc3RhbmNlb2YgRGF0ZSYmIWlzTmFOKGUuZ2V0VGltZSgpKSlyZXR1cm47Y29uc3Qgbz1yLl9mbGFncy5mb3JtYXQ7cmV0dXJuIG4uY29udmVydCYmbyYmXCJzdHJpbmdcIj09dHlwZW9mIGU/e3ZhbHVlOmUsZXJyb3JzOnMoXCJkYXRlLmZvcm1hdFwiLHtmb3JtYXQ6b30pfTp7dmFsdWU6ZSxlcnJvcnM6cyhcImRhdGUuYmFzZVwiKX19LHJ1bGVzOntjb21wYXJlOnttZXRob2Q6ITEsdmFsaWRhdGUoZSx0LHIscyl7bGV0e2RhdGU6bn09cix7bmFtZTphLG9wZXJhdG9yOmksYXJnczpsfT1zO2NvbnN0IGM9XCJub3dcIj09PW4/RGF0ZS5ub3coKTpuLmdldFRpbWUoKTtyZXR1cm4gby5jb21wYXJlKGUuZ2V0VGltZSgpLGMsaSk/ZTp0LmVycm9yKFwiZGF0ZS5cIithLHtsaW1pdDpsLmRhdGUsdmFsdWU6ZX0pfSxhcmdzOlt7bmFtZTpcImRhdGVcIixyZWY6ITAsbm9ybWFsaXplOmU9Plwibm93XCI9PT1lP2U6aS5wYXJzZShlKSxhc3NlcnQ6ZT0+bnVsbCE9PWUsbWVzc2FnZTpcIm11c3QgaGF2ZSBhIHZhbGlkIGRhdGUgZm9ybWF0XCJ9XX0sZm9ybWF0OnttZXRob2QoZSl7cmV0dXJuIHMoW1wiaXNvXCIsXCJqYXZhc2NyaXB0XCIsXCJ1bml4XCJdLmluY2x1ZGVzKGUpLFwiVW5rbm93biBkYXRlIGZvcm1hdFwiLGUpLHRoaXMuJF9zZXRGbGFnKFwiZm9ybWF0XCIsZSl9fSxncmVhdGVyOnttZXRob2QoZSl7cmV0dXJuIHRoaXMuJF9hZGRSdWxlKHtuYW1lOlwiZ3JlYXRlclwiLG1ldGhvZDpcImNvbXBhcmVcIixhcmdzOntkYXRlOmV9LG9wZXJhdG9yOlwiPlwifSl9fSxpc286e21ldGhvZCgpe3JldHVybiB0aGlzLmZvcm1hdChcImlzb1wiKX19LGxlc3M6e21ldGhvZChlKXtyZXR1cm4gdGhpcy4kX2FkZFJ1bGUoe25hbWU6XCJsZXNzXCIsbWV0aG9kOlwiY29tcGFyZVwiLGFyZ3M6e2RhdGU6ZX0sb3BlcmF0b3I6XCI8XCJ9KX19LG1heDp7bWV0aG9kKGUpe3JldHVybiB0aGlzLiRfYWRkUnVsZSh7bmFtZTpcIm1heFwiLG1ldGhvZDpcImNvbXBhcmVcIixhcmdzOntkYXRlOmV9LG9wZXJhdG9yOlwiPD1cIn0pfX0sbWluOnttZXRob2QoZSl7cmV0dXJuIHRoaXMuJF9hZGRSdWxlKHtuYW1lOlwibWluXCIsbWV0aG9kOlwiY29tcGFyZVwiLGFyZ3M6e2RhdGU6ZX0sb3BlcmF0b3I6XCI+PVwifSl9fSx0aW1lc3RhbXA6e21ldGhvZCgpe2xldCBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpcImphdmFzY3JpcHRcIjtyZXR1cm4gcyhbXCJqYXZhc2NyaXB0XCIsXCJ1bml4XCJdLmluY2x1ZGVzKGUpLCdcInR5cGVcIiBtdXN0IGJlIG9uZSBvZiBcImphdmFzY3JpcHQsIHVuaXhcIicpLHRoaXMuZm9ybWF0KGUpfX19LGNhc3Q6e251bWJlcjp7ZnJvbTppLmlzRGF0ZSx0bzooZSx0KT0+ZS5nZXRUaW1lKCl9LHN0cmluZzp7ZnJvbTppLmlzRGF0ZSx0byhlLHQpe2xldHtwcmVmczpyfT10O3JldHVybiBhLmRhdGUoZSxyKX19fSxtZXNzYWdlczp7XCJkYXRlLmJhc2VcIjonXCJ7eyNsYWJlbH19XCIgbXVzdCBiZSBhIHZhbGlkIGRhdGUnLFwiZGF0ZS5mb3JtYXRcIjonXCJ7eyNsYWJlbH19XCIgbXVzdCBiZSBpbiB7bXNnKFwiZGF0ZS5mb3JtYXQuXCIgKyAjZm9ybWF0KSB8fCAjZm9ybWF0fSBmb3JtYXQnLFwiZGF0ZS5ncmVhdGVyXCI6J1wie3sjbGFiZWx9fVwiIG11c3QgYmUgZ3JlYXRlciB0aGFuIFwie3sjbGltaXR9fVwiJyxcImRhdGUubGVzc1wiOidcInt7I2xhYmVsfX1cIiBtdXN0IGJlIGxlc3MgdGhhbiBcInt7I2xpbWl0fX1cIicsXCJkYXRlLm1heFwiOidcInt7I2xhYmVsfX1cIiBtdXN0IGJlIGxlc3MgdGhhbiBvciBlcXVhbCB0byBcInt7I2xpbWl0fX1cIicsXCJkYXRlLm1pblwiOidcInt7I2xhYmVsfX1cIiBtdXN0IGJlIGxhcmdlciB0aGFuIG9yIGVxdWFsIHRvIFwie3sjbGltaXR9fVwiJyxcImRhdGUuZm9ybWF0Lmlzb1wiOlwiSVNPIDg2MDEgZGF0ZVwiLFwiZGF0ZS5mb3JtYXQuamF2YXNjcmlwdFwiOlwidGltZXN0YW1wIG9yIG51bWJlciBvZiBtaWxsaXNlY29uZHNcIixcImRhdGUuZm9ybWF0LnVuaXhcIjpcInRpbWVzdGFtcCBvciBudW1iZXIgb2Ygc2Vjb25kc1wifX0pLGkucGFyc2U9ZnVuY3Rpb24oZSx0KXtpZihlIGluc3RhbmNlb2YgRGF0ZSlyZXR1cm4gZTtpZihcInN0cmluZ1wiIT10eXBlb2YgZSYmKGlzTmFOKGUpfHwhaXNGaW5pdGUoZSkpKXJldHVybiBudWxsO2lmKC9eXFxzKiQvLnRlc3QoZSkpcmV0dXJuIG51bGw7aWYoXCJpc29cIj09PXQpcmV0dXJuIG8uaXNJc29EYXRlKGUpP2kuZGF0ZShlLnRvU3RyaW5nKCkpOm51bGw7Y29uc3Qgcj1lO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlJiYvXlsrLV0/XFxkKyhcXC5cXGQrKT8kLy50ZXN0KGUpJiYoZT1wYXJzZUZsb2F0KGUpKSx0KXtpZihcImphdmFzY3JpcHRcIj09PXQpcmV0dXJuIGkuZGF0ZSgxKmUpO2lmKFwidW5peFwiPT09dClyZXR1cm4gaS5kYXRlKDFlMyplKTtpZihcInN0cmluZ1wiPT10eXBlb2YgcilyZXR1cm4gbnVsbH1yZXR1cm4gaS5kYXRlKGUpfSxpLmRhdGU9ZnVuY3Rpb24oZSl7Y29uc3QgdD1uZXcgRGF0ZShlKTtyZXR1cm4gaXNOYU4odC5nZXRUaW1lKCkpP251bGw6dH19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtjb25zdCBzPXIoMCksbj1yKDIyKTtlLmV4cG9ydHM9bi5leHRlbmQoe3R5cGU6XCJmdW5jdGlvblwiLHByb3BlcnRpZXM6e3R5cGVvZjpcImZ1bmN0aW9uXCJ9LHJ1bGVzOnthcml0eTp7bWV0aG9kKGUpe3JldHVybiBzKE51bWJlci5pc1NhZmVJbnRlZ2VyKGUpJiZlPj0wLFwibiBtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlclwiKSx0aGlzLiRfYWRkUnVsZSh7bmFtZTpcImFyaXR5XCIsYXJnczp7bjplfX0pfSx2YWxpZGF0ZShlLHQscil7bGV0e246c309cjtyZXR1cm4gZS5sZW5ndGg9PT1zP2U6dC5lcnJvcihcImZ1bmN0aW9uLmFyaXR5XCIse246c30pfX0sY2xhc3M6e21ldGhvZCgpe3JldHVybiB0aGlzLiRfYWRkUnVsZShcImNsYXNzXCIpfSx2YWxpZGF0ZTooZSx0KT0+L15cXHMqY2xhc3NcXHMvLnRlc3QoZS50b1N0cmluZygpKT9lOnQuZXJyb3IoXCJmdW5jdGlvbi5jbGFzc1wiLHt2YWx1ZTplfSl9LG1pbkFyaXR5OnttZXRob2QoZSl7cmV0dXJuIHMoTnVtYmVyLmlzU2FmZUludGVnZXIoZSkmJmU+MCxcIm4gbXVzdCBiZSBhIHN0cmljdCBwb3NpdGl2ZSBpbnRlZ2VyXCIpLHRoaXMuJF9hZGRSdWxlKHtuYW1lOlwibWluQXJpdHlcIixhcmdzOntuOmV9fSl9LHZhbGlkYXRlKGUsdCxyKXtsZXR7bjpzfT1yO3JldHVybiBlLmxlbmd0aD49cz9lOnQuZXJyb3IoXCJmdW5jdGlvbi5taW5Bcml0eVwiLHtuOnN9KX19LG1heEFyaXR5OnttZXRob2QoZSl7cmV0dXJuIHMoTnVtYmVyLmlzU2FmZUludGVnZXIoZSkmJmU+PTAsXCJuIG11c3QgYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyXCIpLHRoaXMuJF9hZGRSdWxlKHtuYW1lOlwibWF4QXJpdHlcIixhcmdzOntuOmV9fSl9LHZhbGlkYXRlKGUsdCxyKXtsZXR7bjpzfT1yO3JldHVybiBlLmxlbmd0aDw9cz9lOnQuZXJyb3IoXCJmdW5jdGlvbi5tYXhBcml0eVwiLHtuOnN9KX19fSxtZXNzYWdlczp7XCJmdW5jdGlvbi5hcml0eVwiOidcInt7I2xhYmVsfX1cIiBtdXN0IGhhdmUgYW4gYXJpdHkgb2Yge3sjbn19JyxcImZ1bmN0aW9uLmNsYXNzXCI6J1wie3sjbGFiZWx9fVwiIG11c3QgYmUgYSBjbGFzcycsXCJmdW5jdGlvbi5tYXhBcml0eVwiOidcInt7I2xhYmVsfX1cIiBtdXN0IGhhdmUgYW4gYXJpdHkgbGVzc2VyIG9yIGVxdWFsIHRvIHt7I259fScsXCJmdW5jdGlvbi5taW5Bcml0eVwiOidcInt7I2xhYmVsfX1cIiBtdXN0IGhhdmUgYW4gYXJpdHkgZ3JlYXRlciBvciBlcXVhbCB0byB7eyNufX0nfX0pfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7Y29uc3Qgcz1yKDApLG49cigyKSxvPXIoMjApLGE9cigxMCksaT17fTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtsZXQgcj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06e307aWYocyhlJiZcIm9iamVjdFwiPT10eXBlb2YgZSxcIkludmFsaWQgZGVmYXVsdHMgdmFsdWU6IG11c3QgYmUgYW4gb2JqZWN0XCIpLHMoIXR8fCEwPT09dHx8XCJvYmplY3RcIj09dHlwZW9mIHQsXCJJbnZhbGlkIHNvdXJjZSB2YWx1ZTogbXVzdCBiZSB0cnVlLCBmYWxzeSBvciBhbiBvYmplY3RcIikscyhcIm9iamVjdFwiPT10eXBlb2YgcixcIkludmFsaWQgb3B0aW9uczogbXVzdCBiZSBhbiBvYmplY3RcIiksIXQpcmV0dXJuIG51bGw7aWYoci5zaGFsbG93KXJldHVybiBpLmFwcGx5VG9EZWZhdWx0c1dpdGhTaGFsbG93KGUsdCxyKTtjb25zdCBhPW4oZSk7aWYoITA9PT10KXJldHVybiBhO2NvbnN0IGw9dm9pZCAwIT09ci5udWxsT3ZlcnJpZGUmJnIubnVsbE92ZXJyaWRlO3JldHVybiBvKGEsdCx7bnVsbE92ZXJyaWRlOmwsbWVyZ2VBcnJheXM6ITF9KX0saS5hcHBseVRvRGVmYXVsdHNXaXRoU2hhbGxvdz1mdW5jdGlvbihlLHQscil7Y29uc3QgaT1yLnNoYWxsb3c7cyhBcnJheS5pc0FycmF5KGkpLFwiSW52YWxpZCBrZXlzXCIpLChyPU9iamVjdC5hc3NpZ24oe30scikpLnNoYWxsb3c9ITE7Y29uc3QgbD1uKGUse3NoYWxsb3c6aX0pO2lmKCEwPT09dClyZXR1cm4gbDtjb25zdCBjPWEuc3RvcmUodCxpKTtyZXR1cm4gbyhsLHQse21lcmdlQXJyYXlzOiExLG51bGxPdmVycmlkZTohMX0pLGEucmVzdG9yZShsLHQsYyksbH19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtjb25zdCBzPXIoMCksbj17fTtlLmV4cG9ydHM9Y2xhc3N7Y29uc3RydWN0b3IoKXt0aGlzLl9pdGVtcz1bXSx0aGlzLm5vZGVzPVtdfWFkZChlLHQpe2NvbnN0IHI9W10uY29uY2F0KCh0PXR8fHt9KS5iZWZvcmV8fFtdKSxuPVtdLmNvbmNhdCh0LmFmdGVyfHxbXSksbz10Lmdyb3VwfHxcIj9cIixhPXQuc29ydHx8MDtzKCFyLmluY2x1ZGVzKG8pLFwiSXRlbSBjYW5ub3QgY29tZSBiZWZvcmUgaXRzZWxmOiBcIi5jb25jYXQobykpLHMoIXIuaW5jbHVkZXMoXCI/XCIpLFwiSXRlbSBjYW5ub3QgY29tZSBiZWZvcmUgdW5hc3NvY2lhdGVkIGl0ZW1zXCIpLHMoIW4uaW5jbHVkZXMobyksXCJJdGVtIGNhbm5vdCBjb21lIGFmdGVyIGl0c2VsZjogXCIuY29uY2F0KG8pKSxzKCFuLmluY2x1ZGVzKFwiP1wiKSxcIkl0ZW0gY2Fubm90IGNvbWUgYWZ0ZXIgdW5hc3NvY2lhdGVkIGl0ZW1zXCIpLEFycmF5LmlzQXJyYXkoZSl8fChlPVtlXSk7Zm9yKGNvbnN0IHQgb2YgZSl7Y29uc3QgZT17c2VxOnRoaXMuX2l0ZW1zLmxlbmd0aCxzb3J0OmEsYmVmb3JlOnIsYWZ0ZXI6bixncm91cDpvLG5vZGU6dH07dGhpcy5faXRlbXMucHVzaChlKX1jb25zdCBpPXRoaXMuX3NvcnQoKTtyZXR1cm4gcyhpLFwiaXRlbVwiLFwiP1wiIT09bz9cImFkZGVkIGludG8gZ3JvdXAgXCIuY29uY2F0KG8pOlwiXCIsXCJjcmVhdGVkIGEgZGVwZW5kZW5jaWVzIGVycm9yXCIpLHRoaXMubm9kZXN9bWVyZ2UoZSl7QXJyYXkuaXNBcnJheShlKXx8KGU9W2VdKTtmb3IoY29uc3QgdCBvZiBlKWlmKHQpZm9yKGNvbnN0IGUgb2YgdC5faXRlbXMpdGhpcy5faXRlbXMucHVzaChPYmplY3QuYXNzaWduKHt9LGUpKTt0aGlzLl9pdGVtcy5zb3J0KG4ubWVyZ2VTb3J0KTtmb3IobGV0IGU9MDtlPHRoaXMuX2l0ZW1zLmxlbmd0aDsrK2UpdGhpcy5faXRlbXNbZV0uc2VxPWU7Y29uc3QgdD10aGlzLl9zb3J0KCk7cmV0dXJuIHModCxcIm1lcmdlIGNyZWF0ZWQgYSBkZXBlbmRlbmNpZXMgZXJyb3JcIiksdGhpcy5ub2Rlc31fc29ydCgpe2NvbnN0IGU9e30sdD1PYmplY3QuY3JlYXRlKG51bGwpLHI9T2JqZWN0LmNyZWF0ZShudWxsKTtmb3IoY29uc3QgcyBvZiB0aGlzLl9pdGVtcyl7Y29uc3Qgbj1zLnNlcSxvPXMuZ3JvdXA7cltvXT1yW29dfHxbXSxyW29dLnB1c2gobiksZVtuXT1zLmJlZm9yZTtmb3IoY29uc3QgZSBvZiBzLmFmdGVyKXRbZV09dFtlXXx8W10sdFtlXS5wdXNoKG4pfWZvcihjb25zdCB0IGluIGUpe2NvbnN0IHM9W107Zm9yKGNvbnN0IG4gaW4gZVt0XSl7Y29uc3Qgbz1lW3RdW25dO3Jbb109cltvXXx8W10scy5wdXNoKC4uLnJbb10pfWVbdF09c31mb3IoY29uc3QgcyBpbiB0KWlmKHJbc10pZm9yKGNvbnN0IG4gb2YgcltzXSllW25dLnB1c2goLi4udFtzXSk7Y29uc3Qgcz17fTtmb3IoY29uc3QgdCBpbiBlKXtjb25zdCByPWVbdF07Zm9yKGNvbnN0IGUgb2YgcilzW2VdPXNbZV18fFtdLHNbZV0ucHVzaCh0KX1jb25zdCBuPXt9LG89W107Zm9yKGxldCBlPTA7ZTx0aGlzLl9pdGVtcy5sZW5ndGg7KytlKXtsZXQgdD1lO2lmKHNbZV0pe3Q9bnVsbDtmb3IobGV0IGU9MDtlPHRoaXMuX2l0ZW1zLmxlbmd0aDsrK2Upe2lmKCEwPT09bltlXSljb250aW51ZTtzW2VdfHwoc1tlXT1bXSk7Y29uc3Qgcj1zW2VdLmxlbmd0aDtsZXQgbz0wO2ZvcihsZXQgdD0wO3Q8cjsrK3QpbltzW2VdW3RdXSYmKytvO2lmKG89PT1yKXt0PWU7YnJlYWt9fX1udWxsIT09dCYmKG5bdF09ITAsby5wdXNoKHQpKX1pZihvLmxlbmd0aCE9PXRoaXMuX2l0ZW1zLmxlbmd0aClyZXR1cm4hMTtjb25zdCBhPXt9O2Zvcihjb25zdCBlIG9mIHRoaXMuX2l0ZW1zKWFbZS5zZXFdPWU7dGhpcy5faXRlbXM9W10sdGhpcy5ub2Rlcz1bXTtmb3IoY29uc3QgZSBvZiBvKXtjb25zdCB0PWFbZV07dGhpcy5ub2Rlcy5wdXNoKHQubm9kZSksdGhpcy5faXRlbXMucHVzaCh0KX1yZXR1cm4hMH19LG4ubWVyZ2VTb3J0PShlLHQpPT5lLnNvcnQ9PT10LnNvcnQ/MDplLnNvcnQ8dC5zb3J0Py0xOjF9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtjb25zdCBzPXIoMCksbj1yKDMpLG89cigxKSxhPXIoNyksaT1yKDQpLGw9e307ZS5leHBvcnRzPW4uZXh0ZW5kKHt0eXBlOlwibGlua1wiLHByb3BlcnRpZXM6e3NjaGVtYUNoYWluOiEwfSx0ZXJtczp7bGluazp7aW5pdDpudWxsLG1hbmlmZXN0Olwic2luZ2xlXCIscmVnaXN0ZXI6ITF9fSxhcmdzOihlLHQpPT5lLnJlZih0KSx2YWxpZGF0ZShlLHQpe2xldHtzY2hlbWE6cixzdGF0ZTpuLHByZWZzOm99PXQ7cyhyLiRfdGVybXMubGluayxcIlVuaW5pdGlhbGl6ZWQgbGluayBzY2hlbWFcIik7Y29uc3QgYT1sLmdlbmVyYXRlKHIsZSxuLG8pLGk9ci4kX3Rlcm1zLmxpbmtbMF0ucmVmO3JldHVybiBhLiRfdmFsaWRhdGUoZSxuLm5lc3QoYSxcImxpbms6XCIuY29uY2F0KGkuZGlzcGxheSxcIjpcIikuY29uY2F0KGEudHlwZSkpLG8pfSxnZW5lcmF0ZTooZSx0LHIscyk9PmwuZ2VuZXJhdGUoZSx0LHIscykscnVsZXM6e3JlZjp7bWV0aG9kKGUpe3MoIXRoaXMuJF90ZXJtcy5saW5rLFwiQ2Fubm90IHJlaW5pdGlhbGl6ZSBzY2hlbWFcIiksZT1hLnJlZihlKSxzKFwidmFsdWVcIj09PWUudHlwZXx8XCJsb2NhbFwiPT09ZS50eXBlLFwiSW52YWxpZCByZWZlcmVuY2UgdHlwZTpcIixlLnR5cGUpLHMoXCJsb2NhbFwiPT09ZS50eXBlfHxcInJvb3RcIj09PWUuYW5jZXN0b3J8fGUuYW5jZXN0b3I+MCxcIkxpbmsgY2Fubm90IHJlZmVyZW5jZSBpdHNlbGZcIik7Y29uc3QgdD10aGlzLmNsb25lKCk7cmV0dXJuIHQuJF90ZXJtcy5saW5rPVt7cmVmOmV9XSx0fX0scmVsYXRpdmU6e21ldGhvZCgpe2xldCBlPSEoYXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0pfHxhcmd1bWVudHNbMF07cmV0dXJuIHRoaXMuJF9zZXRGbGFnKFwicmVsYXRpdmVcIixlKX19fSxvdmVycmlkZXM6e2NvbmNhdChlKXtzKHRoaXMuJF90ZXJtcy5saW5rLFwiVW5pbml0aWFsaXplZCBsaW5rIHNjaGVtYVwiKSxzKG8uaXNTY2hlbWEoZSksXCJJbnZhbGlkIHNjaGVtYSBvYmplY3RcIikscyhcImxpbmtcIiE9PWUudHlwZSxcIkNhbm5vdCBtZXJnZSB0eXBlIGxpbmsgd2l0aCBhbm90aGVyIGxpbmtcIik7Y29uc3QgdD10aGlzLmNsb25lKCk7cmV0dXJuIHQuJF90ZXJtcy53aGVuc3x8KHQuJF90ZXJtcy53aGVucz1bXSksdC4kX3Rlcm1zLndoZW5zLnB1c2goe2NvbmNhdDplfSksdC4kX211dGF0ZVJlYnVpbGQoKX19LG1hbmlmZXN0OntidWlsZDooZSx0KT0+KHModC5saW5rLFwiSW52YWxpZCBsaW5rIGRlc2NyaXB0aW9uIG1pc3NpbmcgbGlua1wiKSxlLnJlZih0LmxpbmspKX19KSxsLmdlbmVyYXRlPWZ1bmN0aW9uKGUsdCxyLHMpe2xldCBuPXIubWFpbnN0YXkubGlua3MuZ2V0KGUpO2lmKG4pcmV0dXJuIG4uX2dlbmVyYXRlKHQscixzKS5zY2hlbWE7Y29uc3Qgbz1lLiRfdGVybXMubGlua1swXS5yZWYse3BlcnNwZWN0aXZlOmEscGF0aDppfT1sLnBlcnNwZWN0aXZlKG8scik7bC5hc3NlcnQoYSxcIndoaWNoIGlzIG91dHNpZGUgb2Ygc2NoZW1hIGJvdW5kYXJpZXNcIixvLGUscixzKTt0cnl7bj1pLmxlbmd0aD9hLiRfcmVhY2goaSk6YX1jYXRjaCh0KXtsLmFzc2VydCghMSxcInRvIG5vbi1leGlzdGluZyBzY2hlbWFcIixvLGUscixzKX1yZXR1cm4gbC5hc3NlcnQoXCJsaW5rXCIhPT1uLnR5cGUsXCJ3aGljaCBpcyBhbm90aGVyIGxpbmtcIixvLGUscixzKSxlLl9mbGFncy5yZWxhdGl2ZXx8ci5tYWluc3RheS5saW5rcy5zZXQoZSxuKSxuLl9nZW5lcmF0ZSh0LHIscykuc2NoZW1hfSxsLnBlcnNwZWN0aXZlPWZ1bmN0aW9uKGUsdCl7aWYoXCJsb2NhbFwiPT09ZS50eXBlKXtmb3IoY29uc3QgciBvZiB0LnNjaGVtYXMpe2NvbnN0e3NjaGVtYTp0LGtleTpzfT1yO2lmKCh0Ll9mbGFncy5pZHx8cyk9PT1lLnBhdGhbMF0pcmV0dXJue3BlcnNwZWN0aXZlOnQscGF0aDplLnBhdGguc2xpY2UoMSl9O2lmKHQuJF90ZXJtcy5zaGFyZWQpZm9yKGNvbnN0IHIgb2YgdC4kX3Rlcm1zLnNoYXJlZClpZihyLl9mbGFncy5pZD09PWUucGF0aFswXSlyZXR1cm57cGVyc3BlY3RpdmU6cixwYXRoOmUucGF0aC5zbGljZSgxKX19cmV0dXJue3BlcnNwZWN0aXZlOm51bGwscGF0aDpudWxsfX1yZXR1cm5cInJvb3RcIj09PWUuYW5jZXN0b3I/e3BlcnNwZWN0aXZlOnQuc2NoZW1hc1t0LnNjaGVtYXMubGVuZ3RoLTFdLnNjaGVtYSxwYXRoOmUucGF0aH06e3BlcnNwZWN0aXZlOnQuc2NoZW1hc1tlLmFuY2VzdG9yXSYmdC5zY2hlbWFzW2UuYW5jZXN0b3JdLnNjaGVtYSxwYXRoOmUucGF0aH19LGwuYXNzZXJ0PWZ1bmN0aW9uKGUsdCxyLG4sbyxhKXtlfHxzKCExLCdcIicuY29uY2F0KGkubGFiZWwobi5fZmxhZ3MsbyxhKSwnXCIgY29udGFpbnMgbGluayByZWZlcmVuY2UgXCInKS5jb25jYXQoci5kaXNwbGF5LCdcIiAnKS5jb25jYXQodCkpfX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2NvbnN0IHM9cigwKSxuPXIoMyksbz1yKDEpLGE9e251bWJlclJ4Oi9eXFxzKlsrLV0/KD86KD86XFxkKyg/OlxcLlxcZCopPyl8KD86XFwuXFxkKykpKD86ZShbKy1dP1xcZCspKT9cXHMqJC9pLHByZWNpc2lvblJ4Oi8oPzpcXC4oXFxkKykpPyg/OltlRV0oWystXT9cXGQrKSk/JC99O2UuZXhwb3J0cz1uLmV4dGVuZCh7dHlwZTpcIm51bWJlclwiLGZsYWdzOnt1bnNhZmU6e2RlZmF1bHQ6ITF9fSxjb2VyY2U6e2Zyb206XCJzdHJpbmdcIixtZXRob2QoZSx0KXtsZXR7c2NoZW1hOnIsZXJyb3I6c309dDtjb25zdCBuPWUubWF0Y2goYS5udW1iZXJSeCk7aWYoIW4pcmV0dXJuO2U9ZS50cmltKCk7Y29uc3Qgbz17dmFsdWU6cGFyc2VGbG9hdChlKX07aWYoMD09PW8udmFsdWUmJihvLnZhbHVlPTApLCFyLl9mbGFncy51bnNhZmUpaWYoZS5tYXRjaCgvZS9pKSl7aWYoYS5ub3JtYWxpemVFeHBvbmVudChcIlwiLmNvbmNhdChvLnZhbHVlL01hdGgucG93KDEwLG5bMV0pLFwiZVwiKS5jb25jYXQoblsxXSkpIT09YS5ub3JtYWxpemVFeHBvbmVudChlKSlyZXR1cm4gby5lcnJvcnM9cyhcIm51bWJlci51bnNhZmVcIiksb31lbHNle2NvbnN0IHQ9by52YWx1ZS50b1N0cmluZygpO2lmKHQubWF0Y2goL2UvaSkpcmV0dXJuIG87aWYodCE9PWEubm9ybWFsaXplRGVjaW1hbChlKSlyZXR1cm4gby5lcnJvcnM9cyhcIm51bWJlci51bnNhZmVcIiksb31yZXR1cm4gb319LHZhbGlkYXRlKGUsdCl7bGV0e3NjaGVtYTpyLGVycm9yOnMscHJlZnM6bn09dDtpZihlPT09MS8wfHxlPT09LTEvMClyZXR1cm57dmFsdWU6ZSxlcnJvcnM6cyhcIm51bWJlci5pbmZpbml0eVwiKX07aWYoIW8uaXNOdW1iZXIoZSkpcmV0dXJue3ZhbHVlOmUsZXJyb3JzOnMoXCJudW1iZXIuYmFzZVwiKX07Y29uc3QgYT17dmFsdWU6ZX07aWYobi5jb252ZXJ0KXtjb25zdCBlPXIuJF9nZXRSdWxlKFwicHJlY2lzaW9uXCIpO2lmKGUpe2NvbnN0IHQ9TWF0aC5wb3coMTAsZS5hcmdzLmxpbWl0KTthLnZhbHVlPU1hdGgucm91bmQoYS52YWx1ZSp0KS90fX1yZXR1cm4gMD09PWEudmFsdWUmJihhLnZhbHVlPTApLCFyLl9mbGFncy51bnNhZmUmJihlPk51bWJlci5NQVhfU0FGRV9JTlRFR0VSfHxlPE51bWJlci5NSU5fU0FGRV9JTlRFR0VSKSYmKGEuZXJyb3JzPXMoXCJudW1iZXIudW5zYWZlXCIpKSxhfSxydWxlczp7Y29tcGFyZTp7bWV0aG9kOiExLHZhbGlkYXRlKGUsdCxyLHMpe2xldHtsaW1pdDpufT1yLHtuYW1lOmEsb3BlcmF0b3I6aSxhcmdzOmx9PXM7cmV0dXJuIG8uY29tcGFyZShlLG4saSk/ZTp0LmVycm9yKFwibnVtYmVyLlwiK2Ese2xpbWl0OmwubGltaXQsdmFsdWU6ZX0pfSxhcmdzOlt7bmFtZTpcImxpbWl0XCIscmVmOiEwLGFzc2VydDpvLmlzTnVtYmVyLG1lc3NhZ2U6XCJtdXN0IGJlIGEgbnVtYmVyXCJ9XX0sZ3JlYXRlcjp7bWV0aG9kKGUpe3JldHVybiB0aGlzLiRfYWRkUnVsZSh7bmFtZTpcImdyZWF0ZXJcIixtZXRob2Q6XCJjb21wYXJlXCIsYXJnczp7bGltaXQ6ZX0sb3BlcmF0b3I6XCI+XCJ9KX19LGludGVnZXI6e21ldGhvZCgpe3JldHVybiB0aGlzLiRfYWRkUnVsZShcImludGVnZXJcIil9LHZhbGlkYXRlOihlLHQpPT5NYXRoLnRydW5jKGUpLWU9PTA/ZTp0LmVycm9yKFwibnVtYmVyLmludGVnZXJcIil9LGxlc3M6e21ldGhvZChlKXtyZXR1cm4gdGhpcy4kX2FkZFJ1bGUoe25hbWU6XCJsZXNzXCIsbWV0aG9kOlwiY29tcGFyZVwiLGFyZ3M6e2xpbWl0OmV9LG9wZXJhdG9yOlwiPFwifSl9fSxtYXg6e21ldGhvZChlKXtyZXR1cm4gdGhpcy4kX2FkZFJ1bGUoe25hbWU6XCJtYXhcIixtZXRob2Q6XCJjb21wYXJlXCIsYXJnczp7bGltaXQ6ZX0sb3BlcmF0b3I6XCI8PVwifSl9fSxtaW46e21ldGhvZChlKXtyZXR1cm4gdGhpcy4kX2FkZFJ1bGUoe25hbWU6XCJtaW5cIixtZXRob2Q6XCJjb21wYXJlXCIsYXJnczp7bGltaXQ6ZX0sb3BlcmF0b3I6XCI+PVwifSl9fSxtdWx0aXBsZTp7bWV0aG9kKGUpe3JldHVybiB0aGlzLiRfYWRkUnVsZSh7bmFtZTpcIm11bHRpcGxlXCIsYXJnczp7YmFzZTplfX0pfSx2YWxpZGF0ZShlLHQscixzKXtsZXR7YmFzZTpufT1yO3JldHVybiBlJW49PTA/ZTp0LmVycm9yKFwibnVtYmVyLm11bHRpcGxlXCIse211bHRpcGxlOnMuYXJncy5iYXNlLHZhbHVlOmV9KX0sYXJnczpbe25hbWU6XCJiYXNlXCIscmVmOiEwLGFzc2VydDplPT5cIm51bWJlclwiPT10eXBlb2YgZSYmaXNGaW5pdGUoZSkmJmU+MCxtZXNzYWdlOlwibXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlclwifV0sbXVsdGk6ITB9LG5lZ2F0aXZlOnttZXRob2QoKXtyZXR1cm4gdGhpcy5zaWduKFwibmVnYXRpdmVcIil9fSxwb3J0OnttZXRob2QoKXtyZXR1cm4gdGhpcy4kX2FkZFJ1bGUoXCJwb3J0XCIpfSx2YWxpZGF0ZTooZSx0KT0+TnVtYmVyLmlzU2FmZUludGVnZXIoZSkmJmU+PTAmJmU8PTY1NTM1P2U6dC5lcnJvcihcIm51bWJlci5wb3J0XCIpfSxwb3NpdGl2ZTp7bWV0aG9kKCl7cmV0dXJuIHRoaXMuc2lnbihcInBvc2l0aXZlXCIpfX0scHJlY2lzaW9uOnttZXRob2QoZSl7cmV0dXJuIHMoTnVtYmVyLmlzU2FmZUludGVnZXIoZSksXCJsaW1pdCBtdXN0IGJlIGFuIGludGVnZXJcIiksdGhpcy4kX2FkZFJ1bGUoe25hbWU6XCJwcmVjaXNpb25cIixhcmdzOntsaW1pdDplfX0pfSx2YWxpZGF0ZShlLHQscil7bGV0e2xpbWl0OnN9PXI7Y29uc3Qgbj1lLnRvU3RyaW5nKCkubWF0Y2goYS5wcmVjaXNpb25SeCk7cmV0dXJuIE1hdGgubWF4KChuWzFdP25bMV0ubGVuZ3RoOjApLShuWzJdP3BhcnNlSW50KG5bMl0sMTApOjApLDApPD1zP2U6dC5lcnJvcihcIm51bWJlci5wcmVjaXNpb25cIix7bGltaXQ6cyx2YWx1ZTplfSl9LGNvbnZlcnQ6ITB9LHNpZ246e21ldGhvZChlKXtyZXR1cm4gcyhbXCJuZWdhdGl2ZVwiLFwicG9zaXRpdmVcIl0uaW5jbHVkZXMoZSksXCJJbnZhbGlkIHNpZ25cIixlKSx0aGlzLiRfYWRkUnVsZSh7bmFtZTpcInNpZ25cIixhcmdzOntzaWduOmV9fSl9LHZhbGlkYXRlKGUsdCxyKXtsZXR7c2lnbjpzfT1yO3JldHVyblwibmVnYXRpdmVcIj09PXMmJmU8MHx8XCJwb3NpdGl2ZVwiPT09cyYmZT4wP2U6dC5lcnJvcihcIm51bWJlci5cIi5jb25jYXQocykpfX0sdW5zYWZlOnttZXRob2QoKXtsZXQgZT0hKGFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdKXx8YXJndW1lbnRzWzBdO3JldHVybiBzKFwiYm9vbGVhblwiPT10eXBlb2YgZSxcImVuYWJsZWQgbXVzdCBiZSBhIGJvb2xlYW5cIiksdGhpcy4kX3NldEZsYWcoXCJ1bnNhZmVcIixlKX19fSxjYXN0OntzdHJpbmc6e2Zyb206ZT0+XCJudW1iZXJcIj09dHlwZW9mIGUsdG86KGUsdCk9PmUudG9TdHJpbmcoKX19LG1lc3NhZ2VzOntcIm51bWJlci5iYXNlXCI6J1wie3sjbGFiZWx9fVwiIG11c3QgYmUgYSBudW1iZXInLFwibnVtYmVyLmdyZWF0ZXJcIjonXCJ7eyNsYWJlbH19XCIgbXVzdCBiZSBncmVhdGVyIHRoYW4ge3sjbGltaXR9fScsXCJudW1iZXIuaW5maW5pdHlcIjonXCJ7eyNsYWJlbH19XCIgY2Fubm90IGJlIGluZmluaXR5JyxcIm51bWJlci5pbnRlZ2VyXCI6J1wie3sjbGFiZWx9fVwiIG11c3QgYmUgYW4gaW50ZWdlcicsXCJudW1iZXIubGVzc1wiOidcInt7I2xhYmVsfX1cIiBtdXN0IGJlIGxlc3MgdGhhbiB7eyNsaW1pdH19JyxcIm51bWJlci5tYXhcIjonXCJ7eyNsYWJlbH19XCIgbXVzdCBiZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8ge3sjbGltaXR9fScsXCJudW1iZXIubWluXCI6J1wie3sjbGFiZWx9fVwiIG11c3QgYmUgbGFyZ2VyIHRoYW4gb3IgZXF1YWwgdG8ge3sjbGltaXR9fScsXCJudW1iZXIubXVsdGlwbGVcIjonXCJ7eyNsYWJlbH19XCIgbXVzdCBiZSBhIG11bHRpcGxlIG9mIHt7I211bHRpcGxlfX0nLFwibnVtYmVyLm5lZ2F0aXZlXCI6J1wie3sjbGFiZWx9fVwiIG11c3QgYmUgYSBuZWdhdGl2ZSBudW1iZXInLFwibnVtYmVyLnBvcnRcIjonXCJ7eyNsYWJlbH19XCIgbXVzdCBiZSBhIHZhbGlkIHBvcnQnLFwibnVtYmVyLnBvc2l0aXZlXCI6J1wie3sjbGFiZWx9fVwiIG11c3QgYmUgYSBwb3NpdGl2ZSBudW1iZXInLFwibnVtYmVyLnByZWNpc2lvblwiOidcInt7I2xhYmVsfX1cIiBtdXN0IGhhdmUgbm8gbW9yZSB0aGFuIHt7I2xpbWl0fX0gZGVjaW1hbCBwbGFjZXMnLFwibnVtYmVyLnVuc2FmZVwiOidcInt7I2xhYmVsfX1cIiBtdXN0IGJlIGEgc2FmZSBudW1iZXInfX0pLGEubm9ybWFsaXplRXhwb25lbnQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVwbGFjZSgvRS8sXCJlXCIpLnJlcGxhY2UoL1xcLihcXGQqWzEtOV0pPzArZS8sXCIuJDFlXCIpLnJlcGxhY2UoL1xcLmUvLFwiZVwiKS5yZXBsYWNlKC9lXFwrLyxcImVcIikucmVwbGFjZSgvXlxcKy8sXCJcIikucmVwbGFjZSgvXigtPykwKyhbMS05XSkvLFwiJDEkMlwiKX0sYS5ub3JtYWxpemVEZWNpbWFsPWZ1bmN0aW9uKGUpe3JldHVybihlPWUucmVwbGFjZSgvXlxcKy8sXCJcIikucmVwbGFjZSgvXFwuMCskLyxcIlwiKS5yZXBsYWNlKC9eKC0/KVxcLihbXlxcLl0qKSQvLFwiJDEwLiQyXCIpLnJlcGxhY2UoL14oLT8pMCsoWzEtOV0pLyxcIiQxJDJcIikpLmluY2x1ZGVzKFwiLlwiKSYmZS5lbmRzV2l0aChcIjBcIikmJihlPWUucmVwbGFjZSgvMCskLyxcIlwiKSksXCItMFwiPT09ZT9cIjBcIjplfX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2NvbnN0IHM9cigyMik7ZS5leHBvcnRzPXMuZXh0ZW5kKHt0eXBlOlwib2JqZWN0XCIsY2FzdDp7bWFwOntmcm9tOmU9PmUmJlwib2JqZWN0XCI9PXR5cGVvZiBlLHRvOihlLHQpPT5uZXcgTWFwKE9iamVjdC5lbnRyaWVzKGUpKX19fSl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBzKGUsdCl7dmFyIHI9T2JqZWN0LmtleXMoZSk7aWYoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyl7dmFyIHM9T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhlKTt0JiYocz1zLmZpbHRlcigoZnVuY3Rpb24odCl7cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSx0KS5lbnVtZXJhYmxlfSkpKSxyLnB1c2guYXBwbHkocixzKX1yZXR1cm4gcn1mdW5jdGlvbiBuKGUpe2Zvcih2YXIgdD0xO3Q8YXJndW1lbnRzLmxlbmd0aDt0Kyspe3ZhciByPW51bGwhPWFyZ3VtZW50c1t0XT9hcmd1bWVudHNbdF06e307dCUyP3MociwhMCkuZm9yRWFjaCgoZnVuY3Rpb24odCl7byhlLHQsclt0XSl9KSk6T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnM/T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZSxPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhyKSk6cyhyKS5mb3JFYWNoKChmdW5jdGlvbih0KXtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iocix0KSl9KSl9cmV0dXJuIGV9ZnVuY3Rpb24gbyhlLHQscil7cmV0dXJuIHQgaW4gZT9PYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHt2YWx1ZTpyLGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwfSk6ZVt0XT1yLGV9Y29uc3QgYT1yKDApLGk9cigyMyksbD1yKDQ3KSxjPXIoMjUpLHU9cig0OCksZj1yKDMpLGg9cigxKSxtPXIoNDkpLGQ9cigyNikscD17dGxkczp1IGluc3RhbmNlb2YgU2V0JiZ7dGxkczp7YWxsb3c6dSxkZW55Om51bGx9fSxiYXNlNjRSZWdleDp7dHJ1ZTp7dHJ1ZTovXig/OltcXHdcXC1dezJ9W1xcd1xcLV17Mn0pKig/OltcXHdcXC1dezJ9PT18W1xcd1xcLV17M309KT8kLyxmYWxzZTovXig/OltBLVphLXowLTkrXFwvXXsyfVtBLVphLXowLTkrXFwvXXsyfSkqKD86W0EtWmEtejAtOStcXC9dezJ9PT18W0EtWmEtejAtOStcXC9dezN9PSk/JC99LGZhbHNlOnt0cnVlOi9eKD86W1xcd1xcLV17Mn1bXFx3XFwtXXsyfSkqKD86W1xcd1xcLV17Mn0oPT0pP3xbXFx3XFwtXXszfT0/KT8kLyxmYWxzZTovXig/OltBLVphLXowLTkrXFwvXXsyfVtBLVphLXowLTkrXFwvXXsyfSkqKD86W0EtWmEtejAtOStcXC9dezJ9KD09KT98W0EtWmEtejAtOStcXC9dezN9PT8pPyQvfX0sZGF0YVVyaVJlZ2V4Oi9eZGF0YTpbXFx3Ky4tXStcXC9bXFx3Ky4tXSs7KChjaGFyc2V0PVtcXHctXSt8YmFzZTY0KSwpPyguKikkLyxoZXhSZWdleDovXlthLWYwLTldKyQvaSxob3N0UmVnZXg6L14oKFthLXpBLVowLTldfFthLXpBLVowLTldW2EtekEtWjAtOVxcLV0qW2EtekEtWjAtOV0pXFwuKSooW0EtWmEtejAtOV18W0EtWmEtejAtOV1bQS1aYS16MC05XFwtXSpbQS1aYS16MC05XSkkLyxpcFJlZ2V4Om0uY3JlYXRlSXBSZWdleChbXCJpcHY0XCIsXCJpcHY2XCIsXCJpcHZmdXR1cmVcIl0sXCJvcHRpb25hbFwiKSxpc29EdXJhdGlvblJlZ2V4Oi9eUCg/ISQpKFxcZCtZKT8oXFxkK00pPyhcXGQrVyk/KFxcZCtEKT8oVCg/PVxcZCkoXFxkK0gpPyhcXGQrTSk/KFxcZCtTKT8pPyQvLGd1aWRCcmFja2V0czp7XCJ7XCI6XCJ9XCIsXCJbXCI6XCJdXCIsXCIoXCI6XCIpXCIsXCJcIjpcIlwifSxndWlkVmVyc2lvbnM6e3V1aWR2MTpcIjFcIix1dWlkdjI6XCIyXCIsdXVpZHYzOlwiM1wiLHV1aWR2NDpcIjRcIix1dWlkdjU6XCI1XCJ9LGNpZHJQcmVzZW5jZXM6W1wicmVxdWlyZWRcIixcIm9wdGlvbmFsXCIsXCJmb3JiaWRkZW5cIl0sbm9ybWFsaXphdGlvbkZvcm1zOltcIk5GQ1wiLFwiTkZEXCIsXCJORktDXCIsXCJORktEXCJdfTtlLmV4cG9ydHM9Zi5leHRlbmQoe3R5cGU6XCJzdHJpbmdcIixmbGFnczp7aW5zZW5zaXRpdmU6e2RlZmF1bHQ6ITF9LHRydW5jYXRlOntkZWZhdWx0OiExfX0sdGVybXM6e3JlcGxhY2VtZW50czp7aW5pdDpudWxsfX0sY29lcmNlOntmcm9tOlwic3RyaW5nXCIsbWV0aG9kKGUsdCl7bGV0e3NjaGVtYTpyLHN0YXRlOnMscHJlZnM6bn09dDtjb25zdCBvPXIuJF9nZXRSdWxlKFwibm9ybWFsaXplXCIpO28mJihlPWUubm9ybWFsaXplKG8uYXJncy5mb3JtKSk7Y29uc3QgYT1yLiRfZ2V0UnVsZShcImNhc2VcIik7YSYmKGU9XCJ1cHBlclwiPT09YS5hcmdzLmRpcmVjdGlvbj9lLnRvTG9jYWxlVXBwZXJDYXNlKCk6ZS50b0xvY2FsZUxvd2VyQ2FzZSgpKTtjb25zdCBpPXIuJF9nZXRSdWxlKFwidHJpbVwiKTtpZihpJiZpLmFyZ3MuZW5hYmxlZCYmKGU9ZS50cmltKCkpLHIuJF90ZXJtcy5yZXBsYWNlbWVudHMpZm9yKGNvbnN0IHQgb2Ygci4kX3Rlcm1zLnJlcGxhY2VtZW50cyllPWUucmVwbGFjZSh0LnBhdHRlcm4sdC5yZXBsYWNlbWVudCk7Y29uc3QgbD1yLiRfZ2V0UnVsZShcImhleFwiKTtpZihsJiZsLmFyZ3Mub3B0aW9ucy5ieXRlQWxpZ25lZCYmZS5sZW5ndGglMiE9MCYmKGU9XCIwXCIuY29uY2F0KGUpKSxyLiRfZ2V0UnVsZShcImlzb0RhdGVcIikpe2NvbnN0IHQ9cC5pc29EYXRlKGUpO3QmJihlPXQpfWlmKHIuX2ZsYWdzLnRydW5jYXRlKXtjb25zdCB0PXIuJF9nZXRSdWxlKFwibWF4XCIpO2lmKHQpe2xldCBvPXQuYXJncy5saW1pdDtpZihoLmlzUmVzb2x2YWJsZShvKSYmKG89by5yZXNvbHZlKGUscyxuKSwhaC5saW1pdChvKSkpcmV0dXJue3ZhbHVlOmUsZXJyb3JzOnIuJF9jcmVhdGVFcnJvcihcImFueS5yZWZcIixvLHtyZWY6dC5hcmdzLmxpbWl0LGFyZzpcImxpbWl0XCIscmVhc29uOlwibXVzdCBiZSBhIHBvc2l0aXZlIGludGVnZXJcIn0scyxuKX07ZT1lLnNsaWNlKDAsbyl9fXJldHVybnt2YWx1ZTplfX19LHZhbGlkYXRlKGUsdCl7bGV0e2Vycm9yOnJ9PXQ7cmV0dXJuXCJzdHJpbmdcIiE9dHlwZW9mIGU/e3ZhbHVlOmUsZXJyb3JzOnIoXCJzdHJpbmcuYmFzZVwiKX06XCJcIj09PWU/e3ZhbHVlOmUsZXJyb3JzOnIoXCJzdHJpbmcuZW1wdHlcIil9OnZvaWQgMH0scnVsZXM6e2FscGhhbnVtOnttZXRob2QoKXtyZXR1cm4gdGhpcy4kX2FkZFJ1bGUoXCJhbHBoYW51bVwiKX0sdmFsaWRhdGU6KGUsdCk9Pi9eW2EtekEtWjAtOV0rJC8udGVzdChlKT9lOnQuZXJyb3IoXCJzdHJpbmcuYWxwaGFudW1cIil9LGJhc2U2NDp7bWV0aG9kKCl7bGV0IGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9O3JldHVybiBoLmFzc2VydE9wdGlvbnMoZSxbXCJwYWRkaW5nUmVxdWlyZWRcIixcInVybFNhZmVcIl0pLGU9bih7dXJsU2FmZTohMSxwYWRkaW5nUmVxdWlyZWQ6ITB9LGUpLGEoXCJib29sZWFuXCI9PXR5cGVvZiBlLnBhZGRpbmdSZXF1aXJlZCxcInBhZGRpbmdSZXF1aXJlZCBtdXN0IGJlIGJvb2xlYW5cIiksYShcImJvb2xlYW5cIj09dHlwZW9mIGUudXJsU2FmZSxcInVybFNhZmUgbXVzdCBiZSBib29sZWFuXCIpLHRoaXMuJF9hZGRSdWxlKHtuYW1lOlwiYmFzZTY0XCIsYXJnczp7b3B0aW9uczplfX0pfSx2YWxpZGF0ZShlLHQscil7bGV0e29wdGlvbnM6c309cjtyZXR1cm4gcC5iYXNlNjRSZWdleFtzLnBhZGRpbmdSZXF1aXJlZF1bcy51cmxTYWZlXS50ZXN0KGUpP2U6dC5lcnJvcihcInN0cmluZy5iYXNlNjRcIil9fSxjYXNlOnttZXRob2QoZSl7cmV0dXJuIGEoW1wibG93ZXJcIixcInVwcGVyXCJdLmluY2x1ZGVzKGUpLFwiSW52YWxpZCBjYXNlOlwiLGUpLHRoaXMuJF9hZGRSdWxlKHtuYW1lOlwiY2FzZVwiLGFyZ3M6e2RpcmVjdGlvbjplfX0pfSx2YWxpZGF0ZShlLHQscil7bGV0e2RpcmVjdGlvbjpzfT1yO3JldHVyblwibG93ZXJcIj09PXMmJmU9PT1lLnRvTG9jYWxlTG93ZXJDYXNlKCl8fFwidXBwZXJcIj09PXMmJmU9PT1lLnRvTG9jYWxlVXBwZXJDYXNlKCk/ZTp0LmVycm9yKFwic3RyaW5nLlwiLmNvbmNhdChzLFwiY2FzZVwiKSl9LGNvbnZlcnQ6ITB9LGNyZWRpdENhcmQ6e21ldGhvZCgpe3JldHVybiB0aGlzLiRfYWRkUnVsZShcImNyZWRpdENhcmRcIil9LHZhbGlkYXRlKGUsdCl7bGV0IHI9ZS5sZW5ndGgscz0wLG49MTtmb3IoO3ItLTspe2NvbnN0IHQ9ZS5jaGFyQXQocikqbjtzKz10LTkqKHQ+OSksbl49M31yZXR1cm4gcz4wJiZzJTEwPT0wP2U6dC5lcnJvcihcInN0cmluZy5jcmVkaXRDYXJkXCIpfX0sZGF0YVVyaTp7bWV0aG9kKCl7bGV0IGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9O3JldHVybiBoLmFzc2VydE9wdGlvbnMoZSxbXCJwYWRkaW5nUmVxdWlyZWRcIl0pLGU9bih7cGFkZGluZ1JlcXVpcmVkOiEwfSxlKSxhKFwiYm9vbGVhblwiPT10eXBlb2YgZS5wYWRkaW5nUmVxdWlyZWQsXCJwYWRkaW5nUmVxdWlyZWQgbXVzdCBiZSBib29sZWFuXCIpLHRoaXMuJF9hZGRSdWxlKHtuYW1lOlwiZGF0YVVyaVwiLGFyZ3M6e29wdGlvbnM6ZX19KX0sdmFsaWRhdGUoZSx0LHIpe2xldHtvcHRpb25zOnN9PXI7Y29uc3Qgbj1lLm1hdGNoKHAuZGF0YVVyaVJlZ2V4KTtpZihuKXtpZighblsyXSlyZXR1cm4gZTtpZihcImJhc2U2NFwiIT09blsyXSlyZXR1cm4gZTtpZihwLmJhc2U2NFJlZ2V4W3MucGFkZGluZ1JlcXVpcmVkXS5mYWxzZS50ZXN0KG5bM10pKXJldHVybiBlfXJldHVybiB0LmVycm9yKFwic3RyaW5nLmRhdGFVcmlcIil9fSxkb21haW46e21ldGhvZChlKXtlJiZoLmFzc2VydE9wdGlvbnMoZSxbXCJhbGxvd1VuaWNvZGVcIixcIm1pbkRvbWFpblNlZ21lbnRzXCIsXCJ0bGRzXCJdKTtjb25zdCB0PXAuYWRkcmVzc09wdGlvbnMoZSk7cmV0dXJuIHRoaXMuJF9hZGRSdWxlKHtuYW1lOlwiZG9tYWluXCIsYXJnczp7b3B0aW9uczplfSxhZGRyZXNzOnR9KX0sdmFsaWRhdGUoZSx0LHIscyl7bGV0e2FkZHJlc3M6bn09cztyZXR1cm4gaS5pc1ZhbGlkKGUsbik/ZTp0LmVycm9yKFwic3RyaW5nLmRvbWFpblwiKX19LGVtYWlsOnttZXRob2QoKXtsZXQgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e307aC5hc3NlcnRPcHRpb25zKGUsW1wiYWxsb3dVbmljb2RlXCIsXCJpZ25vcmVMZW5ndGhcIixcIm1pbkRvbWFpblNlZ21lbnRzXCIsXCJtdWx0aXBsZVwiLFwic2VwYXJhdG9yXCIsXCJ0bGRzXCJdKSxhKHZvaWQgMD09PWUubXVsdGlwbGV8fFwiYm9vbGVhblwiPT10eXBlb2YgZS5tdWx0aXBsZSxcIm11bHRpcGxlIG9wdGlvbiBtdXN0IGJlIGFuIGJvb2xlYW5cIik7Y29uc3QgdD1wLmFkZHJlc3NPcHRpb25zKGUpLHI9bmV3IFJlZ0V4cChcIlxcXFxzKltcIi5jb25jYXQoZS5zZXBhcmF0b3I/YyhlLnNlcGFyYXRvcik6XCIsXCIsXCJdXFxcXHMqXCIpKTtyZXR1cm4gdGhpcy4kX2FkZFJ1bGUoe25hbWU6XCJlbWFpbFwiLGFyZ3M6e29wdGlvbnM6ZX0scmVnZXg6cixhZGRyZXNzOnR9KX0sdmFsaWRhdGUoZSx0LHIscyl7bGV0e29wdGlvbnM6bn09cix7cmVnZXg6byxhZGRyZXNzOmF9PXM7Y29uc3QgaT1uLm11bHRpcGxlP2Uuc3BsaXQobyk6W2VdLGM9W107Zm9yKGNvbnN0IGUgb2YgaSlsLmlzVmFsaWQoZSxhKXx8Yy5wdXNoKGUpO3JldHVybiBjLmxlbmd0aD90LmVycm9yKFwic3RyaW5nLmVtYWlsXCIse3ZhbHVlOmUsaW52YWxpZHM6Y30pOmV9fSxndWlkOnthbGlhczpcInV1aWRcIixtZXRob2QoKXtsZXQgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e307aC5hc3NlcnRPcHRpb25zKGUsW1widmVyc2lvblwiXSk7bGV0IHQ9XCJcIjtpZihlLnZlcnNpb24pe2NvbnN0IHI9W10uY29uY2F0KGUudmVyc2lvbik7YShyLmxlbmd0aD49MSxcInZlcnNpb24gbXVzdCBoYXZlIGF0IGxlYXN0IDEgdmFsaWQgdmVyc2lvbiBzcGVjaWZpZWRcIik7Y29uc3Qgcz1uZXcgU2V0O2ZvcihsZXQgZT0wO2U8ci5sZW5ndGg7KytlKXtjb25zdCBuPXJbZV07YShcInN0cmluZ1wiPT10eXBlb2YgbixcInZlcnNpb24gYXQgcG9zaXRpb24gXCIrZStcIiBtdXN0IGJlIGEgc3RyaW5nXCIpO2NvbnN0IG89cC5ndWlkVmVyc2lvbnNbbi50b0xvd2VyQ2FzZSgpXTthKG8sXCJ2ZXJzaW9uIGF0IHBvc2l0aW9uIFwiK2UrXCIgbXVzdCBiZSBvbmUgb2YgXCIrT2JqZWN0LmtleXMocC5ndWlkVmVyc2lvbnMpLmpvaW4oXCIsIFwiKSksYSghcy5oYXMobyksXCJ2ZXJzaW9uIGF0IHBvc2l0aW9uIFwiK2UrXCIgbXVzdCBub3QgYmUgYSBkdXBsaWNhdGVcIiksdCs9byxzLmFkZChvKX19Y29uc3Qgcj1uZXcgUmVnRXhwKFwiXihbXFxcXFt7XFxcXChdPylbMC05QS1GXXs4fShbOi1dPylbMC05QS1GXXs0fVxcXFwyP1tcIi5jb25jYXQodHx8XCIwLTlBLUZcIixcIl1bMC05QS1GXXszfVxcXFwyP1tcIikuY29uY2F0KHQ/XCI4OUFCXCI6XCIwLTlBLUZcIixcIl1bMC05QS1GXXszfVxcXFwyP1swLTlBLUZdezEyfShbXFxcXF19XFxcXCldPykkXCIpLFwiaVwiKTtyZXR1cm4gdGhpcy4kX2FkZFJ1bGUoe25hbWU6XCJndWlkXCIsYXJnczp7b3B0aW9uczplfSxyZWdleDpyfSl9LHZhbGlkYXRlKGUsdCxyLHMpe2xldHtyZWdleDpufT1zO2NvbnN0IG89bi5leGVjKGUpO3JldHVybiBvP3AuZ3VpZEJyYWNrZXRzW29bMV1dIT09b1tvLmxlbmd0aC0xXT90LmVycm9yKFwic3RyaW5nLmd1aWRcIik6ZTp0LmVycm9yKFwic3RyaW5nLmd1aWRcIil9fSxoZXg6e21ldGhvZCgpe2xldCBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp7fTtyZXR1cm4gaC5hc3NlcnRPcHRpb25zKGUsW1wiYnl0ZUFsaWduZWRcIl0pLGU9bih7Ynl0ZUFsaWduZWQ6ITF9LGUpLGEoXCJib29sZWFuXCI9PXR5cGVvZiBlLmJ5dGVBbGlnbmVkLFwiYnl0ZUFsaWduZWQgbXVzdCBiZSBib29sZWFuXCIpLHRoaXMuJF9hZGRSdWxlKHtuYW1lOlwiaGV4XCIsYXJnczp7b3B0aW9uczplfX0pfSx2YWxpZGF0ZShlLHQscil7bGV0e29wdGlvbnM6c309cjtyZXR1cm4gcC5oZXhSZWdleC50ZXN0KGUpP3MuYnl0ZUFsaWduZWQmJmUubGVuZ3RoJTIhPTA/dC5lcnJvcihcInN0cmluZy5oZXhBbGlnblwiKTplOnQuZXJyb3IoXCJzdHJpbmcuaGV4XCIpfX0saG9zdG5hbWU6e21ldGhvZCgpe3JldHVybiB0aGlzLiRfYWRkUnVsZShcImhvc3RuYW1lXCIpfSx2YWxpZGF0ZTooZSx0KT0+ZS5sZW5ndGg8PTI1NSYmcC5ob3N0UmVnZXgudGVzdChlKXx8cC5pcFJlZ2V4LnRlc3QoZSk/ZTp0LmVycm9yKFwic3RyaW5nLmhvc3RuYW1lXCIpfSxpbnNlbnNpdGl2ZTp7bWV0aG9kKCl7cmV0dXJuIHRoaXMuJF9zZXRGbGFnKFwiaW5zZW5zaXRpdmVcIiwhMCl9fSxpcDp7bWV0aG9kKCl7bGV0IGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9O2guYXNzZXJ0T3B0aW9ucyhlLFtcImNpZHJcIixcInZlcnNpb25cIl0pLGU9T2JqZWN0LmFzc2lnbih7fSxlKTtsZXQgdCxyPXAuaXBSZWdleDtpZihlLmNpZHI/KGEoXCJzdHJpbmdcIj09dHlwZW9mIGUuY2lkcixcImNpZHIgbXVzdCBiZSBhIHN0cmluZ1wiKSxlLmNpZHI9ZS5jaWRyLnRvTG93ZXJDYXNlKCksYShwLmNpZHJQcmVzZW5jZXMuaW5jbHVkZXMoZS5jaWRyKSxcImNpZHIgbXVzdCBiZSBvbmUgb2YgXCIrcC5jaWRyUHJlc2VuY2VzLmpvaW4oXCIsIFwiKSksZS52ZXJzaW9ufHxcIm9wdGlvbmFsXCI9PT1lLmNpZHJ8fChyPW0uY3JlYXRlSXBSZWdleChbXCJpcHY0XCIsXCJpcHY2XCIsXCJpcHZmdXR1cmVcIl0sZS5jaWRyKSkpOmUuY2lkcj1cIm9wdGlvbmFsXCIsZS52ZXJzaW9uKXtBcnJheS5pc0FycmF5KGUudmVyc2lvbil8fChlLnZlcnNpb249W2UudmVyc2lvbl0pLGEoZS52ZXJzaW9uLmxlbmd0aD49MSxcInZlcnNpb24gbXVzdCBoYXZlIGF0IGxlYXN0IDEgdmVyc2lvbiBzcGVjaWZpZWRcIiksdD1bXTtmb3IobGV0IHI9MDtyPGUudmVyc2lvbi5sZW5ndGg7KytyKXtsZXQgcz1lLnZlcnNpb25bcl07YShcInN0cmluZ1wiPT10eXBlb2YgcyxcInZlcnNpb24gYXQgcG9zaXRpb24gXCIrcitcIiBtdXN0IGJlIGEgc3RyaW5nXCIpLHM9cy50b0xvd2VyQ2FzZSgpLGEobS52ZXJzaW9uc1tzXSxcInZlcnNpb24gYXQgcG9zaXRpb24gXCIrcitcIiBtdXN0IGJlIG9uZSBvZiBcIitPYmplY3Qua2V5cyhtLnZlcnNpb25zKS5qb2luKFwiLCBcIikpLHQucHVzaChzKX10PUFycmF5LmZyb20obmV3IFNldCh0KSkscj1tLmNyZWF0ZUlwUmVnZXgodCxlLmNpZHIpfXJldHVybiB0aGlzLiRfYWRkUnVsZSh7bmFtZTpcImlwXCIsYXJnczp7b3B0aW9uczplfSx2ZXJzaW9uczp0LHJlZ2V4OnJ9KX0sdmFsaWRhdGUoZSx0LHIscyl7bGV0e29wdGlvbnM6bn09cix7dmVyc2lvbnM6byxyZWdleDphfT1zO3JldHVybiBhLnRlc3QoZSk/ZTpvP3QuZXJyb3IoXCJzdHJpbmcuaXBWZXJzaW9uXCIse3ZhbHVlOmUsY2lkcjpuLmNpZHIsdmVyc2lvbjpvfSk6dC5lcnJvcihcInN0cmluZy5pcFwiLHt2YWx1ZTplLGNpZHI6bi5jaWRyfSl9fSxpc29EYXRlOnttZXRob2QoKXtyZXR1cm4gdGhpcy4kX2FkZFJ1bGUoXCJpc29EYXRlXCIpfSx2YWxpZGF0ZShlLHQpe2xldHtlcnJvcjpyfT10O3JldHVybiBwLmlzb0RhdGUoZSk/ZTpyKFwic3RyaW5nLmlzb0RhdGVcIil9fSxpc29EdXJhdGlvbjp7bWV0aG9kKCl7cmV0dXJuIHRoaXMuJF9hZGRSdWxlKFwiaXNvRHVyYXRpb25cIil9LHZhbGlkYXRlOihlLHQpPT5wLmlzb0R1cmF0aW9uUmVnZXgudGVzdChlKT9lOnQuZXJyb3IoXCJzdHJpbmcuaXNvRHVyYXRpb25cIil9LGxlbmd0aDp7bWV0aG9kKGUsdCl7cmV0dXJuIHAubGVuZ3RoKHRoaXMsXCJsZW5ndGhcIixlLFwiPVwiLHQpfSx2YWxpZGF0ZShlLHQscixzKXtsZXR7bGltaXQ6bixlbmNvZGluZzpvfT1yLHtuYW1lOmEsb3BlcmF0b3I6aSxhcmdzOmx9PXM7Y29uc3QgYz0hbyYmZS5sZW5ndGg7cmV0dXJuIGguY29tcGFyZShjLG4saSk/ZTp0LmVycm9yKFwic3RyaW5nLlwiK2Ese2xpbWl0OmwubGltaXQsdmFsdWU6ZSxlbmNvZGluZzpvfSl9LGFyZ3M6W3tuYW1lOlwibGltaXRcIixyZWY6ITAsYXNzZXJ0OmgubGltaXQsbWVzc2FnZTpcIm11c3QgYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyXCJ9LFwiZW5jb2RpbmdcIl19LGxvd2VyY2FzZTp7bWV0aG9kKCl7cmV0dXJuIHRoaXMuY2FzZShcImxvd2VyXCIpfX0sbWF4OnttZXRob2QoZSx0KXtyZXR1cm4gcC5sZW5ndGgodGhpcyxcIm1heFwiLGUsXCI8PVwiLHQpfSxhcmdzOltcImxpbWl0XCIsXCJlbmNvZGluZ1wiXX0sbWluOnttZXRob2QoZSx0KXtyZXR1cm4gcC5sZW5ndGgodGhpcyxcIm1pblwiLGUsXCI+PVwiLHQpfSxhcmdzOltcImxpbWl0XCIsXCJlbmNvZGluZ1wiXX0sbm9ybWFsaXplOnttZXRob2QoKXtsZXQgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06XCJORkNcIjtyZXR1cm4gYShwLm5vcm1hbGl6YXRpb25Gb3Jtcy5pbmNsdWRlcyhlKSxcIm5vcm1hbGl6YXRpb24gZm9ybSBtdXN0IGJlIG9uZSBvZiBcIitwLm5vcm1hbGl6YXRpb25Gb3Jtcy5qb2luKFwiLCBcIikpLHRoaXMuJF9hZGRSdWxlKHtuYW1lOlwibm9ybWFsaXplXCIsYXJnczp7Zm9ybTplfX0pfSx2YWxpZGF0ZShlLHQscil7bGV0e2Vycm9yOnN9PXQse2Zvcm06bn09cjtyZXR1cm4gZT09PWUubm9ybWFsaXplKG4pP2U6cyhcInN0cmluZy5ub3JtYWxpemVcIix7dmFsdWU6ZSxmb3JtOm59KX0sY29udmVydDohMH0scGF0dGVybjp7YWxpYXM6XCJyZWdleFwiLG1ldGhvZChlKXtsZXQgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06e307YShlIGluc3RhbmNlb2YgUmVnRXhwLFwicmVnZXggbXVzdCBiZSBhIFJlZ0V4cFwiKSxhKCFlLmZsYWdzLmluY2x1ZGVzKFwiZ1wiKSYmIWUuZmxhZ3MuaW5jbHVkZXMoXCJ5XCIpLFwicmVnZXggc2hvdWxkIG5vdCB1c2UgZ2xvYmFsIG9yIHN0aWNreSBtb2RlXCIpLFwic3RyaW5nXCI9PXR5cGVvZiB0JiYodD17bmFtZTp0fSksaC5hc3NlcnRPcHRpb25zKHQsW1wiaW52ZXJ0XCIsXCJuYW1lXCJdKTtjb25zdCByPVtcInN0cmluZy5wYXR0ZXJuXCIsdC5pbnZlcnQ/XCIuaW52ZXJ0XCI6XCJcIix0Lm5hbWU/XCIubmFtZVwiOlwiLmJhc2VcIl0uam9pbihcIlwiKTtyZXR1cm4gdGhpcy4kX2FkZFJ1bGUoe25hbWU6XCJwYXR0ZXJuXCIsYXJnczp7cmVnZXg6ZSxvcHRpb25zOnR9LGVycm9yQ29kZTpyfSl9LHZhbGlkYXRlKGUsdCxyLHMpe2xldHtyZWdleDpuLG9wdGlvbnM6b309cix7ZXJyb3JDb2RlOmF9PXM7cmV0dXJuIG4udGVzdChlKV5vLmludmVydD9lOnQuZXJyb3IoYSx7bmFtZTpvLm5hbWUscmVnZXg6bix2YWx1ZTplfSl9LGFyZ3M6W1wicmVnZXhcIixcIm9wdGlvbnNcIl0sbXVsdGk6ITB9LHJlcGxhY2U6e21ldGhvZChlLHQpe1wic3RyaW5nXCI9PXR5cGVvZiBlJiYoZT1uZXcgUmVnRXhwKGMoZSksXCJnXCIpKSxhKGUgaW5zdGFuY2VvZiBSZWdFeHAsXCJwYXR0ZXJuIG11c3QgYmUgYSBSZWdFeHBcIiksYShcInN0cmluZ1wiPT10eXBlb2YgdCxcInJlcGxhY2VtZW50IG11c3QgYmUgYSBTdHJpbmdcIik7Y29uc3Qgcj10aGlzLmNsb25lKCk7cmV0dXJuIHIuJF90ZXJtcy5yZXBsYWNlbWVudHN8fChyLiRfdGVybXMucmVwbGFjZW1lbnRzPVtdKSxyLiRfdGVybXMucmVwbGFjZW1lbnRzLnB1c2goe3BhdHRlcm46ZSxyZXBsYWNlbWVudDp0fSkscn19LHRva2VuOnttZXRob2QoKXtyZXR1cm4gdGhpcy4kX2FkZFJ1bGUoXCJ0b2tlblwiKX0sdmFsaWRhdGU6KGUsdCk9Pi9eXFx3KyQvLnRlc3QoZSk/ZTp0LmVycm9yKFwic3RyaW5nLnRva2VuXCIpfSx0cmltOnttZXRob2QoKXtsZXQgZT0hKGFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdKXx8YXJndW1lbnRzWzBdO3JldHVybiBhKFwiYm9vbGVhblwiPT10eXBlb2YgZSxcImVuYWJsZWQgbXVzdCBiZSBhIGJvb2xlYW5cIiksdGhpcy4kX2FkZFJ1bGUoe25hbWU6XCJ0cmltXCIsYXJnczp7ZW5hYmxlZDplfX0pfSx2YWxpZGF0ZShlLHQscil7bGV0e2VuYWJsZWQ6c309cjtyZXR1cm4gcyYmZSE9PWUudHJpbSgpP3QuZXJyb3IoXCJzdHJpbmcudHJpbVwiKTplfSxjb252ZXJ0OiEwfSx0cnVuY2F0ZTp7bWV0aG9kKCl7bGV0IGU9IShhcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXSl8fGFyZ3VtZW50c1swXTtyZXR1cm4gYShcImJvb2xlYW5cIj09dHlwZW9mIGUsXCJlbmFibGVkIG11c3QgYmUgYSBib29sZWFuXCIpLHRoaXMuJF9zZXRGbGFnKFwidHJ1bmNhdGVcIixlKX19LHVwcGVyY2FzZTp7bWV0aG9kKCl7cmV0dXJuIHRoaXMuY2FzZShcInVwcGVyXCIpfX0sdXJpOnttZXRob2QoKXtsZXQgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e307aC5hc3NlcnRPcHRpb25zKGUsW1wiYWxsb3dSZWxhdGl2ZVwiLFwiYWxsb3dRdWVyeVNxdWFyZUJyYWNrZXRzXCIsXCJkb21haW5cIixcInJlbGF0aXZlT25seVwiLFwic2NoZW1lXCJdKSxlLmRvbWFpbiYmaC5hc3NlcnRPcHRpb25zKGUuZG9tYWluLFtcImFsbG93VW5pY29kZVwiLFwibWluRG9tYWluU2VnbWVudHNcIixcInRsZHNcIl0pO2NvbnN0IHQ9ZC5jcmVhdGVSZWdleChlKSxyPWUuZG9tYWluP3AuYWRkcmVzc09wdGlvbnMoZS5kb21haW4pOm51bGw7cmV0dXJuIHRoaXMuJF9hZGRSdWxlKHtuYW1lOlwidXJpXCIsYXJnczp7b3B0aW9uczplfSxyZWdleDp0LGRvbWFpbjpyfSl9LHZhbGlkYXRlKGUsdCxyLHMpe2xldHtvcHRpb25zOm59PXIse3JlZ2V4Om8sZG9tYWluOmF9PXM7aWYoW1wiaHR0cDovXCIsXCJodHRwczovXCJdLmluY2x1ZGVzKGUpKXJldHVybiB0LmVycm9yKFwic3RyaW5nLnVyaVwiKTtjb25zdCBsPW8uZXhlYyhlKTtyZXR1cm4gbD9hJiYhaS5pc1ZhbGlkKGxbMV0sYSk/dC5lcnJvcihcInN0cmluZy5kb21haW5cIix7dmFsdWU6bFsxXX0pOmU6bi5yZWxhdGl2ZU9ubHk/dC5lcnJvcihcInN0cmluZy51cmlSZWxhdGl2ZU9ubHlcIik6bi5zY2hlbWU/dC5lcnJvcihcInN0cmluZy51cmlDdXN0b21TY2hlbWVcIix7c2NoZW1lOm8uc2NoZW1lLHZhbHVlOmV9KTp0LmVycm9yKFwic3RyaW5nLnVyaVwiKX19fSxtYW5pZmVzdDp7YnVpbGQoZSx0KXtpZih0LnJlcGxhY2VtZW50cylmb3IoY29uc3QgciBvZiB0LnJlcGxhY2VtZW50cyl7Y29uc3R7cGF0dGVybjp0LHJlcGxhY2VtZW50OnN9PXI7ZT1lLnJlcGxhY2UodCxzKX1yZXR1cm4gZX19LG1lc3NhZ2VzOntcInN0cmluZy5hbHBoYW51bVwiOidcInt7I2xhYmVsfX1cIiBtdXN0IG9ubHkgY29udGFpbiBhbHBoYS1udW1lcmljIGNoYXJhY3RlcnMnLFwic3RyaW5nLmJhc2VcIjonXCJ7eyNsYWJlbH19XCIgbXVzdCBiZSBhIHN0cmluZycsXCJzdHJpbmcuYmFzZTY0XCI6J1wie3sjbGFiZWx9fVwiIG11c3QgYmUgYSB2YWxpZCBiYXNlNjQgc3RyaW5nJyxcInN0cmluZy5jcmVkaXRDYXJkXCI6J1wie3sjbGFiZWx9fVwiIG11c3QgYmUgYSBjcmVkaXQgY2FyZCcsXCJzdHJpbmcuZGF0YVVyaVwiOidcInt7I2xhYmVsfX1cIiBtdXN0IGJlIGEgdmFsaWQgZGF0YVVyaSBzdHJpbmcnLFwic3RyaW5nLmRvbWFpblwiOidcInt7I2xhYmVsfX1cIiBtdXN0IGNvbnRhaW4gYSB2YWxpZCBkb21haW4gbmFtZScsXCJzdHJpbmcuZW1haWxcIjonXCJ7eyNsYWJlbH19XCIgbXVzdCBiZSBhIHZhbGlkIGVtYWlsJyxcInN0cmluZy5lbXB0eVwiOidcInt7I2xhYmVsfX1cIiBpcyBub3QgYWxsb3dlZCB0byBiZSBlbXB0eScsXCJzdHJpbmcuZ3VpZFwiOidcInt7I2xhYmVsfX1cIiBtdXN0IGJlIGEgdmFsaWQgR1VJRCcsXCJzdHJpbmcuaGV4XCI6J1wie3sjbGFiZWx9fVwiIG11c3Qgb25seSBjb250YWluIGhleGFkZWNpbWFsIGNoYXJhY3RlcnMnLFwic3RyaW5nLmhleEFsaWduXCI6J1wie3sjbGFiZWx9fVwiIGhleCBkZWNvZGVkIHJlcHJlc2VudGF0aW9uIG11c3QgYmUgYnl0ZSBhbGlnbmVkJyxcInN0cmluZy5ob3N0bmFtZVwiOidcInt7I2xhYmVsfX1cIiBtdXN0IGJlIGEgdmFsaWQgaG9zdG5hbWUnLFwic3RyaW5nLmlwXCI6J1wie3sjbGFiZWx9fVwiIG11c3QgYmUgYSB2YWxpZCBpcCBhZGRyZXNzIHdpdGggYSB7eyNjaWRyfX0gQ0lEUicsXCJzdHJpbmcuaXBWZXJzaW9uXCI6J1wie3sjbGFiZWx9fVwiIG11c3QgYmUgYSB2YWxpZCBpcCBhZGRyZXNzIG9mIG9uZSBvZiB0aGUgZm9sbG93aW5nIHZlcnNpb25zIHt7I3ZlcnNpb259fSB3aXRoIGEge3sjY2lkcn19IENJRFInLFwic3RyaW5nLmlzb0RhdGVcIjonXCJ7eyNsYWJlbH19XCIgbXVzdCBiZSBpbiBpc28gZm9ybWF0JyxcInN0cmluZy5pc29EdXJhdGlvblwiOidcInt7I2xhYmVsfX1cIiBtdXN0IGJlIGEgdmFsaWQgSVNPIDg2MDEgZHVyYXRpb24nLFwic3RyaW5nLmxlbmd0aFwiOidcInt7I2xhYmVsfX1cIiBsZW5ndGggbXVzdCBiZSB7eyNsaW1pdH19IGNoYXJhY3RlcnMgbG9uZycsXCJzdHJpbmcubG93ZXJjYXNlXCI6J1wie3sjbGFiZWx9fVwiIG11c3Qgb25seSBjb250YWluIGxvd2VyY2FzZSBjaGFyYWN0ZXJzJyxcInN0cmluZy5tYXhcIjonXCJ7eyNsYWJlbH19XCIgbGVuZ3RoIG11c3QgYmUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHt7I2xpbWl0fX0gY2hhcmFjdGVycyBsb25nJyxcInN0cmluZy5taW5cIjonXCJ7eyNsYWJlbH19XCIgbGVuZ3RoIG11c3QgYmUgYXQgbGVhc3Qge3sjbGltaXR9fSBjaGFyYWN0ZXJzIGxvbmcnLFwic3RyaW5nLm5vcm1hbGl6ZVwiOidcInt7I2xhYmVsfX1cIiBtdXN0IGJlIHVuaWNvZGUgbm9ybWFsaXplZCBpbiB0aGUge3sjZm9ybX19IGZvcm0nLFwic3RyaW5nLnRva2VuXCI6J1wie3sjbGFiZWx9fVwiIG11c3Qgb25seSBjb250YWluIGFscGhhLW51bWVyaWMgYW5kIHVuZGVyc2NvcmUgY2hhcmFjdGVycycsXCJzdHJpbmcucGF0dGVybi5iYXNlXCI6J1wie3sjbGFiZWx9fVwiIHdpdGggdmFsdWUgXCJ7Wy5dfVwiIGZhaWxzIHRvIG1hdGNoIHRoZSByZXF1aXJlZCBwYXR0ZXJuOiB7eyNyZWdleH19JyxcInN0cmluZy5wYXR0ZXJuLm5hbWVcIjonXCJ7eyNsYWJlbH19XCIgd2l0aCB2YWx1ZSBcIntbLl19XCIgZmFpbHMgdG8gbWF0Y2ggdGhlIHt7I25hbWV9fSBwYXR0ZXJuJyxcInN0cmluZy5wYXR0ZXJuLmludmVydC5iYXNlXCI6J1wie3sjbGFiZWx9fVwiIHdpdGggdmFsdWUgXCJ7Wy5dfVwiIG1hdGNoZXMgdGhlIGludmVydGVkIHBhdHRlcm46IHt7I3JlZ2V4fX0nLFwic3RyaW5nLnBhdHRlcm4uaW52ZXJ0Lm5hbWVcIjonXCJ7eyNsYWJlbH19XCIgd2l0aCB2YWx1ZSBcIntbLl19XCIgbWF0Y2hlcyB0aGUgaW52ZXJ0ZWQge3sjbmFtZX19IHBhdHRlcm4nLFwic3RyaW5nLnRyaW1cIjonXCJ7eyNsYWJlbH19XCIgbXVzdCBub3QgaGF2ZSBsZWFkaW5nIG9yIHRyYWlsaW5nIHdoaXRlc3BhY2UnLFwic3RyaW5nLnVyaVwiOidcInt7I2xhYmVsfX1cIiBtdXN0IGJlIGEgdmFsaWQgdXJpJyxcInN0cmluZy51cmlDdXN0b21TY2hlbWVcIjonXCJ7eyNsYWJlbH19XCIgbXVzdCBiZSBhIHZhbGlkIHVyaSB3aXRoIGEgc2NoZW1lIG1hdGNoaW5nIHRoZSB7eyNzY2hlbWV9fSBwYXR0ZXJuJyxcInN0cmluZy51cmlSZWxhdGl2ZU9ubHlcIjonXCJ7eyNsYWJlbH19XCIgbXVzdCBiZSBhIHZhbGlkIHJlbGF0aXZlIHVyaScsXCJzdHJpbmcudXBwZXJjYXNlXCI6J1wie3sjbGFiZWx9fVwiIG11c3Qgb25seSBjb250YWluIHVwcGVyY2FzZSBjaGFyYWN0ZXJzJ319KSxwLmFkZHJlc3NPcHRpb25zPWZ1bmN0aW9uKGUpe2lmKCFlKXJldHVybiBlO2lmKGEodm9pZCAwPT09ZS5taW5Eb21haW5TZWdtZW50c3x8TnVtYmVyLmlzU2FmZUludGVnZXIoZS5taW5Eb21haW5TZWdtZW50cykmJmUubWluRG9tYWluU2VnbWVudHM+MCxcIm1pbkRvbWFpblNlZ21lbnRzIG11c3QgYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyXCIpLCExPT09ZS50bGRzKXJldHVybiBlO2lmKCEwPT09ZS50bGRzfHx2b2lkIDA9PT1lLnRsZHMpcmV0dXJuIGEocC50bGRzLFwiQnVpbHQtaW4gVExEIGxpc3QgZGlzYWJsZWRcIiksT2JqZWN0LmFzc2lnbih7fSxlLHAudGxkcyk7YShcIm9iamVjdFwiPT10eXBlb2YgZS50bGRzLFwidGxkcyBtdXN0IGJlIHRydWUsIGZhbHNlLCBvciBhbiBvYmplY3RcIik7Y29uc3QgdD1lLnRsZHMuZGVueTtpZih0KXJldHVybiBBcnJheS5pc0FycmF5KHQpJiYoZT1PYmplY3QuYXNzaWduKHt9LGUse3RsZHM6e2Rlbnk6bmV3IFNldCh0KX19KSksYShlLnRsZHMuZGVueSBpbnN0YW5jZW9mIFNldCxcInRsZHMuZGVueSBtdXN0IGJlIGFuIGFycmF5LCBTZXQsIG9yIGJvb2xlYW5cIiksYSghZS50bGRzLmFsbG93LFwiQ2Fubm90IHNwZWNpZnkgYm90aCB0bGRzLmFsbG93IGFuZCB0bGRzLmRlbnkgbGlzdHNcIiksZTtjb25zdCByPWUudGxkcy5hbGxvdztyZXR1cm4gcj8hMD09PXI/KGEocC50bGRzLFwiQnVpbHQtaW4gVExEIGxpc3QgZGlzYWJsZWRcIiksT2JqZWN0LmFzc2lnbih7fSxlLHAudGxkcykpOihBcnJheS5pc0FycmF5KHIpJiYoZT1PYmplY3QuYXNzaWduKHt9LGUse3RsZHM6e2FsbG93Om5ldyBTZXQocil9fSkpLGEoZS50bGRzLmFsbG93IGluc3RhbmNlb2YgU2V0LFwidGxkcy5hbGxvdyBtdXN0IGJlIGFuIGFycmF5LCBTZXQsIG9yIGJvb2xlYW5cIiksZSk6ZX0scC5pc29EYXRlPWZ1bmN0aW9uKGUpe2lmKCFoLmlzSXNvRGF0ZShlKSlyZXR1cm4gbnVsbDtjb25zdCB0PW5ldyBEYXRlKGUpO3JldHVybiBpc05hTih0LmdldFRpbWUoKSk/bnVsbDp0LnRvSVNPU3RyaW5nKCl9LHAubGVuZ3RoPWZ1bmN0aW9uKGUsdCxyLHMsbil7cmV0dXJuIGEoIW58fCExLFwiSW52YWxpZCBlbmNvZGluZzpcIixuKSxlLiRfYWRkUnVsZSh7bmFtZTp0LG1ldGhvZDpcImxlbmd0aFwiLGFyZ3M6e2xpbWl0OnIsZW5jb2Rpbmc6bn0sb3BlcmF0b3I6c30pfX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2NvbnN0IHM9cigyNCksbj1yKDIzKSxvPXtub25Bc2NpaVJ4Oi9bXlxceDAwLVxceDdmXS8sZW5jb2RlcjpuZXcocy5UZXh0RW5jb2Rlcnx8VGV4dEVuY29kZXIpfTt0LmFuYWx5emU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gby5lbWFpbChlLHQpfSx0LmlzVmFsaWQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4hby5lbWFpbChlLHQpfSxvLmVtYWlsPWZ1bmN0aW9uKGUpe2xldCB0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp7fTtpZihcInN0cmluZ1wiIT10eXBlb2YgZSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGlucHV0OiBlbWFpbCBtdXN0IGJlIGEgc3RyaW5nXCIpO2lmKCFlKXJldHVybntlcnJvcjpcIkFkZHJlc3MgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmdcIn07Y29uc3Qgcj0hby5ub25Bc2NpaVJ4LnRlc3QoZSk7aWYoIXIpe2lmKCExPT09dC5hbGxvd1VuaWNvZGUpcmV0dXJue2Vycm9yOlwiQWRkcmVzcyBjb250YWlucyBmb3JiaWRkZW4gVW5pY29kZSBjaGFyYWN0ZXJzXCJ9O2U9ZS5ub3JtYWxpemUoXCJORkNcIil9Y29uc3Qgcz1lLnNwbGl0KFwiQFwiKTtpZigyIT09cy5sZW5ndGgpcmV0dXJue2Vycm9yOnMubGVuZ3RoPjI/XCJBZGRyZXNzIGNhbm5vdCBjb250YWluIG1vcmUgdGhhbiBvbmUgQCBjaGFyYWN0ZXJcIjpcIkFkZHJlc3MgbXVzdCBjb250YWluIG9uZSBAIGNoYXJhY3RlclwifTtjb25zdFthLGldPXM7aWYoIWEpcmV0dXJue2Vycm9yOlwiQWRkcmVzcyBsb2NhbCBwYXJ0IGNhbm5vdCBiZSBlbXB0eVwifTtpZighdC5pZ25vcmVMZW5ndGgpe2lmKGUubGVuZ3RoPjI1NClyZXR1cm57ZXJyb3I6XCJBZGRyZXNzIHRvbyBsb25nXCJ9O2lmKG8uZW5jb2Rlci5lbmNvZGUoYSkubGVuZ3RoPjY0KXJldHVybntlcnJvcjpcIkFkZHJlc3MgbG9jYWwgcGFydCB0b28gbG9uZ1wifX1yZXR1cm4gby5sb2NhbChhLHIpfHxuLmFuYWx5emUoaSx0KX0sby5sb2NhbD1mdW5jdGlvbihlLHQpe2NvbnN0IHI9ZS5zcGxpdChcIi5cIik7Zm9yKGNvbnN0IGUgb2Ygcil7aWYoIWUubGVuZ3RoKXJldHVybntlcnJvcjpcIkFkZHJlc3MgbG9jYWwgcGFydCBjb250YWlucyBlbXB0eSBkb3Qtc2VwYXJhdGVkIHNlZ21lbnRcIn07aWYodCl7aWYoIW8uYXRleHRSeC50ZXN0KGUpKXJldHVybntlcnJvcjpcIkFkZHJlc3MgbG9jYWwgcGFydCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlclwifX1lbHNlIGZvcihjb25zdCB0IG9mIGUpe2lmKG8uYXRleHRSeC50ZXN0KHQpKWNvbnRpbnVlO2NvbnN0IGU9by5iaW5hcnkodCk7aWYoIW8uYXRvbVJ4LnRlc3QoZSkpcmV0dXJue2Vycm9yOlwiQWRkcmVzcyBsb2NhbCBwYXJ0IGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVyXCJ9fX19LG8uYmluYXJ5PWZ1bmN0aW9uKGUpe3JldHVybiBBcnJheS5mcm9tKG8uZW5jb2Rlci5lbmNvZGUoZSkpLm1hcChlPT5TdHJpbmcuZnJvbUNoYXJDb2RlKGUpKS5qb2luKFwiXCIpfSxvLmF0ZXh0Ung9L15bXFx3ISNcXCQlJidcXCpcXCtcXC1cXC89XFw/XFxeYFxce1xcfFxcfX5dKyQvLG8uYXRvbVJ4PW5ldyBSZWdFeHAoW1wiKD86W1xcXFx4YzItXFxcXHhkZl1bXFxcXHg4MC1cXFxceGJmXSlcIixcIig/OlxcXFx4ZTBbXFxcXHhhMC1cXFxceGJmXVtcXFxceDgwLVxcXFx4YmZdKXwoPzpbXFxcXHhlMS1cXFxceGVjXVtcXFxceDgwLVxcXFx4YmZdezJ9KXwoPzpcXFxceGVkW1xcXFx4ODAtXFxcXHg5Zl1bXFxcXHg4MC1cXFxceGJmXSl8KD86W1xcXFx4ZWUtXFxcXHhlZl1bXFxcXHg4MC1cXFxceGJmXXsyfSlcIixcIig/OlxcXFx4ZjBbXFxcXHg5MC1cXFxceGJmXVtcXFxceDgwLVxcXFx4YmZdezJ9KXwoPzpbXFxcXHhmMS1cXFxceGYzXVtcXFxceDgwLVxcXFx4YmZdezN9KXwoPzpcXFxceGY0W1xcXFx4ODAtXFxcXHg4Zl1bXFxcXHg4MC1cXFxceGJmXXsyfSlcIl0uam9pbihcInxcIikpfSxmdW5jdGlvbihlLHQpe30sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2NvbnN0IHM9cigyNik7dC5jaWRycz17aXB2NDp7cmVxdWlyZWQ6XCJcXFxcLyg/OlwiK3MuaXB2NENpZHIrXCIpXCIsb3B0aW9uYWw6XCIoPzpcXFxcLyg/OlwiK3MuaXB2NENpZHIrXCIpKT9cIixmb3JiaWRkZW46XCJcIn0saXB2Njp7cmVxdWlyZWQ6XCJcXFxcL1wiK3MuaXB2NkNpZHIsb3B0aW9uYWw6XCIoPzpcXFxcL1wiK3MuaXB2NkNpZHIrXCIpP1wiLGZvcmJpZGRlbjpcIlwifSxpcHZmdXR1cmU6e3JlcXVpcmVkOlwiXFxcXC9cIitzLmlwdjZDaWRyLG9wdGlvbmFsOlwiKD86XFxcXC9cIitzLmlwdjZDaWRyK1wiKT9cIixmb3JiaWRkZW46XCJcIn19LHQudmVyc2lvbnM9e2lwdjQ6cy5pcHY0YWRkcmVzcyxpcHY2OnMuaXB2NmFkZHJlc3MsaXB2ZnV0dXJlOnMuaXB2RnV0dXJlfSx0LmNyZWF0ZUlwUmVnZXg9ZnVuY3Rpb24oZSxyKXtjb25zdCBzPWUubWFwKGU9PnQudmVyc2lvbnNbZV0rdC5jaWRyc1tlXVtyXSk7cmV0dXJuIG5ldyBSZWdFeHAoXCJeKD86XCIrcy5qb2luKFwifFwiKStcIikkXCIpfX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2NvbnN0IHM9cigwKSxuPXIoMyksbz17fTtvLk1hcD1jbGFzcyBleHRlbmRzIE1hcHtzbGljZSgpe3JldHVybiBuZXcgby5NYXAodGhpcyl9fSxlLmV4cG9ydHM9bi5leHRlbmQoe3R5cGU6XCJzeW1ib2xcIix0ZXJtczp7bWFwOntpbml0Om5ldyBvLk1hcH19LGNvZXJjZTp7bWV0aG9kKGUsdCl7bGV0e3NjaGVtYTpyLGVycm9yOnN9PXQ7Y29uc3Qgbj1yLiRfdGVybXMubWFwLmdldChlKTtyZXR1cm4gbiYmKGU9biksci5fZmxhZ3Mub25seSYmXCJzeW1ib2xcIiE9dHlwZW9mIGU/e3ZhbHVlOmUsZXJyb3JzOnMoXCJzeW1ib2wubWFwXCIse21hcDpyLiRfdGVybXMubWFwfSl9Ont2YWx1ZTplfX19LHZhbGlkYXRlKGUsdCl7bGV0e2Vycm9yOnJ9PXQ7aWYoXCJzeW1ib2xcIiE9dHlwZW9mIGUpcmV0dXJue3ZhbHVlOmUsZXJyb3JzOnIoXCJzeW1ib2wuYmFzZVwiKX19LHJ1bGVzOnttYXA6e21ldGhvZChlKXtlJiYhZVtTeW1ib2wuaXRlcmF0b3JdJiZcIm9iamVjdFwiPT10eXBlb2YgZSYmKGU9T2JqZWN0LmVudHJpZXMoZSkpLHMoZSYmZVtTeW1ib2wuaXRlcmF0b3JdLFwiSXRlcmFibGUgbXVzdCBiZSBhbiBpdGVyYWJsZSBvciBvYmplY3RcIik7Y29uc3QgdD10aGlzLmNsb25lKCkscj1bXTtmb3IoY29uc3QgbiBvZiBlKXtzKG4mJm5bU3ltYm9sLml0ZXJhdG9yXSxcIkVudHJ5IG11c3QgYmUgYW4gaXRlcmFibGVcIik7Y29uc3RbZSxvXT1uO3MoXCJvYmplY3RcIiE9dHlwZW9mIGUmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJlwic3ltYm9sXCIhPXR5cGVvZiBlLFwiS2V5IG11c3Qgbm90IGJlIG9mIHR5cGUgb2JqZWN0LCBmdW5jdGlvbiwgb3IgU3ltYm9sXCIpLHMoXCJzeW1ib2xcIj09dHlwZW9mIG8sXCJWYWx1ZSBtdXN0IGJlIGEgU3ltYm9sXCIpLHQuJF90ZXJtcy5tYXAuc2V0KGUsbyksci5wdXNoKG8pfXJldHVybiB0LnZhbGlkKC4uLnIpfX19LG1hbmlmZXN0OntidWlsZDooZSx0KT0+KHQubWFwJiYoZT1lLm1hcCh0Lm1hcCkpLGUpfSxtZXNzYWdlczp7XCJzeW1ib2wuYmFzZVwiOidcInt7I2xhYmVsfX1cIiBtdXN0IGJlIGEgc3ltYm9sJyxcInN5bWJvbC5tYXBcIjonXCJ7eyNsYWJlbH19XCIgbXVzdCBiZSBvbmUgb2Yge3sjbWFwfX0nfX0pfV0pfSkpOyJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@hapi/joi/dist/joi-browser.min.js\n");

/***/ })

}]);